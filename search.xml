<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+GitHub搭建博客</title>
    <url>/2022/07/01/Hexo+GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.zyiz.net%2Fupload%2F202002%2F18%2F202002182223498227.png&refer=http%3A%2F%2Fwww.zyiz.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659501869&t=eedef2a99fe19a8fd51bafe9ae2a1177" alt="img"></p>
<span id="more"></span>

<p>搭建博客千千万，最后受欢迎的9还是Hexo和Jekyll,用户用的非常多的两个静态博客生成系统。本文就介绍利用Hexo结合github page来搭建个人博客。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h3><p>Hexo 是一个基于 node.js 制作的快速、简洁且高效的博客框架。Hexo 可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<h3 id="Hexo和Jekyll的区别"><a href="#Hexo和Jekyll的区别" class="headerlink" title="Hexo和Jekyll的区别"></a>Hexo和Jekyll的区别</h3><p>·本地环境<br>Jeklly 是由 Ruby 语言编写，需要到官网下载并安装 RubyInstaller。Hexo 则需要安装 Node.js 环境。网上经常看到很多人吐槽安装 Jekyll 经常碰到各种问题。</p>
<p>·速度<br>说是比较 Hexo 和 Jeklly 这两个框架，其实要比较 Ruby 和 Node.js 的运行速度。Node.js 是一个 Javascrip t运行环境(Runtime)。实际上它是对 Google V8 引擎进行了封装。众所周知，Google JS Runtime 速度非常快，性能非常好。在本地预览上，Jekyll 是生成了页面然后进行预览，而 Hexo 是没有在根目录生成文件的，速度也快不少。因此，Hexo 在性能和速度上面更胜一筹。</p>
<p>·部署<br>Jeklly 是将整个工程源码上传到 Github 仓库，然后 Github 会自动生成静态文件。而 Hexo 需要事先在本地生成整个站点页面，再将 Html 文件、资源文件等上传到 Github 上。</p>
<p>·主题<br>Jekyll 使用 Liquid；它是有 Ruby 语言编写的开源模板语言。Hexo 使用的是 EJS；EJS 是 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。EJS 相对比较复杂，所以可实现的功能更加的多。从开发一个主题难度上看，Hexo 实现起来更方便、更简单些。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>1、本机系统：Windows 10（64位）<br>2、Node.js：v6.9.2LTS（64位）</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I&#x2F;O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>打开官网下载链接Node.js:<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> (选择长期服务，版本更稳定)</p>
<p><img src="https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg" alt="img"></p>
<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>
<p>测试安装是否成功：</p>
<p>按【win+R】键，输入cmd，再按回车弹出命令窗口</p>
<p>输入：(显示版本行)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>显示结果：</p>
<p><img src="https://i.loli.net/2021/10/19/fDzgWhEbnkxPevL.jpg" alt="img"></p>
<p>即安装成功；</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p>
<p><strong>从一般开发者的角度来看，git有以下功能：</strong><br>1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。<br>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。<br>3、在单机上自己创建的分支上提交代码。<br>4、在单机上合并分支。<br>5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。<br>6、生成补丁（patch），把补丁发送给主开发者。</p>
<p>打开官网下载链接：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> (选择windows版本即可)</p>
<p><img src="https://i.loli.net/2021/10/19/7UgXJ4y3MV6Bpri.jpg" alt="img"></p>
<p>下载完成之后直接双击安装包，只需点击下一步（出下图外选项，默认所有选项），然后改变安装路径即可。</p>
<p><img src="https://i.loli.net/2021/10/19/oT9CgyscVXWPnbF.jpg" alt="img"></p>
<p>测试是否安装成功：</p>
<p>按【win+R】键，输入cmd，再按回车弹出命令窗口，再输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure>

<p>显示结果:</p>
<p><img src="https://i.loli.net/2021/10/19/y5LnHxaYiID93Cs.jpg" alt="img"></p>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）"><a href="#在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）" class="headerlink" title="在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）"></a>在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github注册的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后按四次【enter】即可，生成后如下图：</p>
<p><img src="https://i.loli.net/2021/10/19/6S8LwDAmHTMvqJz.jpg" alt="img"></p>
<h3 id="打开Github-点击头像–-gt-【setting】"><a href="#打开Github-点击头像–-gt-【setting】" class="headerlink" title="打开Github,点击头像–&gt;【setting】"></a>打开Github,点击头像–&gt;【setting】</h3><p><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" alt="img"></p>
<h3 id="点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】"><a href="#点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】" class="headerlink" title="点击【SSH and GPG keys】–&gt;【New SSH key】"></a>点击【SSH and GPG keys】–&gt;【New SSH key】</h3><p><img src="https://i.loli.net/2021/10/19/JNnuwh4dAMHFILT.jpg" alt="img"></p>
<h3 id="输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-x2F-用户-x2F-用户名-x2F-ssh-x2F-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；"><a href="#输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-x2F-用户-x2F-用户名-x2F-ssh-x2F-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；" class="headerlink" title="输入title（可以随便输），但Key你需要用记事本或Notepad++打开磁盘中c:&#x2F;用户&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa.pub然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；"></a>输入title（可以随便输），但Key你需要用记事本或Notepad++打开<strong>磁盘中c:&#x2F;用户&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa.pub</strong>然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；</h3><p><img src="https://i.loli.net/2021/10/19/uglR7p4jMUSbfxe.jpg" alt="img"></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在想要搭建博客的目录下创建文件夹名为blog，按【win+R】键，输入cmd，再按回车弹出命令窗口，cd到创建的文件夹下，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/19/pwBHNlgo2cdZiA4.jpg" alt="img"></p>
<p>不要关闭刚才的命令窗口，在刚才的窗口中初始化hexo，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init 你的博客名</span><br></pre></td></tr></table></figure>

<h3 id="在博客目录中安装依赖"><a href="#在博客目录中安装依赖" class="headerlink" title="在博客目录中安装依赖"></a>在博客目录中安装依赖</h3><p>在刚才的窗口中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 博客名</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>安装完成之后进行测试，窗口中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -p 5555</span><br></pre></td></tr></table></figure>

<p>在浏览器上输入 localhost:5555</p>
<p><img src="https://i.loli.net/2021/10/19/KFMBiULjA1yY8st.jpg" alt="img"></p>
<h3 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h3><p>打开官网下载链接：<a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a> （点击DPWNLOAD FOR WINDOWS）</p>
<p><img src="https://i.loli.net/2021/10/19/kAnXiPatsr2zxDc.jpg" alt="img"></p>
<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>
<p>打开Sublime 直接将博客目录拖进Sublime即可；</p>
<p><img src="https://i.loli.net/2021/10/19/RMkyeoixVCAt81f.jpg" alt="img"></p>
<h3 id="hexo发布到Github"><a href="#hexo发布到Github" class="headerlink" title="hexo发布到Github"></a>hexo发布到Github</h3><p>使用Sublime打开博客根目录中_config.yml 修改第16行的url 改为自己的网址（如 https:&#x2F;&#x2F;自己的博客名.github.io ）</p>
<p><img src="https://i.loli.net/2021/10/20/QHMrJse8xOnjWl5.jpg" alt="img"></p>
<p>打开Github网页点击【Your repositories】 最后复制链接</p>
<p><img src="https://i.loli.net/2021/10/20/u1w8kDULWQBvGzs.jpg" alt="img"><img src="https://i.loli.net/2021/10/20/6cGuVNTXKWFSZsw.jpg" alt="img"><img src="https://i.loli.net/2021/10/20/Sn8IUm5Tsq6dDcg.jpg" alt="img"></p>
<p>在_config.yml文件最后一行添加repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo: </span><br></pre></td></tr></table></figure>

<p>将你复制的链接添加到repo之后，用引号隔开（切记引号后面必须要有空格）</p>
<p>在最后一行添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">branch: main</span><br></pre></td></tr></table></figure>

<p>type后添加git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br></pre></td></tr></table></figure>

<p>如下图<br><img src="https://i.loli.net/2021/10/21/b4Px7pFjTvI5ea2.jpg" alt="img"></p>
<p>在博客根目录下添加插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="获取个人访问令牌"><a href="#获取个人访问令牌" class="headerlink" title="获取个人访问令牌"></a>获取个人访问令牌</h3><p>对密码身份验证的支持已于 2021 年 8 月 13 日移除。现在改用个人访问令牌。简单点说就是需要把你的密码换成 token。</p>
<p>在个人设置页面，找到 Settings<br><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" alt="img"><br>找到 Developer settings<br><img src="https://i.loli.net/2021/10/21/VkyOgL5Z1746mzT.jpg" alt="img"><br>选择个人访问令牌 Personal access tokens，然后点击生成令牌 Generate new token<br><img src="https://i.loli.net/2021/10/21/KsVtaRpmhUSLorF.jpg" alt="img"><br>设置 token 的有效期，访问权限等，生成令牌 Generate token<br><img src="https://i.loli.net/2021/10/21/6Kdwmi7Qr2MWUJf.jpg" alt="img"><br>如下为生成的令牌<br><img src="https://i.loli.net/2021/10/21/LMsRWZaq8oSUwnh.jpg" alt="img"></p>
<p>注意<br>记得把 token 保存下来，当你再次刷新网页的时候，就没办法看见了</p>
<p>最后，把 token 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 token 了。</p>
<p>添加到如下图位置：（使用“@”和后面内容隔开）</p>
<p><img src="https://i.loli.net/2021/10/21/WCX7dgp9UNFxJ1B.jpg" alt="img"></p>
<h3 id="git中设置你的用户名和邮件名"><a href="#git中设置你的用户名和邮件名" class="headerlink" title="git中设置你的用户名和邮件名"></a>git中设置你的用户名和邮件名</h3><p>这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;you@example.com&quot;</span><br></pre></td></tr></table></figure>



<h3 id="生成提交"><a href="#生成提交" class="headerlink" title="生成提交"></a>生成提交</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>打开你的浏览器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://博客名.github.io</span><br></pre></td></tr></table></figure>

<p>恭喜您，您的博客现在已制作完成，现在只需要添加你喜欢的主题既可以开始你的博客之旅了。</p>
<h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><p>hexo主题网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br><img src="https://i.loli.net/2021/10/21/AhUeqK8sB53jp4k.jpg" alt="img"></p>
<p>找到你喜欢的主题，例如next主题 点击【next】<br><img src="https://i.loli.net/2021/10/21/ciqEGsyQ3l9Oorp.jpg" alt="img"></p>
<p>按照文件中所说下载和修改即可<br><img src="https://i.loli.net/2021/10/21/b16RkjZFNDQAEic.jpg" alt="img"></p>
<p>在博客根目录中打开【Git Bash Here】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-themes-next</span><br></pre></td></tr></table></figure>

<p>安装完成后，打开 Hexo 配置文件(_config.yml)并将theme变量设置为next.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h3 id="现在来介绍常用的Hexo-命令"><a href="#现在来介绍常用的Hexo-命令" class="headerlink" title="现在来介绍常用的Hexo 命令"></a>现在来介绍常用的Hexo 命令</h3><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>
<p>命令简写<br>hexo n “我的博客” &#x3D;&#x3D; hexo new “我的博客” #新建文章<br>hexo g &#x3D;&#x3D; hexo generate #生成<br>hexo s &#x3D;&#x3D; hexo server #启动服务预览<br>hexo d &#x3D;&#x3D; hexo deploy #部署</p>
<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
]]></content>
  </entry>
  <entry>
    <title>Json教程</title>
    <url>/2022/07/01/Json%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://img0.baidu.com/it/u=1264698771,643931544&fm=253&fmt=auto&app=138&f=JPEG?w=640&h=404" alt="img"></p>
<span id="more"></span>
<h2 id="Json教程"><a href="#Json教程" class="headerlink" title="Json教程"></a>Json教程</h2><p>JSON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JavaScript 对象表示法)</p>
<p>JSON 是存储和交换文本信息的语法，类似 XML。</p>
<p>JSON 比 XML 更小、更快，更易解析。</p>
<p>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;百度&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;google&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.google.com&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;微博&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.weibo.com&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Json语法规则"><a href="#Json语法规则" class="headerlink" title="Json语法规则"></a>Json语法规则</h3><p>JSON 语法是 JavaScript 对象表示语法的子集。</p>
<ul>
<li>数据在名称&#x2F;值对中</li>
<li>数据由逗号分隔</li>
<li>大括号 <strong>{}</strong> 保存对象</li>
<li>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</li>
</ul>
<h3 id="JSON-名称-x2F-值对"><a href="#JSON-名称-x2F-值对" class="headerlink" title="JSON 名称&#x2F;值对"></a>JSON 名称&#x2F;值对</h3><p>JSON 数据的书写格式是：”key”:”value”</p>
<h3 id="JSON-值数据类型"><a href="#JSON-值数据类型" class="headerlink" title="JSON 值数据类型"></a>JSON 值数据类型</h3><p>JSON 值可以是：</p>
<ul>
<li>数字（整数或浮点数）:JSON 数字可以是整型或者浮点型，例如，”age”:18</li>
<li>字符串（在双引号中）:例如，”name”:”王钢蛋”</li>
<li>逻辑值（true 或 false）:JSON 布尔值可以是 true 或者 false，例如，”flag”:true</li>
<li>数组（在中括号中）:JSON 数组在中括号 <strong>[]</strong> 中书写，JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。数组可包含多个对象。</li>
<li>对象（在大括号中）:JSON 对象在大括号 <strong>{}</strong> 中书写，例如，{“data”:{“name”:”张三”,”age”:18}}</li>
<li>对象可以包含多个 <strong>key&#x2F;value（键&#x2F;值）</strong>对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。key 和 value 中使用冒号(:)分割。每个 key&#x2F;value 对使用逗号(,)分割。</li>
<li>null：例如，“name”:null</li>
</ul>
<h3 id="JSON访问"><a href="#JSON访问" class="headerlink" title="JSON访问"></a>JSON访问</h3><h4 id="访问JSON对象"><a href="#访问JSON对象" class="headerlink" title="访问JSON对象"></a>访问JSON对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;&#x27;</span></span><br><span class="line"><span class="comment">//将JSON格式的字符串转换成JSON对象</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>)</span><br></pre></td></tr></table></figure>

<h4 id="访问JSON数组"><a href="#访问JSON数组" class="headerlink" title="访问JSON数组"></a>访问JSON数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = <span class="string">&#x27;[&quot;google&quot;,&quot;baidu&quot;,&quot;sohu&quot;,&quot;sina&quot;]&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(ary);</span><br><span class="line">		</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="复杂情形"><a href="#复杂情形" class="headerlink" title="复杂情形"></a>复杂情形</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;&quot;students&quot;:[&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:18&#125;]&#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line">		</span><br><span class="line"><span class="keyword">let</span> ary = obj.<span class="property">students</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;ary.<span class="property">length</span>;i++)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(ary[i].<span class="property">name</span>+<span class="string">&quot;============&quot;</span>+ary[i].<span class="property">age</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p>JSON 通常用于与服务端交换数据。</p>
<p>在接收服务器数据时一般是字符串。</p>
<p>我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p>
]]></content>
  </entry>
  <entry>
    <title>Markdown过长导致页面无法显示问题</title>
    <url>/2022/07/04/Markdown%E8%BF%87%E9%95%BF%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://img1.baidu.com/it/u=729938845,709425648&fm=253&fmt=auto&app=138&f=JPEG?w=977&h=500" alt="img"></p>
<span id="more"></span>

<h2 id="文章摘要设置"><a href="#文章摘要设置" class="headerlink" title="文章摘要设置"></a>文章摘要设置</h2><p>打开主题配置文件 _config.yml 文件，找到如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>

<p>把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。</p>
<p>这里我们可以通过在文章使用<code>&lt;!-- more --&gt;</code>标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。</p>
<p>强烈推荐使用该<code>&lt;!-- more --&gt;</code>标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</p>
<h2 id="其他的文章配置"><a href="#其他的文章配置" class="headerlink" title="其他的文章配置"></a>其他的文章配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Post Settings</span><br><span class="line"># ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span><br><span class="line"># 自动将页面滚动到&lt;!-- more --&gt;标记下的地方。</span><br><span class="line">scroll_to_more: false# Automatically saving scroll position on each post/page in cookies.</span><br><span class="line"># 自动保存每篇文章或页面上一次滚动的地方。</span><br><span class="line">save_scroll: false# Automatically excerpt description in homepage as preamble text.</span><br><span class="line"># 自动在首页对文章进行摘要描述作为前言文本。</span><br><span class="line">excerpt_description: true# Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line"># 不推荐使用自动摘要。</span><br><span class="line"># 请在文章中使用&lt;!-- more --&gt;标志来精确控制摘要长度。</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 200# Post meta display settings</span><br><span class="line"># 文章元数据展示设置</span><br><span class="line">post_meta:</span><br><span class="line">  # 文本显示</span><br><span class="line">  item_text: true</span><br><span class="line">  # 创建时间</span><br><span class="line">  created_at: true</span><br><span class="line">  # 更新时间</span><br><span class="line">  # 这个更新时间有点问题，因为每次重新生成文章/部署时都会刷新更新时间，不建议使用</span><br><span class="line">  updated_at: false</span><br><span class="line">  # 目录分类</span><br><span class="line">  categories: true# Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line"># 文章字数展示设置</span><br><span class="line">post_wordcount:</span><br><span class="line">  # 文本显示</span><br><span class="line">  item_text: true</span><br><span class="line">  # 文章字数统计</span><br><span class="line">  wordcount: true</span><br><span class="line">  # 阅读时长</span><br><span class="line">  min2read: true</span><br><span class="line">  # 站点总字数统计</span><br><span class="line">  totalcount: true</span><br><span class="line">  # 该post_wordcount的所有设置另起一行显示</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>SpringBoot整合JPA</title>
    <url>/2022/07/01/SpringBoot%E6%95%B4%E5%90%88Jpa/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F2331630%2F202107%2F2331630-20210721141158611-538846916.png&refer=http%3A%2F%2Fimg2020.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659501639&t=2f8efd79e607e9df171c317efc448f26" alt="img"></p>
<span id="more"></span>


<p>1.添加依赖</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>org.springframework.boot<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>spring<span class="operator">-</span>boot<span class="operator">-</span>starter<span class="operator">-</span>data<span class="operator">-</span>jpa<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>org.springframework.boot<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>spring<span class="operator">-</span>boot<span class="operator">-</span>starter<span class="operator">-</span>jdbc<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.配置数据源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/student?serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="comment">#打印SQL语句</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#使用测试用例时需要配置该项</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">enable_lazy_load_no_trans:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>3.新建实体类，并建立映射关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name = &quot;student&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer studentId;</span><br><span class="line">    <span class="meta">@Column(name = &quot;student_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">    <span class="meta">@Column(name = &quot;student_gender&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String studentGender;</span><br><span class="line">    <span class="meta">@Column(name = &quot;student_age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String studentAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@Table：用于表明该实体类对应的是数据库中的哪张表，name属性用于配置表名。</p>
<p>@Entity：JPA要求实体类上需要标注该注解</p>
<p>@Id：在标注了@Entity的类上必须有一个字段标注该注解，该注解用于表明标注了此注解的字段是主键。</p>
<p>@GeneratedValue：用于表明该主键的生成策略，通常和@Id同时出现</p>
<p>@Column：该注解并不是必须的，通常用于表明该变量对应的数据库表字段，如果字段名称使用经典命名法，而变量名称使用了驼峰命名法，则此注解可以省略</p>
<h3 id="JpaRepository接口详解"><a href="#JpaRepository接口详解" class="headerlink" title="JpaRepository接口详解"></a>JpaRepository接口详解</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">public interface JpaRepository<span class="operator">&lt;</span>T, ID<span class="operator">&gt;</span> extends PagingAndSortingRepository<span class="operator">&lt;</span>T, ID<span class="operator">&gt;</span>, QueryByExampleExecutor<span class="operator">&lt;</span>T<span class="operator">&gt;</span> &#123;</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>查询所有的数据</span><br><span class="line">    List<span class="operator">&lt;</span>T<span class="operator">&gt;</span> findAll();</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>查询所有的数据，并排序，排序的字段及排序方式通过Sort对象指定</span><br><span class="line">    List<span class="operator">&lt;</span>T<span class="operator">&gt;</span> findAll(Sort sort);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>根据ID批量查询</span><br><span class="line">    List<span class="operator">&lt;</span>T<span class="operator">&gt;</span> findAllById(Iterable<span class="operator">&lt;</span>ID<span class="operator">&gt;</span> ids);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>批量保存</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> List<span class="operator">&lt;</span>S<span class="operator">&gt;</span> saveAll(Iterable<span class="operator">&lt;</span>S<span class="operator">&gt;</span> entities);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>刷新缓存</span><br><span class="line">    void flush();</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>保存并刷新缓存</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> S saveAndFlush(S entity);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>批量保存并刷新缓存</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> List<span class="operator">&lt;</span>S<span class="operator">&gt;</span> saveAllAndFlush(Iterable<span class="operator">&lt;</span>S<span class="operator">&gt;</span> entities);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>批量删除</span><br><span class="line">    void deleteAllInBatch(Iterable<span class="operator">&lt;</span>T<span class="operator">&gt;</span> entities);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>通过ID批量删除</span><br><span class="line">    void deleteAllByIdInBatch(Iterable<span class="operator">&lt;</span>ID<span class="operator">&gt;</span> ids);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>等价于删除全部数据</span><br><span class="line">    void deleteAllInBatch();</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>通过ID查询</span><br><span class="line">    T getById(ID id);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>通过示例批量查询</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> List<span class="operator">&lt;</span>S<span class="operator">&gt;</span> findAll(Example<span class="operator">&lt;</span>S<span class="operator">&gt;</span> example);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>通过示例批量查询</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> List<span class="operator">&lt;</span>S<span class="operator">&gt;</span> findAll(Example<span class="operator">&lt;</span>S<span class="operator">&gt;</span> example, Sort sort);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Jquery基础知识点</title>
    <url>/2022/07/08/Jquery%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.taodabai.com%2Fupload%2Fb6%2F47%2Fb647ba5763db7cdb66603673771da718.jpg&refer=http%3A%2F%2Fimg.taodabai.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659875204&t=eb5f718fab6f53be30c47dd30429dfac" alt="img"></p>
<span id="more"></span>

<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><h2 id="JQuery定义"><a href="#JQuery定义" class="headerlink" title="JQuery定义"></a>JQuery定义</h2><p>它是JavaScript的封装，它可以说是开源的JavaScript的函数库<br>使用它简化了JavaScript开发</p>
<h2 id="JQuery的下载及引用"><a href="#JQuery的下载及引用" class="headerlink" title="JQuery的下载及引用"></a>JQuery的下载及引用</h2><p>下载：<a href="https://jquery.com/download/">https://jquery.com/download/</a><br>下载好之后需要通过script标签引用，切记其位置必须是其它JavaScript代码之上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//调用Jquery代码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>JQuery与JavaScript比较</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//使用has方法</span></span></span><br><span class="line"><span class="language-javascript">   $(<span class="string">&quot;div&quot;</span>).<span class="title function_">has</span>(<span class="string">&quot;#demo&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>eq(索引)，表示选取指定索引的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">   $(<span class="string">&quot;div&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;这是第一个div里面的input&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;这是第二个div里面的input&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="选择转移"><a href="#选择转移" class="headerlink" title="选择转移"></a>选择转移</h2><p>我们可以以一个元素为参照，找到其它元素（节点选择）</p>
<p>详细如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">prev</span>(); 表示选择id是box元素的兄弟节点</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">prevAll</span>(); 表示选择id是box元素的上面所有的同级元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">next</span>(); 表示选择id是box元素的兄弟节点</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">nextAll</span>(); 表示选择id是box元素的下面所有的同级元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">parent</span>(); 表示选择id是box元素的父元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">children</span>(); 表示选择id是box元素的所有子元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">siblings</span>(); 表示选择id是box元素的其它同级元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.myClass&#x27;</span>); 表示选择id是box元素的<span class="keyword">class</span>等于myClass的元素</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//确定参照节点</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> $div = $(<span class="string">&quot;#demo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">prev</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">prevAll</span>().<span class="title function_">css</span>(<span class="string">&quot;font-size&quot;</span>,<span class="number">33</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">next</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">nextAll</span>().<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;gray&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#ff6700&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;gold&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>这是一个div</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是div里面的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这又是一个标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这是一个a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="html方法的使用"><a href="#html方法的使用" class="headerlink" title="html方法的使用"></a>html方法的使用</h2><p>在jquery中可以通过html属性为元素设置html内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> $div = $(<span class="string">&quot;#demo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//如果要获取内容</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> rs = $div.<span class="title function_">html</span>();</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">alert</span>(rs)</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">html</span>(<span class="string">&quot;&lt;span style=&#x27;color: red&#x27;&gt;哈嘿~~~~&lt;/span&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//在元素后追加内容</span></span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">append</span>(<span class="string">&quot;&lt;span style=&#x27;color: red&#x27;&gt;大宝贝&lt;/span&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="获取和设置元素的属性"><a href="#获取和设置元素的属性" class="headerlink" title="获取和设置元素的属性"></a>获取和设置元素的属性</h2><p>prop方法：css方法可以设置元素的样式属性，而该方法可以设置元素的其它属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">     $(function () &#123;</span><br><span class="line">     var $a = $(&quot;#aId&quot;);</span><br><span class="line">     var $input = $(&quot;#InputId&quot;);</span><br><span class="line">     //可以获取</span><br><span class="line">     var Sa = $a.prop(&quot;id&quot;);</span><br><span class="line">     // alert(Sa);</span><br><span class="line">     //设置元素属性</span><br><span class="line">     $a.prop(&#123;&quot;href&quot;:&quot;http://www.baidu.com&quot;,&quot;class&quot;:&quot;aClass&quot;,&quot;title&quot;:&quot;这是</span><br><span class="line">    标题&quot;&#125;);</span><br><span class="line">     //获取input中的属性value使用的是val()方法</span><br><span class="line">     // var Sinput = $input.prop(&quot;value&quot;);</span><br><span class="line">     // alert(Sinput);</span><br><span class="line">     var Sinput = $input.val();</span><br><span class="line">     alert(Sinput);</span><br><span class="line">     //设置value值</span><br><span class="line">     $input.val(&quot;12313212&quot;);</span><br><span class="line">     &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;aId&quot;</span>&gt;</span>这是a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;InputId&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;InputId&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JQuery事件"><a href="#JQuery事件" class="headerlink" title="JQuery事件"></a>JQuery事件</h2><p>常用事件</p>
<ul>
<li><p>click() 鼠标点击事件</p>
</li>
<li><p>blur() 离焦事件</p>
</li>
<li><p>focus() 聚焦事件</p>
</li>
<li><p>mouseover() 鼠标进入事件</p>
</li>
<li><p>mouseout() 鼠标离开事件</p>
</li>
<li><p>ready() DOM加载完毕触发</p>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line"> &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"> &lt;script src=&quot;jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">     $(function () &#123;</span><br><span class="line">     var $li = $(&quot;.list li&quot;);</span><br><span class="line">     var $input = $(&quot;#in_one&quot;);</span><br><span class="line">     var $btn = $(&quot;#btn&quot;);</span><br><span class="line">     var $div = $(&quot;#demo&quot;);</span><br><span class="line">     //点击事件</span><br><span class="line">     $li.click(function () &#123;</span><br><span class="line">     $(this).css(&#123;&quot;background&quot;:&quot;red&quot;&#125;);</span><br><span class="line">     //index()方法可以获取当前元素的索引值</span><br><span class="line">     //alert($(this).index())</span><br><span class="line">     &#125;);</span><br><span class="line">     //获取焦点</span><br><span class="line">     $input.focus(function () &#123;</span><br><span class="line">    • JQuery事件</span><br><span class="line">     分区 新分区 1 的第 7 页 </span><br><span class="line">     $input.focus(function () &#123;</span><br><span class="line">     $(this).val(&quot;嗨嗨嘿&quot;);</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">   &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">     &lt;li&gt;这是一行字&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;这是一行字&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;这是一行字&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;这是一行字&lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">     &lt;input type=&quot;text&quot; id=&quot;in_one&quot;/&gt;</span><br><span class="line">     &lt;input type=&quot;submit&quot; id=&quot;btn&quot; value=&quot;点一下&quot;/&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>html基础（一）</title>
    <url>/2022/07/08/html%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.iisp.com%2Fimage%2F20161011%2F20161011180825_78244.jpg&refer=http%3A%2F%2Fimg.iisp.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659877024&t=24bae5fadeb346539de3c527885be3df" alt="img"></p>
<span id="more"></span>

<h1 id="第一章-HTML基础"><a href="#第一章-HTML基础" class="headerlink" title="第一章 HTML基础"></a>第一章 HTML基础</h1><h2 id="1-1HTML简介"><a href="#1-1HTML简介" class="headerlink" title="1.1HTML简介"></a>1.1HTML简介</h2><p>​     HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言。HTML是由Web的发明者 Tim Berners-Lee和同事 Daniel W. Connolly于1990年创立的一种标记语言，它是标准通用化标记语言SGML的应用。用HTML编写的超文本文档称为HTML文档，它能独立于各种操作系统平台(如UNIX， Windows等)。使用HTML，将所需要表达的信息按某种规则写成HTML文件，通过专用的浏览器来识别，并将这些HTML文件“翻译”成可以识别的信息，即现在所见到的网页。<br>     自1990年以来，HTML就一直被用作万维网的信息表示语言，使用HTML描述的文件需要通过web浏览器显示出效果。HTML是一种建立网页文件的语言，通过标记式的指令(Tag)，将影像、声音、图片、文字动画、影视等内容显示出来。事实上，每一个HTML文档都是一种静态的网页文件，这个文件里面包含了HTML指令代码，这些指令代码并不是一种程序语言，只是一种排版网页中资料显示位置的标记结构语言，易学易懂，非常简单。HTML的普遍应用就是带来了超文本的技术―通过单击鼠标从一个主题跳转到另一个主题，从一个页面跳转到另一个页面，与世界各地主机的文件链接超文本传输协议规定了浏览器在运行HTML文档时所遵循的规则和进行的操作。HTTP的制定使浏览器在运行超文本时有了统一的规则和标准。<br>      <a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91"> 万维网</a>（world wide web，简称www）上的一个<a href="https://baike.baidu.com/item/%E8%B6%85%E5%AA%92%E4%BD%93/1750647">超媒体</a>文档称之为一个<a href="https://baike.baidu.com/item/%E9%A1%B5%E9%9D%A2">页面</a>（<a href="https://baike.baidu.com/item/%E5%A4%96%E8%AF%AD">外语</a>：page）。作为一个组织或者个人在<a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91/215515">万维网</a>上放置开始点的页面称为<a href="https://baike.baidu.com/item/%E4%B8%BB%E9%A1%B5">主页</a>（外语：Homepage）或首页，主页中通常包括有指向其他相关页面或其他节点的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88">指针</a>（<a href="https://baike.baidu.com/item/%E8%B6%85%E7%BA%A7%E9%93%BE%E6%8E%A5">超级链接</a>），所谓超级链接，就是一种<a href="https://baike.baidu.com/item/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E5%99%A8">统一资源定位器</a>（Uniform Resource Locator，<a href="https://baike.baidu.com/item/%E5%A4%96%E8%AF%AD">外语</a><a href="https://baike.baidu.com/item/%E7%BC%A9%E5%86%99">缩写</a>：<a href="https://baike.baidu.com/item/URL">URL</a>）指针，通过激活（点击）它，可使<a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8">浏览器</a>方便地获取新的网页。这也是HTML获得广泛应用的最重要的原因之一。在逻辑上将视为一个整体的一系列<a href="https://baike.baidu.com/item/%E9%A1%B5%E9%9D%A2">页面</a>的有机集合称为<a href="https://baike.baidu.com/item/%E7%BD%91%E7%AB%99">网站</a>（<a href="https://baike.baidu.com/item/Website">Website</a>或<a href="https://baike.baidu.com/item/Site/10831143">Site</a>）。超文本标记语言（英文缩写：HTML）是为“<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5">网页</a>创建和其它可在<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8">网页浏览器</a>中看到的信息”设计的一种<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">标记语言</a>。<br>     网页的本质就是超文本<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/5964436">标记语言</a>，通过结合使用其他的<a href="https://baike.baidu.com/item/Web%E6%8A%80%E6%9C%AF">Web技术</a>（如：<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a>、<a href="https://baike.baidu.com/item/%E5%85%AC%E5%85%B1%E7%BD%91%E5%85%B3%E6%8E%A5%E5%8F%A3">公共网关接口</a>、<a href="https://baike.baidu.com/item/%E7%BB%84%E4%BB%B6">组件</a>等），可以创造出功能强大的网页。因而，超文本标记语言是万维网（<a href="https://baike.baidu.com/item/Web">Web</a>）编程的基础，也就是说万维网是建立在超文本基础之上的。超文本标记语言之所以称为超文本标记语言，是因为文本中包含了所谓“超级链接”点。</p>
<h2 id="1-2-HTML版本"><a href="#1-2-HTML版本" class="headerlink" title="1.2 HTML版本"></a>1.2 HTML版本</h2><p>​        HTML是用来标记Web信息如何展示以及其他特性的一种语法规则，它最初于1989年由CERN的Tim Berners-Lee发明。HTML基于更古老一些的语言SGML定义，并简化了其中的语言元素。这些元素用于告诉浏览器如何在用户的屏幕上展示数据，所以很早就得到各个Web浏览器厂商的支持。 [5]<br>HTML历史上有如下版本： [5]<br>①HTML 1.0：在1993年6月作为互联网工程工作小组(IETF)工作草案发布。<br>②HTML 2.0：1995年1 1月作为RFC 1866发布，于2000年6月发布之后被宣布已经过时。<br>③HTML 3.2：1997年1月14日，W3C推荐标准。<br>④HTML 4.0：1997年12月18日，W3C推荐标准。<br>⑤HTML 4.01（微小改进）：1999年12月24日，W3C推荐标准。<br>⑥<a href="https://baike.baidu.com/item/HTML%205/8762673">HTML 5</a>：HTML5是公认的下一代Web语言，极大地提升了Web在富媒体、富内容和富应用等方面的能力，被喻为终将改变移动互联网的重要推手。Internet Explorer 8及以前的版本不支持。</p>
<h2 id="1-3-迎接新的Web时代"><a href="#1-3-迎接新的Web时代" class="headerlink" title="1.3 迎接新的Web时代"></a>1.3 迎接新的Web时代</h2><p>​        HTML5并不是革命性的改变，而只是发展性的。而且对于之前HTML4的很多标准都是兼容的，所有通过最新HTML5标准制作的Web应用也可以轻松的在老版本的浏览器上运行。HTML5标准中的确是集成了很多实用的功能比如：音视频、本地存储、Socket通信、动画等都是之前应用开发中确实感觉到Web端的鸡肋才得到重视和升级的。<br>       HTML5的目标是：它通过一些新标签，新功能为开发更加简、独立、标准的通用Web应用提供了标准。新的标准解决了三大问题：浏览器兼容问题，解决了文档结构不明确的问题，解决了Web应用程序功能受限等问题。<br>号称“CSS之父”的Hakon Wium Lie认为，HTML5与CSS3将是全球互联网发展的未来趋势。<br>自从2010年HTML5正式推出以来，它就以一种惊人的速度被迅速推广使用，微软也因此在IE上做了关于HTML5的标准改进，使其能够支持HTML5，google Chrome，Safari，Opera，Mozilla等主要Web浏览器也针对HTML5制定了相应的支持措施。<br>     目前主流的浏览器厂商也纷纷在研发HTML5相关产品，从目前这些浏览器对HTML5的支持来看，Web的未来属于HTML5</p>
<h2 id="1-4-HTML的开发环境和运行环境"><a href="#1-4-HTML的开发环境和运行环境" class="headerlink" title="1.4 HTML的开发环境和运行环境"></a>1.4 HTML的开发环境和运行环境</h2><p>​        HTML本质上就是一个文档，市面上常见的一些简单的文本编辑器都是可以用来开发HTML，编辑之后只需将后缀修改为”.html”即可 如：记事本，EditPlus等<br>前端开发也有众多专业的开发软件，如：Webstrom，Sublime Text，Dreamweaver，HBuilder等，本书主要以  webstrom为主要开发软件<br>        HTML运行环境即各种浏览器，如:IE，edge，Chrome，Firefox，Safari等均可作为HTML的运行环境</p>
<h2 id="1-5-HTML文档结构"><a href="#1-5-HTML文档结构" class="headerlink" title="1.5 HTML文档结构"></a>1.5 HTML文档结构</h2><p>​    HTML文档有明确的文档结构，包含三个部分：&lt;HTML&gt;中包含&lt;head&gt;…&lt;&#x2F;head&gt;部分和&lt;body&gt;…&lt;&#x2F;body&gt;部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：</p>
<ol>
<li><p>第1行，HTML5的文档声明，声明开发版本</p>
</li>
<li><p>第2行，&lt;html&gt;表示HTML的文档起点，”lang&#x3D;en”表示开发语言为英语，与之对应的在文档的最后一行&lt;&#x2F;html&gt;表示文档的结束位置</p>
</li>
<li><p>第3，6行，表示文档的头部信息，该部分中的内容不在浏览器的主体中显示，文档头部中主要用来做一些辅助功能。</p>
</li>
<li><p>第4行，&lt;meta&gt;是&lt;head&gt;中的一个辅助性标签，不包含任何内容，它的属性定义了与文档相关联的名称&#x2F;值，它提供了相关页面的元信息如：针对搜索引擎和更新频度的描述和关键词， 详见下节&lt;meta&gt;标签</p>
</li>
<li><p>第5行，&lt;title&gt;用来添加网页的标题，网页标题显示在浏览器的标题栏中</p>
<p>​</p>
</li>
</ol>
<h2 id="1-lt-meta-gt-标签"><a href="#1-lt-meta-gt-标签" class="headerlink" title="1. &lt;meta&gt;标签"></a>1. &lt;meta&gt;标签</h2><ul>
<li>&lt;meta&gt;标签位于&lt;head&gt;标签区域内提供了HTML的文档元数据（注：元数据是数据的数据信息且元数据不会显示在客户端，但是会被浏览器解析）</li>
<li>&lt;meta&gt;标签提供了文档的字符集，使用语言，作者等基本信息，此外还涉及关键词和网页等级设定</li>
<li>&lt;meta&gt;标签常用属性表</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://baike.baidu.com/item/charset">charset</a></td>
<td><em>character_set</em></td>
<td>定义文档的字符编码。</td>
</tr>
<tr>
<td><a href="https://baike.baidu.com/item/content">content</a></td>
<td><em>text</em></td>
<td>定义与 http-equiv 或 name 属性相关的元信息。</td>
</tr>
<tr>
<td>http-equiv</td>
<td>content-typedefault-stylerefresh</td>
<td>把 content 属性关联到 HTTP 头部。</td>
</tr>
<tr>
<td>name</td>
<td>application-nameauthordescriptiongeneratorkeywords</td>
<td>把 content 属性关联到一个名称。</td>
</tr>
<tr>
<td><a href="https://baike.baidu.com/item/scheme/8379129">scheme</a></td>
<td><em>format&#x2F;URI</em></td>
<td>HTML5不支持。定义用于翻译 content 属性值的格式。</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明文档的字符编码，中文常用的还有GBK，gb2312--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页面关键词--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;软件咨询，软件开发，影视后期&quot;</span>/&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--页面描述--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;软件开发，影视后期，我们可以快速的帮你提升职业技能水平&quot;</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--网页作者--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Mr.cai&quot;</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--搜索引擎抓取robots是一组使用逗号（，）分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noindex&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上面示例定义了此网页不被搜索引擎索引进数据库，但搜索引擎可以通过此网页的链接继续索引其它网页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;nofollow&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上面示例定义此网页被搜索引擎索引进数据库，但搜索引擎不可以通过此网页的链接继续索引其它网页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上面示例定义了此网页不被搜索引擎索引进数据库，且搜索引擎不可以通过此网页的链接继续索引其它网页--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--针对谷歌GOOGLEBOT使用robots--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以将name的属性只定义为GOOGLEBOT标识为谷歌搜索引擎。 使用元标记拦截或删除网页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;googlebot&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noindex, nofollow&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--针对百度baiduspider使用robots--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以将name的属性只定义为baiduspider标识为百度搜索引擎。禁止搜索引擎收录的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;baiduspider&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noarchive&quot;</span>/&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--页面重定向和刷新--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0;url=http://www.baidu.com&quot;</span>/&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--禁止Chrome浏览器中自动提示翻译--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google&quot;</span> <span class="attr">value</span>=<span class="string">&quot;notranslate&quot;</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--禁止百度转码--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-siteapp&quot;</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--自定义标签：app版本号说明--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;app-version&quot;</span><span class="attr">content</span>=<span class="string">&quot;1.13.3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>meta<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-7-元素"><a href="#1-7-元素" class="headerlink" title="1.7 元素"></a>1.7 元素</h2><p>HTML文档由HTML元素定义，一个基本元素由“开始标签”，“元素内容”，“结束标签”构成</p>
<table>
<thead>
<tr>
<th>&lt;开始标签&gt;</th>
<th>元素内容</th>
<th>&lt;&#x2F;结束标签&gt;</th>
</tr>
</thead>
<tbody><tr>
<td>HTML元素以开始标签起始</td>
<td>元素内容即开始标签和结束标签之间的内容</td>
<td>HTML元素以结束标签终结</td>
</tr>
</tbody></table>
<h2 id="1-8-块级标签和行级标签"><a href="#1-8-块级标签和行级标签" class="headerlink" title="1.8 块级标签和行级标签"></a>1.8 块级标签和行级标签</h2><p>HTML中，所有标签都是预定义的，也就是说所有的标签都有各自的特点属性，根据这些特点可将标签分为块级标签和行级标签两类</p>
<h4 id="1-8-1-块级标签"><a href="#1-8-1-块级标签" class="headerlink" title="1.8.1 块级标签"></a>1.8.1 块级标签</h4><p>块级标签编译后在浏览器中默认没有高度，其高度由其添加的内容决定，其宽度默认为屏幕宽度，也就是说块级标签默认占一行</p>
<h4 id="1-8-2-行级标签"><a href="#1-8-2-行级标签" class="headerlink" title="1.8.2 行级标签"></a>1.8.2 行级标签</h4><p>行级标签编译后在浏览器中默认没有宽度和高度，其宽高均有添加的内容决定，也就是说行级标签在其内容不满一行时不会换行</p>
<h2 id="1-9-HTML常用标签"><a href="#1-9-HTML常用标签" class="headerlink" title="1.9 HTML常用标签"></a>1.9 HTML常用标签</h2><h4 id="1-9-1-常用的块级标签"><a href="#1-9-1-常用的块级标签" class="headerlink" title="1.9.1 常用的块级标签"></a>1.9.1 常用的块级标签</h4><ul>
<li><p>标题标签</p>
</li>
<li><ul>
<li>标题（Heading）通过&lt;h1&gt;….&lt;h6&gt;标签定义，表示一级标题至六级标题，其中&lt;h1&gt;最大，&lt;h6&gt;最小</li>
<li>标题标签只用于标题</li>
<li>标题标签不单单用于字体放大加粗，更多的是为搜索引擎使用标题帮助网页索引</li>
</ul>
</li>
<li><p>段落标签</p>
</li>
<li><ul>
<li>段落通过&lt;p&gt;…&lt;&#x2F;p&gt;标签定义，表示文档中的一个自然段</li>
<li>注：段落标签不能嵌套使用，若想要段落标签中的内容换行显示可使用<br/>标签换行</li>
</ul>
</li>
<li><p>div标签</p>
</li>
<li><ul>
<li><p>div标签用于定义文档中的分区或节</p>
</li>
<li><p>可以把文档分割为独立的，不同的部分</p>
</li>
<li><p>在后期通过学习样式表，div可以与CSS配合对整个网页进行页面布局，模块划分，让网页制作不再有难度</p>
</li>
<li><p>div若不带样式单独使用则与段落标签<p>相似，没有特定的含义</p>
<p>​</p>
</li>
</ul>
</li>
<li><p>无序列表</p>
</li>
<li><ul>
<li>列表可以结合链接标签用来定义新闻标题等一些较为常用的标题类链接</li>
<li>无序列表使用<ul>定义列表，<li>定义列表中的条目，默认此列项目使用黑色小圆点进行标记</li>
<li>通过在<ul>中添加type属性更改列表的展示标记，其中disc表示实心圆，square表示矩形显示，circle表示空心圆</li>
</ul>
</li>
<li><p>有序列表</p>
</li>
<li><ul>
<li>有序列表使用<ol>定义列表，<li>定义列表中的条目，默认此列项目使用阿拉伯数字进行标记</li>
<li>通过在<ol>中添加type属性更改列表的展示标记，其中‘A’表示大写字母，‘a’表示小写字母，‘I’表示大写罗马数字，‘i’表示小写罗马数字，‘1’表示阿拉伯数字（默认）</li>
</ul>
</li>
<li><p>自定义列表</p>
</li>
<li><ul>
<li>使用<dl>定义列表，<dt>定义列表中的项目，<dd>定义列表条目</li>
<li>自定义列表不单单只用了区分项目，后期通过样式，标签嵌套可以胜任诸多任务，如：商城，外卖类网站商品的模块划分</li>
</ul>
</li>
</ul>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>pc端游戏<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>穿越火线<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>英雄联盟<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>CSGO<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>手机游戏<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>和平精英<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>阴阳师<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>嵌套列表</p>
</li>
<li><ul>
<li>列表可以通过多层嵌套实现多级列表</li>
</ul>
</li>
</ul>
<h4 id="1-9-2-常用的行级标签"><a href="#1-9-2-常用的行级标签" class="headerlink" title="1.9.2 常用的行级标签"></a>1.9.2 常用的行级标签</h4><ul>
<li><p>内联元素</p>
</li>
<li><ul>
<li>使用<span>…<span>表示</li>
<li>单独使用没有特定的含义</li>
<li>当与CSS一同使用，用来组合文档中的行内元素，如：在一行文字中给某一个字单独设置样式，再或者在某行字中添加小图标</li>
</ul>
</li>
<li><p>链接标签</p>
</li>
<li><ul>
<li>使用<a href="url">…</a>表示</li>
<li>用于从一个页面跳转到另一个页面</li>
<li>href表示跳转的链接目标</li>
<li>默认情况下链接将以以下形式出现在网页中</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在未点击访问时链接字体程蓝色并带同色下划线</li>
<li>在点击后链接字体会程红色显示并带同色下划线</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>标签常用属性</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>download</td>
<td>filename</td>
<td>指定下载链接</td>
</tr>
<tr>
<td>href</td>
<td>URL</td>
<td>规定链接目标</td>
</tr>
<tr>
<td>target</td>
<td>_blank_parent_self_top</td>
<td>_blank：新窗口打开。_parent：在父窗口中打开链接。_self：默认，当前页面跳转。_top：在当前窗体打开链接，并替换当前的整个窗体(框架页)。</td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li>在网页开发中常用的链接有以下四种：</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>链接分类</th>
<th>属性参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>空链接</td>
<td>href&#x3D;”#”href&#x3D;”javascript:void(0)”</td>
<td>空链接即只能点击不会做页面跳转的链接，用于向页面上添加对象或行为  如：设为首页，添加收藏等</td>
</tr>
<tr>
<td>本地链接</td>
<td>href&#x3D;”本地路径”</td>
<td>用于本地工程&#x2F;服务器页面之间的相互跳转</td>
</tr>
<tr>
<td>网络链接</td>
<td>herf&#x3D;”url”</td>
<td>用于给网站添加外部链接，点击后跳转到其它网站</td>
</tr>
<tr>
<td>锚链接</td>
<td>href&#x3D;”#name”</td>
<td>用于添加页面内快速引导，可以从页面的一个位置快速的转到另一个位置</td>
</tr>
</tbody></table>
<p>空链接“#”与“javascript:void(0)”的区别：</p>
<ol>
<li>“#”包含一个位置信息，默认为网页顶端，当页面高度大于一屏时，点击后会跳转到网页顶部</li>
<li>“javascript:void(0)”是一个伪协议，表示url内容通过javascript执行，而void(0)则表示不作任何操作，这样该标签既保留了链接样式还能防止页面跳转</li>
<li>空链接通常通过添加javascript事件去做一些其它操作，如：设置收藏，设置首页，弹窗等，这些会在本书javascript事件章节详细讲解</li>
</ol>
<p>绝对路径和相对路径</p>
<p>绝对路径：是指文件在硬盘上的真正存在的路径，如：一张名为“头像.jpg”的图片或一个名为“index.html”的网页存放在我计算机中的“C:\Users\document\WebstormProjects\untitled15”目录中，则图片的绝对路径为“C:\Users\document\WebstormProjects\untitled15\头像.jpg”，网页的绝对路径为“C:\Users\document\WebstormProjects\untitled15\index.html”，但在开发时很少使用绝对路径，当指定了决定路径后在项目路径在本地计算机上是没问题的，但上传到服务器或在其它计算机上时很可能会出现找不到路径，路径错误等问题。</p>
<p>相对路径：指由文件本身相对于目标文件的路径，使用相对路径的三种写法，下边以网页index.html引用网页Login.html为例说明：</p>
<p>1.若Login.html相对index.html是在同一目录，那么网页在引用图片时则只需要通过Login.html名称+后缀引用即可</p>
<table>
<thead>
<tr>
<th>位置关系图示</th>
<th>代码示例</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626061269598-89399a32-cf28-42f3-beff-1c35ca4a7265.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_10,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td>
<td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626061301889-949b6f4d-7725-47f2-85f0-dbf5806facd0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td>
</tr>
</tbody></table>
<p>​             2.若网页Login.html存在某个文件夹中，文件夹与网页index.html属于同一目录，那么网页index.html在引用网页Login.html时则需要通过找到文件夹使用分隔符“&#x2F;”才能找到文件夹中相对的网页Login.html文件，这里需要注意：绝对路径使用分隔符“\”，相对路径使用分隔符“&#x2F;”</p>
<table>
<thead>
<tr>
<th>位置关系图示</th>
<th>代码示例</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626061376948-03e21db6-7ff0-47a9-8211-aac16e6f9369.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td>
<td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626061390608-6d2708e8-bee4-41a4-b85d-dbec01b0f42d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td>
</tr>
</tbody></table>
<p>3.若网页index.html和网页Login.html都存在不同的文件夹中，两个不同的文件夹属于同一目录，那么网页index.html在引用网页Login.html时则需要通过“..&#x2F;”返回上一级路径再去引用存放网页Login.html的文件夹再使用分隔符“&#x2F;”引用网页Login.html，这里需要注意一个“..&#x2F;”，表示网上返回一级，如果要返回多个则需要使用多个“..&#x2F;”</p>
<p>网络链接示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网络链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>锚链接示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span>这是网页顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#middle&quot;</span>&gt;</span>跳转至网页中部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bottom&quot;</span>&gt;</span>跳转至网页底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>网页内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里省略若干行相同内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>这是网页中部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>跳转至网页顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bottom&quot;</span>&gt;</span>跳转至网页底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>网页内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里省略若干行相同内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#middle&quot;</span>&gt;</span>跳转至网页中部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>跳转至网页顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>这是网页底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>附：</p>
<ol>
<li>锚链接是在页面内的不同位置跳转，本质上就是元素间的跳转</li>
<li>使用锚链接首先要建立锚点目标，只需要给元素添加id或name属性即可 如：<a name="top">,<div id="top"></li>
<li>建立好锚点目标后再使用<a href="#id值或name值">引用锚点</li>
<li>如果不同页面跳转，同时存在锚点，则先跳转到要跳转的页面，然后在寻找锚点元素进行跳转</li>
</ol>
<ul>
<li><p>图片标签</p>
</li>
<li><ul>
<li>图片标签使用<img/>表示，图片标签没有结束标签“&#x2F;”表示结束</li>
<li>标签属性</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>src（必需）</td>
<td>url</td>
<td>图片路径或网络地址</td>
</tr>
<tr>
<td>title</td>
<td>text</td>
<td>图片标题描述，当鼠标悬停在图片上时显示</td>
</tr>
<tr>
<td>alt</td>
<td>text</td>
<td>图片替换文本，当图片路径发生错误时显示</td>
</tr>
<tr>
<td>width</td>
<td>pixels</td>
<td>图片宽度</td>
</tr>
<tr>
<td>height</td>
<td>pixels</td>
<td>图片高度</td>
</tr>
</tbody></table>
<ul>
<li><p>图片增强（map）</p>
</li>
<li><ul>
<li><code>&lt;map&gt;</code>标签有助于定义图像映射。图像映射指的是图像中包含一个或多个可点击区域。<code>&lt;map&gt;</code>标签与<code>&lt;area&gt;</code>标签一起确定可点击区域。可点击区域可以是矩形、圆形或多边形区域这些形状之一。如果不指定形状，就会认为是整个图像。</li>
</ul>
</li>
</ul>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;img src=&quot;../images/mapImages/4.png&quot; width=&quot;592&quot; height=&quot;182&quot; alt=&quot;mapSelect&quot; usemap=&quot;#circusmap&quot;&gt;</span><br><span class="line">        &lt;map name=&quot;circusmap&quot;&gt;</span><br><span class="line">            &lt;area shape=&quot;rect&quot; coords=&quot;82,70,155,133&quot; href=&quot;map2.html&quot;&gt;</span><br><span class="line">            &lt;area shape=&quot;rect&quot; coords=&quot;297,70,387, 133&quot; href=&quot;map1.html&quot;&gt;</span><br><span class="line">            &lt;area shape=&quot;rect&quot; coords=&quot;480,70,572, 133&quot; href=&quot;map3.html&quot;&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>知识补充：</p>
<ul>
<li><ul>
<li><area>标签定义图像映射中的区域</li>
<li>shape属性</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>shape属性用于定义图像映射中对鼠标敏感的区域的形状</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>圆形（circ或circle）</li>
<li>多边形（poly或polygon）</li>
<li>矩形（rect或rectangle）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>coords属性</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>圆形：shape&#x3D;”circle”，coords&#x3D;”x,y,z”</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这里的 x 和 y 定义了圆心的位置（”0,0” 是图像左上角的坐标），z 是以像素为单位的圆形半径。</p>
<ul>
<li><ul>
<li><ul>
<li>多边形：shape&#x3D;”polygon”，coords&#x3D;”x1,y1,x2,y2,x3,y3,…”</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>每一对 “x,y” 坐标都定义了多边形的一个顶点（”0,0” 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。</p>
<p>多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。</p>
<ul>
<li><ul>
<li><ul>
<li>矩形：shape&#x3D;”rectangle”，coords&#x3D;”x1,y1,x2,y2”</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，”0,0” 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。</p>
<ul>
<li>常用文本格式化标签</li>
</ul>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><b></td>
<td>定义粗体文本</td>
</tr>
<tr>
<td><em></td>
<td>定义着重文字</td>
</tr>
<tr>
<td><i></td>
<td>定义斜体文字</td>
</tr>
<tr>
<td><small></td>
<td>定义小号文字</td>
</tr>
<tr>
<td><strong></td>
<td>定义加重语气</td>
</tr>
<tr>
<td><sub></td>
<td>定义下标字</td>
</tr>
<tr>
<td><sup></td>
<td>定义上标字</td>
</tr>
<tr>
<td><ins></td>
<td>定义插入字(加了下划线)</td>
</tr>
<tr>
<td><del></td>
<td>定义删除字(加了删除线)</td>
</tr>
</tbody></table>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>定义粗体文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>定义着重文字<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>定义斜体文字<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>定义小号文字<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>定义加重语气<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    定义下标字 <span class="tag">&lt;<span class="name">sub</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    定义上标字 <span class="tag">&lt;<span class="name">sup</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ins</span>&gt;</span>定义插入字(加了下划线)<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>定义删除字(加了删除线)<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2022/07/08/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><img src="https://img2.baidu.com/it/u=3364251630,2616048261&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=281" alt="img"></p>
<span id="more"></span>

<h1 id="第一章-JavaScript-基础"><a href="#第一章-JavaScript-基础" class="headerlink" title="第一章 JavaScript 基础"></a>第一章 JavaScript 基础</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>​        JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。<br>●是一种解释性脚本语言（代码不进行预编译）。<br>●主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。<br>●可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。<br>●跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。<br>        Javascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。</p>
<h2 id="1-2-JavaScript能做什么"><a href="#1-2-JavaScript能做什么" class="headerlink" title="1.2 JavaScript能做什么"></a>1.2 JavaScript能做什么</h2><p>●使网页具有交互性，例如响应用户点击，给用户提供更好的体验<br>●可以处理表单，检验用户的输入，并提供及时反馈节省用户时间。例如，表单中要你输入电子邮箱而你却输入一个手机号，那么应该给你一个提醒。<br>●还可以根据用户的操作，动态的创建页面。例如，发邮件时，添加附件操作。<br>●设置cookie，cookie是存储在浏览器上的一些临时信息，例如你浏览过的网站地址，使用过的用户名<br>●JavaScript 是有规律地重复的HTML元素简化，减少下载时间。<br>●浏览器与服务器进行数据通讯，比如现在最流行的Ajax异步传输；</p>
<h2 id="1-3-JavaScript构成"><a href="#1-3-JavaScript构成" class="headerlink" title="1.3 JavaScript构成"></a>1.3 JavaScript构成</h2><p>●JavaScript由以下三部分组成：<br>○ECMAScript，它用来描述语法和基本对象<br>○文档对象模型Doucment Object       Model（DOM），用来处理网页内容</p>
<p><img src="https://files.catbox.moe/vxrm52.png"><br>○浏览器对象模型Borwser Object Model（BOM），用来处理浏览器交互<br><img src="https://files.catbox.moe/8s07n8.png"></p>
<h2 id="1-4-JavaScript的开发环境与运行环境"><a href="#1-4-JavaScript的开发环境与运行环境" class="headerlink" title="1.4 JavaScript的开发环境与运行环境"></a>1.4 JavaScript的开发环境与运行环境</h2><p>●JavaScript为轻型脚本语言，可在任意文本编辑器中编辑<br>●由于JavaScript是内嵌在HTML中执行，所以其运行环境即浏览器<br>10.5 JavaScript的使用<br>●JavaScript需在HTML中内嵌运行，其内嵌方式有两种：<br>○在网页中创建&lt;script&gt;&lt;&#x2F;script&gt;,在标签之间写JavaScript代码<br>JavaScript复制代码`<code>1﻿</code>&lt;script&gt;<code>2﻿</code>    alert(“hello world”)<code>3﻿</code>&lt;script&gt;&#96;</p>
<h2 id="1-5-JavaScript的使用"><a href="#1-5-JavaScript的使用" class="headerlink" title="1.5 JavaScript的使用"></a>1.5 JavaScript的使用</h2><ul>
<li><p>JavaScript需在HTML中内嵌运行，其内嵌方式有两种：</p>
</li>
<li><ul>
<li>在网页中创建&lt;script&gt;&lt;&#x2F;script&gt;,在标签之间写JavaScript代码</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  	<span class="title function_">alert</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>在外部创建“.js”文件，通过&lt;script src&#x3D;”文件路径”&gt;引入到HTML文件中执行</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;xxx/xxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-6-JavaScript基础"><a href="#1-6-JavaScript基础" class="headerlink" title="1.6 JavaScript基础"></a>1.6 JavaScript基础</h2><ul>
<li><p>值</p>
</li>
<li><ul>
<li>数字类型的值（数字）</li>
<li>算术值（加减乘除等运算，需要两个或两个以上的数字）</li>
<li>特殊数字</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在JavaScript中有三个特殊数值，他们被视为数字，但其行为不像普通数字那样</li>
<li>Infinity和-Infinity表示正无穷大和负无穷大</li>
<li>NaN代表不是数字，就是不当的算数运算得到不当的值（比如：0&#x2F;0或者Infinity-Infinity都会得到这样的值）</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>字符串（用于表示文本，使用引号引起来即可）</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在字符串中还需要注意</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><p>在引号中添加特殊字符时比较难加，但是只需要添加反引号”&#96;“就可解决这个问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello my   &quot;son&quot;`</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>转义符（\）</p>
</li>
<li><ul>
<li><p>出现在引用文本中，表示后面有特殊字符</p>
</li>
<li><p>换行符（\n）</p>
</li>
<li><p>制表符（\t）</p>
</li>
<li><p>如果希望字符串中的斜杠只是斜杠，可以使用两个斜杠</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;l   input \&quot;\\n\&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>运算符</p>
</li>
<li><ul>
<li>一元运算符</li>
</ul>
</li>
<li><ul>
<li><p>在JavaScript中并非所有的运算符都是由符号构成的，还有由单词构成的符号，如：typeof运算符用来生成一个字符串，表示你输入数据的类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span>   <span class="number">2.2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span>   <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>布尔值</p>
</li>
<li><ul>
<li>比较运算符（&gt;,&lt;,&lt;&#x3D;,&lt;&#x3D;……）</li>
</ul>
</li>
<li><ul>
<li><p>比较运算符属于二元运算符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>&lt;<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>字符串也是可以比较的</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(a&gt;b)</th>
</tr>
</thead>
<tbody><tr>
<td>字符串在比较时大致时按照字母的顺序比较，而小写字母的大于大写字母，在字符串比较是JavaScript从左道右遍历字符按照字母的unicode编码进行比较</td>
</tr>
<tr>
<td>注意：在JavaScript中只有一个值不等于它自己，他就是NaN（不是数字）console.log(NaN&#x3D;&#x3D;NaN)返回false</td>
</tr>
</tbody></table>
<ul>
<li><p>逻辑运算符（与，或，非）</p>
</li>
<li><ul>
<li>&amp;&amp;:表示逻辑与，表示结果为真才为真</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(true&amp;&amp;false)</th>
<th>false</th>
</tr>
</thead>
<tbody><tr>
<td>console.log(true&amp;&amp;true)</td>
<td>true</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li>||：表示逻辑或，表示一个为真，则为真</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(true||false)</th>
<th>true</th>
</tr>
</thead>
<tbody><tr>
<td>console.log(false||false)</td>
<td>false</td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li>!：表示逻辑非，表示取反</li>
<li>在上边两种运算符混合使用时需要注意他们的优先级，一般情况下是,||具有最低优先级，然后时&amp;&amp;，然后是比较运算符，再然后时其他运算符</li>
<li>三元运算符，由问号和冒号写成</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(true?1:2)</th>
</tr>
</thead>
<tbody><tr>
<td>console.log(false?1:2)</td>
</tr>
</tbody></table>
<ul>
<li><p>空值</p>
</li>
<li><ul>
<li>再JavaScript中使用null和undefined表示空值</li>
</ul>
</li>
<li><p>自动类型转换</p>
</li>
<li><ul>
<li>JavaScript的包容性时相当高的，几乎可以接受你给他的任何程序</li>
<li>当运算符应用不同类型的值时，JavaScript会使用一组规则自动将值转换成所需要的类型供你使用（强制类型转换）</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(8*null)–&gt;0</th>
</tr>
</thead>
<tbody><tr>
<td>console.log(“3”-1)–&gt;2</td>
</tr>
<tr>
<td>console.log(“3”+1)–&gt;31</td>
</tr>
<tr>
<td>console.log(“six”*1)–&gt;NaN</td>
</tr>
<tr>
<td>console.log(false&#x3D;&#x3D;0)–&gt;true</td>
</tr>
<tr>
<td>console.log(null&#x3D;&#x3D;undefined)–&gt;true</td>
</tr>
<tr>
<td>console.log(null&#x3D;&#x3D;0)–&gt;false</td>
</tr>
</tbody></table>
<ul>
<li><p>表达式</p>
</li>
<li><ul>
<li>生成值得代码片段称之为表达式</li>
</ul>
</li>
<li><p>绑定（变量）</p>
</li>
<li><ul>
<li>·JavaScript为了让程序中得数据保持提供了一个称为绑定（binding）或变量（variable）得东西</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>let属于JavaScript关键字表示将定义一个绑定，它得后面是绑定名称，如果我们想给它一个值，则由”&#x3D;”运算符和表达式来完成</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>let a &#x3D;   1*2</th>
</tr>
</thead>
<tbody><tr>
<td>let num &#x3D;   10;  console.log(num*num);</td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li><ul>
<li>当绑定值指向一个值时并部意味着它永远时该值，”&#x3D;”运算符随时可以更新绑定赋予绑定新值</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在JavaScript中不单单可以使用let去做绑定,var和const两个也可以用于绑定</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>var   name&#x3D;”hello”;console.log(name);</th>
</tr>
</thead>
<tbody><tr>
<td>const demo   &#x3D; “world”;console.log(demo);</td>
</tr>
<tr>
<td>console.log(name+demo);</td>
</tr>
<tr>
<td>注：1.var全称(variable)表示变量，多用于以前得JavaScript中声明绑定2.const全称（constant），表示定义一个常量绑定，只要它存在，它就一直指向相同得值</td>
</tr>
</tbody></table>
<ul>
<li><p>JavaScript语句</p>
</li>
<li><ul>
<li>JavaScript语句是发给浏览器的命令</li>
<li>这些命令的作用是告诉浏览器要做的事情</li>
</ul>
</li>
<li><p>分号</p>
</li>
<li><ul>
<li>分号用于分隔JavaScript语句</li>
<li>通常我们在每条可执行的语句结尾添加分号，代表作一句JavaScript语句的结束</li>
<li>使用分号的另一个好处就是。。。。能在一行多写点代码嘛</li>
</ul>
</li>
<li><p>JavaScript代码</p>
</li>
<li><ul>
<li>JavaScript代码是JavaScript语句的序列</li>
<li>浏览器按照编写顺序依次执行每条语句</li>
</ul>
</li>
<li><p>JavaScript代码块</p>
</li>
<li><ul>
<li>JavaScript可以分批地组合起来</li>
<li>代码块以左花括号开始，以右花括号结束</li>
<li>代码块的作用是一并执行语句序列</li>
</ul>
</li>
<li><p>JavaScript语句标识符</p>
</li>
<li><ul>
<li>JavaScript语句通常以一个语句标识符为开始，并执行该语句。</li>
<li>语句标识符是保留关键字不能作为变量名使用</li>
<li>JavaScript语句标识符（关键字）</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>语句</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>break</td>
<td>用于跳出循环</td>
</tr>
<tr>
<td>catch</td>
<td>语句块，在try语句块执行出错时执行catch语句块</td>
</tr>
<tr>
<td>continue</td>
<td>跳过循环的一个迭代</td>
</tr>
<tr>
<td>do…while</td>
<td>执行一个语句块，在条件语句为true时继续执行该语句块</td>
</tr>
<tr>
<td>for</td>
<td>在条件语句为true时，可以将代码块执行指定的次数</td>
</tr>
<tr>
<td>for…in</td>
<td>用于遍历数组或对象的属性（对数组或者对象的属性进行循环操作）</td>
</tr>
<tr>
<td>function</td>
<td>定义一个函数</td>
</tr>
<tr>
<td>if…else</td>
<td>用于基于不同的条件来执行不同的动作</td>
</tr>
<tr>
<td>return</td>
<td>退出函数</td>
</tr>
<tr>
<td>switch</td>
<td>用于基于不同条件来执行不同的动作</td>
</tr>
<tr>
<td>throw</td>
<td>抛出错误</td>
</tr>
<tr>
<td>try</td>
<td>实现错误处理，与catch一同使用</td>
</tr>
<tr>
<td>var</td>
<td>声明一个变量</td>
</tr>
<tr>
<td>while</td>
<td>当条件语句为true时，执行语句块</td>
</tr>
</tbody></table>
<ul>
<li><p>代码折行</p>
<p><img src="https://files.catbox.moe/ydhbe5.png"></p>
</li>
</ul>
<h2 id="1-7-JavaScript数据类型"><a href="#1-7-JavaScript数据类型" class="headerlink" title="1.7 JavaScript数据类型"></a>1.7 JavaScript数据类型</h2><ul>
<li>javascript属于弱语言，它的变量没有明确的数据类型，它的数据类型是由它存储的值自己推断出来的</li>
<li>常见数据类型</li>
</ul>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>具体描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td>能存储整数和小数类型</td>
</tr>
<tr>
<td>string</td>
<td>用单引号或双引号来声明的字符串</td>
</tr>
<tr>
<td>boolean</td>
<td>只能是两个值选择：true、false</td>
</tr>
<tr>
<td>undefined</td>
<td>变量被声明后，但未被赋值</td>
</tr>
<tr>
<td>object</td>
<td>javascript中的对象、数组和null</td>
</tr>
</tbody></table>
<ul>
<li><p>在JavaScript中可以使用typeof()函数来检查变量的返回值类型</p>
<p><img src="https://files.catbox.moe/wrq2r2.png"></p>
</li>
<li><p>JavaScript拥有动态类型，这意味着相同的变量可用作不同的类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x；<span class="comment">//x为undefined</span></span><br><span class="line"><span class="keyword">var</span>   x = <span class="number">5</span>；<span class="comment">//x为数字</span></span><br><span class="line"><span class="keyword">var</span>   x = <span class="string">&quot;hello&quot;</span>;<span class="comment">//x为字符串</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>JavaScript字符串</p>
</li>
<li><p>字符串是存储字符的变量</p>
<p>字符串可以是引号中的任意文本。可以使用单引号或者双引号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name =   <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name =   <span class="string">&#x27;tom&#x27;</span>;</span><br></pre></td></tr></table></figure>

</li>
<li><p>也可以在字符串中使用引号，只要不匹配包围字符串的引号即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> answer   = <span class="string">&quot;let&#x27;go&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> answer   = <span class="string">&quot;my name is &#x27;tom&#x27; &quot;</span>;</span><br></pre></td></tr></table></figure>

</li>
<li><p>JavaScript数字</p>
</li>
<li><p>JavaScript只有一种数字类型。数字可以带小数点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b =   <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>

</li>
<li><p>极大或极小的数字可以通过科学计数来书写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a =   <span class="number">123e5</span>;<span class="comment">//12300000  </span></span><br><span class="line"><span class="keyword">var</span> b =   <span class="number">123e-5</span>;<span class="comment">//0.00123</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>JavaScript布尔</p>
</li>
<li><ul>
<li>布尔（逻辑）只能有两个值：true或false</li>
</ul>
</li>
<li><p>布尔常用在条件测试中。这个我们将在之后详解</p>
</li>
<li><p>JavaScript数组</p>
</li>
<li><ul>
<li>详见10.8节</li>
</ul>
</li>
<li><p>JavaScript对象</p>
</li>
<li><ul>
<li><p>详见10.9节</p>
</li>
<li><p>对象由花括号分隔。在扩号内部，对象的属性以名称和值对的形式（键值对 name：value）来定义，属性由逗号分隔</p>
</li>
<li><p>对象有两种寻址方式：</p>
<p><img src="https://files.catbox.moe/9ftj31.png"></p>
</li>
</ul>
</li>
<li><p>Undefined和Null</p>
</li>
<li><p>Undefined表示变量不含值</p>
<p>Null可以通过将变量的值设置为Null来清空变量</p>
<p><img src="https://files.catbox.moe/c70gx5.png"></p>
</li>
<li><p>声明变量类型</p>
</li>
<li><ul>
<li>当声明新变量时，可以使用关键词“new”来声明其类型</li>
</ul>
</li>
</ul>
<h2 id="1-8-数组"><a href="#1-8-数组" class="headerlink" title="1.8 数组"></a>1.8 数组</h2><ul>
<li><p>什么是数组</p>
</li>
<li><ul>
<li>数组对象是使用单独的变量名来存储一系列相同类型的值</li>
<li>数字可以用一个变量名存储所有的值，并且可以用变量名访问任何一个值</li>
<li>数组中的每个元素都有自己的ID，以便它可以很容易地被访问到</li>
</ul>
</li>
<li><p>创建数组，有几种不同的方式</p>
</li>
<li><p>常规方式</p>
<p><img src="https://files.catbox.moe/dl7qyu.png"></p>
</li>
<li><p>简洁方式</p>
<p><img src="https://files.catbox.moe/bxwyb8.png"></p>
</li>
<li><p>字面方式</p>
<p><img src="https://files.catbox.moe/1mwch8.png"></p>
</li>
<li><p>访问数组</p>
</li>
<li><ul>
<li>通过上边的几个例子，大家应该能看出来数组是怎么访问的</li>
<li>语法：数组名[下标]</li>
</ul>
</li>
<li><ul>
<li>在数组中[0]代表数组的第一个元素，[1]则代表的是第二个元素</li>
</ul>
</li>
<li><p>来个数组式循环弹窗看看</p>
<p><img src="https://files.catbox.moe/o4xcer.png"></p>
</li>
<li><p>在一个数组中可以有不同的对象</p>
</li>
<li><ul>
<li><p>所有的JavaScript变量都是对象，数组元素是对象，函数也是对象</p>
</li>
<li><p>因此，我们可以在数组中有不同的变量类型</p>
</li>
<li><p>我们可以在一个数组中包含对象元素，函数，数组</p>
<p><img src="https://files.catbox.moe/lpu5by.png"></p>
</li>
</ul>
</li>
<li><p>数组方法和属性</p>
</li>
<li><p>使用数组对象预定义属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>    a = 数组名.<span class="property">length</span>       <span class="comment">//length元素的数量</span></span><br><span class="line"><span class="keyword">var</span>    b = 数组名.<span class="title function_">indexOf</span>(<span class="string">&quot;需要索引的字段&quot;</span>)    <span class="comment">//括号里面为索引值</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>更多的实例</p>
</li>
<li><ul>
<li><p>合并两个数组-concat()</p>
<p><img src="https://files.catbox.moe/kz1at0.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>合并三个数组-concat()</p>
<p><img src="https://files.catbox.moe/l99gtm.png"></p>
</li>
</ul>
</li>
<li><p>用数组的元素组合字符串-join()</p>
</li>
<li><ul>
<li><p>join()方法用于把数组中的所有元素放入一个字符串</p>
</li>
<li><p>元素是同过指定的分隔符分隔的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObject.<span class="title function_">join</span>(separator)</span><br><span class="line">separator：指定要使用的分隔符，如果省略改参数，则使用逗号作为分隔符</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://files.catbox.moe/5ouzax.png"></p>
</li>
</ul>
<p><img src="https://files.catbox.moe/v2dt2m.png"></p>
<p><img src="https://files.catbox.moe/0z8fu1.png"></p>
<ul>
<li><p>删除数组的最后一个元素-pop()</p>
<p><img src="https://files.catbox.moe/o76e63.png"></p>
</li>
<li><p>数组的末尾添加新的元素-push()</p>
<p><img src="https://files.catbox.moe/xaqslo.png"></p>
</li>
<li><p>将一个数组中的元素的顺序反转排序-reverse()</p>
<p><img src="https://files.catbox.moe/lnlzsb.png"></p>
</li>
<li><p>删除数组的第一个元素-shift()</p>
<p><img src="https://files.catbox.moe/uq24ic.png"></p>
</li>
<li><p>从一个数组中选择元素-slice()</p>
</li>
<li><ul>
<li><p>slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分</p>
</li>
<li><p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">stringObject.<span class="title function_">slice</span>(start,end)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><ul>
<li>返回值</li>
</ul>
</li>
<li><ul>
<li><p>一个新的字符串，包括字符串stratObject从strat开始（包括strat）到end结束（不包括end）为止的所有字符串</p>
<p><img src="https://files.catbox.moe/qnpc9e.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>数组排序（按字母顺序升序）-sort()</p>
<p><img src="https://files.catbox.moe/w4l39r.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>数字排序（按数字顺序升序）-sort()</p>
<p><img src="https://files.catbox.moe/8z6azi.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>数字排序（按数字顺序降序）-sort()</p>
<p><img src="https://files.catbox.moe/14e3wp.png"></p>
</li>
</ul>
</li>
<li><ul>
<li>在数组的第二位置添加一个元素 -splice()</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>splice()方法用于插入，删除，或者替换数组的元素</p>
</li>
<li><p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObject.<span class="title function_">splice</span>(index,howmant,element1....,element1)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>index</td>
<td>必需。规定从何处添加&#x2F;删除元素。该参数是开始插入和(或)删除的数组元素的下标，必需是数字哦</td>
</tr>
<tr>
<td>howmant</td>
<td>必需。规定应该删除多少元素。必须是数字，但可以是（0）。如果未规定此参数，则删除从index开始到原数组结尾的所有元素</td>
</tr>
<tr>
<td>element1</td>
<td>可选。规定要添加到数组的新元素。从index所指的下标处开始插入</td>
</tr>
<tr>
<td>elementN</td>
<td>可选。可向数组添加若干元素。</td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li>返回值</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>如果从arrayObject中删除了元素，则返回的是含有被删除的元素的数组</li>
</ul>
</li>
</ul>
</li>
<li><p>注意：splice()方法和slice()方法的作用是不同的，splice()方法会直接对数组,行修改。</p>
</li>
<li><p>下边的这个例子就是替换了下标“1”至“3”里面的内容，包含1和3下标的内容，也就是说我把数组里的“33，22，66”替换成了“88,44”。</p>
<p><img src="https://files.catbox.moe/xh8wnu.png"></p>
</li>
<li><p>转换数组到字符串 -toString()</p>
<p><img src="https://files.catbox.moe/c5oso5.png"></p>
</li>
<li><p>在数组的开头添加新元素 -unshift()</p>
<p><img src="https://files.catbox.moe/7nddbq.png"></p>
</li>
</ul>
<h2 id="1-9-对象"><a href="#1-9-对象" class="headerlink" title="1.9 对象"></a>1.9 对象</h2><ul>
<li><p>JavaScript对象</p>
</li>
<li><ul>
<li>在JavaScript中，对象是拥有属性和方法的数据。</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>属性是与对象相关的值</li>
<li>方法是能够在对象上执行的动作</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><p>对象也是一个变量，但对象可以包含多个值（多个变量）</p>
<p><img src="https://files.catbox.moe/zbru2q.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>上边这个例子中，三个值（**”Lamborghini”,999999,”black”**）赋予变量car</p>
</li>
<li><p>三个变量（”neme”,price,color）赋予变量car</p>
</li>
<li><p>JavaScript对象是变量的容器</p>
</li>
<li><p>定义JavaScript对象是可以跨越多行，空格跟换行不是必须的</p>
<p><img src="https://files.catbox.moe/1firyr.png"></p>
<p><img src="https://files.catbox.moe/8t2ieu.png"></p>
</li>
</ul>
</li>
<li><p>对象属性</p>
</li>
<li><ul>
<li>JavaScript对象是变量的容器</li>
<li>JavaScript对象是键值对的容器</li>
<li>键值对的基本写法为name:value（上边的例子就是喽）</li>
<li>键值对在JavaScript对象中统称为对象属性。</li>
<li>访问对象属性</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>可以用对象名点属性（如：person.one）</p>
</li>
<li><p>也可以用对象名[“属性”]（如：person[“one”]）</p>
<p><img src="https://files.catbox.moe/dad30x.png"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>对象方法</p>
</li>
<li><ul>
<li>对象的方法定义了一个函数，并作为对象的属性存储</li>
<li>对象方法通过添加()调用（当成函数调用）</li>
<li>下边的这个例子访问了person对象的all()方法（如果直接访问person对象的all属性，它将作为定义一个函数的字符串返回，也就是说把后边的代码直接返回，并且打印出来）</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>访问方法（例：person.all()）</p>
</li>
<li><p>访问属性（例：person.all）</p>
<p><img src="https://files.catbox.moe/trcnch.png"></p>
<p><img src="https://files.catbox.moe/gaplno.png"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JavaScript对象</title>
    <url>/2022/07/08/JavaScript%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.debug8.com%2Fstatics%2Fuploads%2F2020%2F08%2F15%2F1597460167384632.jpeg&refer=http%3A%2F%2Fwww.debug8.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659869298&t=98ffecf7bc2187582206328f237905ec" alt="img"></p>
<span id="more"></span>

<h1 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h1><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><ul>
<li><p>对象是一种复合值，它汇聚多个值（原始值或者是其它对象），并且允许我们按照<br>名称存储和获取这些值。</p>
</li>
<li><p>对象是一个属性无序的集合，每个属性都有自己的名字和值，只有在对象中，其使<br>用起来与顺序无关，只需要打点即可调用。</p>
</li>
<li><p>在JavaScript中对象可以从其它对象继承属性</p>
</li>
<li><p>JavaScript对象是动态的，即可以动态的添加和删除对象属性</p>
<br/></li>
</ul>
<h2 id="认识对象"><a href="#认识对象" class="headerlink" title="认识对象"></a>认识对象</h2><ul>
<li><p>创建自定义对象我们可以通过创建Object实例来实现，然后再给他添加属性和方法<br>（函数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    person.<span class="property">name</span> = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    person.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">    person.<span class="property">job</span> = <span class="string">&quot;Teacher&quot;</span>; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;，年龄&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁，他的工作是：&quot;</span>+<span class="variable language_">this</span>.<span class="property">job</span>);</span><br><span class="line">    person.<span class="property">work</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">let</span> person = &#123;</span><br><span class="line">    name = <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age = <span class="number">18</span>,</span><br><span class="line">    job = <span class="string">&quot;Teacher&quot;</span>,</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;，年龄&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁，他的工作</span></span><br><span class="line"><span class="string">是：&quot;</span>+<span class="variable language_">this</span>.<span class="property">job</span>);</span><br><span class="line">    <span class="title function_">work</span>(<span class="params"></span>)&#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="属性的类型"><a href="#属性的类型" class="headerlink" title="属性的类型"></a>属性的类型</h2><ul>
<li>JavaScript使用了一些内部特性来描述属性的特征，这些特性由JavaScript实现引<br>擎的规范定义的，所以开发者不能直接在JavaScript中访问这些访问。</li>
</ul>
<h3 id="属性的特性分两种"><a href="#属性的特性分两种" class="headerlink" title="属性的特性分两种"></a>属性的特性分两种</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**数据属性**</span><br></pre></td></tr></table></figure>

<ul>
<li><p>【Configurable】：表示属性是否可以通过delete删除并重新定义，</p>
<p>是否可以修改它的特性，以及是否可以把它改为访问器属性。其默认情况下为true</p>
</li>
<li><p>【Enumerable】：表示属性是否可以通过for-in循环返回，默认情况</p>
<p>也为true</p>
</li>
<li><p>【Writable】：表示属性的值是否可以被修改，其默认值为true</p>
</li>
<li><p>【Value】：包含属性的实际值，其默认值为undefined</p>
</li>
</ul>
<br/>

<ul>
<li><p>这些属性特性我们在定义对象时并不需要显式的添加前三个，而Value特性<br>也会被我们定义，如：name:”zhangsan</p>
</li>
<li><p>如果想要修改这些默认特性，就必须使用Object.defineProperty()方<br>法，这个方法在使用时接收三个参数：要给其添加属性的对象，属性的名<br>称，以及一个描述特性的对象及其参数</p>
</li>
<li><p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>:<span class="string">&quot;王麻子&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">    person.<span class="property">name</span> = <span class="string">&quot;张金条&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">    <span class="comment">// configurable:true,</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>:<span class="string">&quot;王麻子&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">    <span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><ul>
<li><p>访问器属性不包含数据值，它包含一个获取（getter）函数以及一个设置<br>（setter）函数，不过这两个函数并非必须函数。</p>
</li>
<li><p>在读取访问器属性时，程序会自个调用获取函数，也就是说获取函数的主<br>要任务就是返回一个有效的值</p>
</li>
<li><p>访问器属性也有4个特性用了描述它们的行为</p>
<p>【Configurable】，默认值为true，表示能否通过delete删除属性从而<br>重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性<br>【Enumerable】，默认值为true，能否通过for-in循环返回属性<br>【get】读取这个属性时调用的函数 getter函数<br>【set】在为这个属性赋值时调用的函数 setter函数</p>
</li>
<li><p>以上这些属性也是不能直接定义的，必须通过Object-defineProperty()</p>
</li>
<li><p>示例</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">let</span> book = &#123;</span><br><span class="line">       <span class="attr">name</span>:<span class="string">&quot;七侠五义&quot;</span>,</span><br><span class="line">       <span class="attr">price</span>:<span class="number">1</span></span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">     book.<span class="property">name</span> = <span class="string">&quot;斗破苍穹&quot;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">name</span>);</span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(book,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">     <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="title function_">set</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = newValue;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="对象合并"><a href="#对象合并" class="headerlink" title="对象合并"></a>对象合并</h2><ul>
<li><p>在开发JavaScript时我们会把多个对象合并使用</p>
</li>
<li><p>具体来说就是把一个对象的所有属性复制到了目标对象上，这种方式也被称之为混<br>入，通过对象的合并我们可以增强对象功能</p>
</li>
<li><p>JavaScript专门为合并对象提供了一个Object.assign()方法，这个方法接收一个目<br>标对象和一个或多个其它对象（源对象），然后将每个源对象中自有属性复制到目<br>标对象</p>
</li>
<li><p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//目标对象</span></span><br><span class="line">    <span class="title class_">Obj1</span> = &#123;<span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//源对象</span></span><br><span class="line">    <span class="title class_">Obj2</span> = &#123;<span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//把2复制到目标对象中</span></span><br><span class="line">    result = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Obj1</span>,<span class="title class_">Obj2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Obj1</span> === result)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Obj2</span> === result)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">   </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="增强的对象语法"><a href="#增强的对象语法" class="headerlink" title="增强的对象语法"></a>增强的对象语法</h2><ul>
<li><p>ES6位对象定义了很多定义对象及其操作对象的语法特性，这些特性可以极大程度<br>提高对象处理的方便程度</p>
</li>
<li><p>属性值得简写</p>
<p>在给对象添加值时我们可以引用变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">let</span> username= <span class="string">&quot;sanlvzi&quot;</span>;</span><br><span class="line"> <span class="keyword">let</span> person = &#123;</span><br><span class="line"> <span class="attr">username</span>:username</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">还能简写（以下这种情况必须时变量名域对象的属性名相同才可以这么写）</span><br></pre></td></tr></table></figure></li>
</ul>
<br/>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">let</span> username= <span class="string">&quot;sanlvzi&quot;</span>;</span><br><span class="line">   username</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">let</span> person = &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul>
<li><p>对象解构是从对象中检索属性键的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>:<span class="string">&quot;张麻子&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>传统取值来说，我们可以使用打点表示法或者是下标法来从对象中检索值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> username = user.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">let</span> age = user[<span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上这种方法是没有任何问题的，但是就当属性较多时，我们的代码中会产生<br>较多的重复代码，然后ES6就搞出来了一个技术叫做对象解构</p>
</li>
<li><p>对象解构也叫解构赋值，可以快速的获取值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = user;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="使用解构从嵌套的对象中获取值"><a href="#使用解构从嵌套的对象中获取值" class="headerlink" title="使用解构从嵌套的对象中获取值"></a>使用解构从嵌套的对象中获取值</h3><ul>
<li><p>嵌套即一个对象中还有对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Marry&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">27</span>,</span><br><span class="line">   <span class="attr">friend</span>:&#123;</span><br><span class="line">   <span class="attr">friend_1_Phone</span>:<span class="number">110</span>,</span><br><span class="line">   <span class="attr">address</span>:<span class="string">&quot;文景路凤城四路...&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用传统方式获取朋友对象的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Person</span>.<span class="property">friend</span>.<span class="property">friend_1_Phone</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>换成解构赋值，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">   <span class="title class_">Pname</span>:<span class="string">&quot;Marry&quot;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">   <span class="title class_">Uname</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="title class_">Uage</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//在解构时可以加上其它属性值</span></span><br><span class="line">   <span class="keyword">let</span> &#123;<span class="title class_">Pname</span>,<span class="title class_">Page</span> = <span class="number">18</span>&#125; = <span class="title class_">Person</span>;</span><br><span class="line">   <span class="keyword">let</span> &#123;<span class="title class_">Uname</span>,<span class="title class_">Uage</span> = <span class="number">18</span>&#125; = <span class="title class_">User</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Pname</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="还可以给JavaScript解构对象创建别名"><a href="#还可以给JavaScript解构对象创建别名" class="headerlink" title="还可以给JavaScript解构对象创建别名"></a>还可以给JavaScript解构对象创建别名</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line"> <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">let</span>&#123;<span class="attr">age</span>:userAge&#125; =<span class="title class_">User</span>;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(userAge) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="还可以使用对象解构处理动态名称属性"><a href="#还可以使用对象解构处理动态名称属性" class="headerlink" title="还可以使用对象解构处理动态名称属性"></a>还可以使用对象解构处理动态名称属性</h3><ul>
<li><p>我们在开发时经常会将API的一些响应数据作为Javascript对象处理，这些对象</p>
<p>可能包含一些动态数据，我们在客户端使用这些数据时可能连属性键时啥都不<br> 知道</p>
</li>
<li><p>我们可以将键当成时参数据传递，也就是说我们可以编写一个返回User对象属<br>性值得函数，然后我们可以接收参数，让JS从对象中去检索</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getProperty</span>(<span class="params">key</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> &#123;[key]:returnValue&#125; = <span class="title class_">User</span>;</span><br><span class="line">      <span class="keyword">return</span> returnValue;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> address = <span class="title function_">getProperty</span>(<span class="string">&#x27;address&#x27;</span>);</span><br><span class="line">   <span class="keyword">let</span> name = <span class="title function_">getProperty</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(address,name);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="在函数参数和返回值中解构对象"><a href="#在函数参数和返回值中解构对象" class="headerlink" title="在函数参数和返回值中解构对象"></a>在函数参数和返回值中解构对象</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解构赋值传参</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">&#123;name,age&#125;</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fun</span>(<span class="title class_">User</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  解构函数对象返回值</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果一个函数的返回值是一个对象，我们可以直接解构对象为变量</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>, <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">User</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span>&#123;age&#125; = <span class="title function_">fun</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span>&#123;age&#125; = <span class="title function_">fun</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure>

<p>  在循环中使用对象解构</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;张三&quot;</span> ,</span><br><span class="line">     <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span>:<span class="number">19</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span>:<span class="number">20</span></span><br><span class="line">   &#125;</span><br><span class="line">   ];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span>&#123;name,age&#125; <span class="keyword">of</span> <span class="title class_">User</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用其它方式创建对象"><a href="#使用其它方式创建对象" class="headerlink" title="使用其它方式创建对象"></a>使用其它方式创建对象</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul>
<li><p>工厂模式是程序中应用较为普遍的一种设计模式</p>
</li>
<li><p>在这里用于抽象对象创建的过程，按照特定的接口创建方式创建对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个方法，该方法用来规定创建对象的基本属性及行为</span></span><br><span class="line"> <span class="comment">//属性我们以方法的参数形式传递进来，让方法内部对这些属性进行处理</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age,job</span>) &#123;</span><br><span class="line"> <span class="comment">//创建一个Object对象</span></span><br><span class="line"> <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> <span class="comment">//给obj对象开始赋值</span></span><br><span class="line"> obj.<span class="property">name</span> = name;</span><br><span class="line"> obj.<span class="property">age</span> = age;</span><br><span class="line"> obj.<span class="property">job</span> = job;</span><br><span class="line"> obj.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;，吃饭时DuangDuang的&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> person_1 = <span class="title function_">createPerson</span>(<span class="string">&quot;张金条&quot;</span>,<span class="number">99</span>,<span class="string">&quot;修空调&quot;</span>);</span><br><span class="line"> <span class="keyword">let</span> person_2 = <span class="title function_">createPerson</span>(<span class="string">&quot;张银条&quot;</span>,<span class="number">98</span>,<span class="string">&quot;挖坑&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="构造函数方式"><a href="#构造函数方式" class="headerlink" title="构造函数方式"></a>构造函数方式</h3><ul>
<li><p>以函数的形式为自己的对象定义属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,job</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;干饭&quot;</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//要创建对象就得new，也就是说通过new关键字调用Person方法来创建Person对象</span></span><br><span class="line">   <span class="keyword">let</span> person_1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张铜条&quot;</span>,<span class="number">88</span>,<span class="string">&quot;摆烂&quot;</span>);</span><br><span class="line">   <span class="keyword">let</span> person_2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张铁条&quot;</span>,<span class="number">90</span>,<span class="string">&quot;技师&quot;</span>);</span><br><span class="line">   person_1.<span class="title function_">eat</span>();</span><br><span class="line">   person_2.<span class="title function_">eat</span>();</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析</p>
<p>在内存中创建一个新对象，每new一次就会创建一个新的对象</p>
<p>这个对象在方法内部只是为将要形成的对象属性指定了属性值和行为</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JavaScript BOM与DOM</title>
    <url>/2022/07/08/JavaScript-BOM%E4%B8%8EDOM/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.mk2048.com%2Fweb_upload%2Fblog_imgs%2F9%2Fhttps___user-gold-cdn-xitu-io_2018_5_29_163a9401f45c8ab1_w-1280_h-720_f-jpeg_s-54086.gif&refer=http%3A%2F%2Fwww.mk2048.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659878697&t=22475cd2413ac8bfc0fc92f294e20a0b" alt="img"></p>
<span id="more"></span>

<h1 id="第一章-JavaScript-BOM与DOM"><a href="#第一章-JavaScript-BOM与DOM" class="headerlink" title="第一章 JavaScript BOM与DOM"></a>第一章 JavaScript BOM与DOM</h1><h2 id="1-1-BOM（borwser-object-Model）"><a href="#1-1-BOM（borwser-object-Model）" class="headerlink" title="1.1 BOM（borwser object Model）"></a>1.1 BOM（borwser object Model）</h2><h4 id="1-1-1-浏览器对象模型"><a href="#1-1-1-浏览器对象模型" class="headerlink" title="1.1.1 浏览器对象模型"></a>1.1.1 浏览器对象模型</h4><ul>
<li><ul>
<li>使用对象描述浏览器的各个部分</li>
<li>BOM提供与浏览器窗口交互的对象</li>
<li>BOM主要用于管理窗口与窗口之间的通讯，所以核心对象是窗口（window）</li>
</ul>
</li>
<li><p>BOM里有什么</p>
</li>
<li><ul>
<li><p>图示</p>
<p><img src="https://files.catbox.moe/ccpeyl.png"></p>
</li>
</ul>
</li>
<li><ul>
<li>与浏览器进行交互的一些对象</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>移动，调整浏览器大小的window对象</li>
<li>用于导航的location对象history</li>
<li>获取浏览器，用户屏幕信息的navigator与screen对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="1-1-2-window对象"><a href="#1-1-2-window对象" class="headerlink" title="1.1.2 window对象"></a>1.1.2 window对象</h5><ul>
<li><ul>
<li>open()方法用于打开一个新窗口或查找一个窗口</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>语法</li>
<li>window.open(url,name,feature,replace)</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>声明要在新窗口中显示文档的url</td>
</tr>
<tr>
<td>name</td>
<td>该字符声明了新窗口的名称。这个名称可以用作标记    <a> 和 <form> 的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open()    方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</td>
</tr>
<tr>
<td>feature</td>
<td>声明了新窗口要显示的标准浏览器的特征</td>
</tr>
<tr>
<td>replace</td>
<td>一个可选的布尔值。规定了装载到窗口的     URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目。false - URL 在浏览历史中创建新的条目。</td>
</tr>
</tbody></table>
<ul>
<li><p>案例 打开新窗口控制其外观样式</p>
<p><img src="https://files.catbox.moe/9cmg9b.png"></p>
</li>
<li><p>窗口特征表</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>channelmode&#x3D;yes|no|1|0</th>
<th>是否使用剧院模式显示窗口。默认为    no。</th>
</tr>
</thead>
<tbody><tr>
<td>directories&#x3D;yes|no|1|0</td>
<td>是否添加目录按钮。默认为    yes。</td>
</tr>
<tr>
<td>fullscreen&#x3D;yes|no|1|0</td>
<td>是否使用全屏模式显示浏览器。默认是    no。处于全屏模式的窗口必须同时处于剧院模式。</td>
</tr>
<tr>
<td>height&#x3D;pixels</td>
<td>窗口文档显示区的高度。以像素计。</td>
</tr>
<tr>
<td>left&#x3D;pixels</td>
<td>窗口的 x    坐标。以像素计。</td>
</tr>
<tr>
<td>location&#x3D;yes|no|1|0</td>
<td>是否显示地址字段。默认是    yes。</td>
</tr>
<tr>
<td>menubar&#x3D;yes|no|1|0</td>
<td>是否显示菜单栏。默认是    yes。</td>
</tr>
<tr>
<td>resizable&#x3D;yes|no|1|0</td>
<td>窗口是否可调节尺寸。默认是    yes。</td>
</tr>
<tr>
<td>scrollbars&#x3D;yes|no|1|0</td>
<td>是否显示滚动条。默认是    yes。</td>
</tr>
<tr>
<td>status&#x3D;yes|no|1|0</td>
<td>是否添加状态栏。默认是    yes。</td>
</tr>
<tr>
<td>titlebar&#x3D;yes|no|1|0</td>
<td>是否显示标题栏。默认是    yes。</td>
</tr>
<tr>
<td>toolbar&#x3D;yes|no|1|0</td>
<td>是否显示浏览器的工具栏。默认是    yes。</td>
</tr>
<tr>
<td>top&#x3D;pixels</td>
<td>窗口的 y    坐标。</td>
</tr>
<tr>
<td>width&#x3D;pixels</td>
<td>窗口的文档显示区的宽度。以像素计。</td>
</tr>
</tbody></table>
<ul>
<li><p>setInterval()每隔指定的毫秒运行指定的代码&#x2F;函数</p>
</li>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/gezs9p.png"></p>
</li>
<li><p>setTimeout()经过指定毫秒数运行一次指定的代码&#x2F;函数</p>
</li>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/r0dclo.png"></p>
</li>
<li><p>location地址栏对象</p>
</li>
<li><ul>
<li>href：设置或获取整个URL为字符串</li>
</ul>
</li>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/rk4u5p.png"></p>
</li>
<li><p>reload()：重新加载</p>
</li>
<li><p>replace():用新文档替换当前文档</p>
</li>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/e2r3lh.png"></p>
</li>
</ul>
<h5 id="屏幕对象（Screen）用来获取电脑屏幕的一些数据"><a href="#屏幕对象（Screen）用来获取电脑屏幕的一些数据" class="headerlink" title="屏幕对象（Screen）用来获取电脑屏幕的一些数据"></a>屏幕对象（Screen）用来获取电脑屏幕的一些数据</h5><ul>
<li><ul>
<li>availHeight：获取系统屏幕的工作区高度（浏览器的页面高度）</li>
</ul>
</li>
<li><ul>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/k600si.png"></p>
</li>
</ul>
</li>
<li><p>availWidth：获取系统屏幕的工作区宽度（浏览器页面宽度）</p>
</li>
<li><p>height：获取屏幕的垂直分辨率</p>
</li>
<li><p>width：获取屏幕的水平分辨率 </p>
</li>
<li><ul>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/oxiqgh.png"></p>
</li>
</ul>
</li>
</ul>
<h2 id="2-2-DOM编程"><a href="#2-2-DOM编程" class="headerlink" title="2.2 DOM编程"></a>2.2 DOM编程</h2><h4 id="2-2-1-文档对象模型（document）"><a href="#2-2-1-文档对象模型（document）" class="headerlink" title="2.2.1 文档对象模型（document）"></a>2.2.1 文档对象模型（document）</h4><ul>
<li>当一个html页面加载到浏览器的时候，那么浏览器会为每个标签都创建一个对应的对象，描述该标签的所有信息</li>
<li>我们此时所看到的网页信息实际上就是看到了这些标签的对象信息，如果我们需要操作页面的数据，我们就可以通过这些标签对象进行操作</li>
<li>图例</li>
<li><img src="https://files.catbox.moe/29phbz.png"></li>
</ul>
<h4 id="2-2-2-用来获取页面节点的方法"><a href="#2-2-2-用来获取页面节点的方法" class="headerlink" title="2.2.2 用来获取页面节点的方法"></a>2.2.2 用来获取页面节点的方法</h4><ul>
<li><p>获取页面的所有节点：document.all；</p>
</li>
<li><p>nodeName:节点名字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>    elements =<span class="variable language_">document</span>.<span class="property">all</span>;</span><br><span class="line"><span class="title function_">alert</span>(elements);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;elements.<span class="property">length</span>;index++)&#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&quot;节点名：&quot;</span>+elements[index].<span class="property">nodeName</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>通过标签属性找节点</p>
</li>
<li><ul>
<li><p>document.getElementById(“标签属性id”);</p>
</li>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;test&quot;</span>&gt;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>通过标签名获取节点</p>
</li>
<li><ul>
<li><p>document.getElementsByTagName(标签名);</p>
</li>
<li><p>注：返回的是一个数组</p>
</li>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">     <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>通过标签的Name属性获取节点</p>
</li>
<li><ul>
<li><p>document.getElementByName(“标签的name属性值”);</p>
</li>
<li><p>注：返回的是一个数组</p>
</li>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div name=<span class="string">&quot;ElName&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;ElName&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>通过关系找节点</p>
</li>
<li><ul>
<li>document可以通过一个节点，找到与它有关的节点</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>parentNode：获取当前元素的父节点</p>
</li>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span>    f = a.<span class="property">parentNode</span>;</span><br><span class="line">    <span class="title function_">alert</span>(f);</span><br><span class="line">    f.<span class="property">innerHTML</span>=<span class="string">&quot;找到我了&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>childNodes：获取当前元素的所有下一级子元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="keyword">var</span>    all = a.<span class="property">childNodes</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span>    index = <span class="number">0</span>;index&lt;all.<span class="property">length</span>;index++)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(all[index].<span class="property">nodeName</span>);</span><br><span class="line">    <span class="keyword">if</span>(all[index].<span class="property">nodeType</span>==<span class="number">1</span>)&#123;</span><br><span class="line">       all[index].<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>nodeType常数值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Node.ELEMENT_NODE</td>
<td>1</td>
<td>元素节点</td>
</tr>
<tr>
<td>Node.ATTRIBUTE_NODE</td>
<td>2</td>
<td>属性节点</td>
</tr>
<tr>
<td>Node.TEXT_NODE</td>
<td>3</td>
<td>文本节点</td>
</tr>
<tr>
<td>Node.CDATA_SECTION_NODE</td>
<td>4</td>
<td>字符数据节点（文本不会被解析器解析）</td>
</tr>
<tr>
<td>Node.ENTITY_REFERENCE_NODE</td>
<td>5</td>
<td>实体引用节点</td>
</tr>
<tr>
<td>Node.ENTITY_NODE</td>
<td>6</td>
<td>实体节点</td>
</tr>
<tr>
<td>Node.PROCESSING_INSTRUCTION_NODE</td>
<td>7</td>
<td>处理指令节点</td>
</tr>
<tr>
<td>Node.COMMENT_NODE</td>
<td>8</td>
<td>注释节点</td>
</tr>
<tr>
<td>Node.DOCUMENT_NODE</td>
<td>9</td>
<td>文档节点（DOM树的根节点）</td>
</tr>
<tr>
<td>Node.DOCUMENT_TYPE_NODE</td>
<td>10</td>
<td>向为文档定义的实体提供接口</td>
</tr>
<tr>
<td>Node.DOCUMENT_FRAGMENT_NODE</td>
<td>11</td>
<td>表示邻接节点和它们的子树。</td>
</tr>
<tr>
<td>Node.NOTATION_NODE</td>
<td>12</td>
<td>代表一个符号在DTD中的声明</td>
</tr>
</tbody></table>
<ul>
<li><p>firstChild：获取当前节点的第一个子节点</p>
</li>
<li><p>lastChild：获取当前节点的最后一个字节点</p>
</li>
<li><p>nextElementSibling：获取当前节点的下一个节点（兄弟节点）</p>
</li>
<li><p>previousElementSibling：获取当前节点的上一个节点（兄弟节点）</p>
</li>
<li><p>创建，删除，插入节点</p>
</li>
<li><ul>
<li><ul>
<li>创建：var 节点 &#x3D;  document.creatElement(“标签名”);创建新元素节点</li>
<li>节点 .setAttribute(“属性名”,”属性值”);</li>
<li>节点.appendChild(e);将某个节点添加到该节点的最后位置</li>
<li>节点.insertBefore(e,child);将某个新节点添加到该节点中，某个子节点之前</li>
<li>节点.removeChild(要删除的子节点)；删除指定的直接点</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>节点必须为直接父节点</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>    trNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> tdNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span><br><span class="line">trNode.<span class="title function_">appendChild</span>(tdNode);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>利用节点操作css</p>
</li>
<li><ul>
<li>我们可以通过上边获取节点的方式获取到节点，我们可以通过节点对象去操作标签的的样式</li>
<li>语法</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>节点.style.要操作的样式&#x3D;”值”;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-2-3-JavaScript中常用的事件"><a href="#2-2-3-JavaScript中常用的事件" class="headerlink" title="2.2.3 JavaScript中常用的事件"></a>2.2.3 JavaScript中常用的事件</h4><ul>
<li><p>js有可以通过某些方式触发函数的执行，我们把这种方式称之为事件</p>
</li>
<li><p>点击事件（onclick()）</p>
</li>
<li><ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span>    <span class="title function_">sp</span>(<span class="params">elementid</span>)&#123;</span><br><span class="line"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(elementid);</span><br><span class="line">a.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>    <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">nzmd</span>=<span class="string">&quot;ElName&quot;</span>    <span class="attr">style</span>=<span class="string">&quot;height:100px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">p</span>    <span class="attr">id</span>=<span class="string">&quot;elp&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sp(&#x27;elp&#x27;)&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;ela&quot;</span>    <span class="attr">onclick</span>=<span class="string">&quot;sp(&#x27;ela&#x27;)&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>鼠标进入事件（onmouseover(),onmousemove()）</p>
</li>
<li><p>鼠标离开事件（onmouseout()）</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.box</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.boxOne</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background-color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.boxTwo</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background-color</span>: aqua;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">idName</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//根据id获取要显示的元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idName);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        el.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">hide</span>(<span class="params">idName</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idName);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        el.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--悬停事件：鼠标进入元素后触发--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--鼠标离开事件：鼠标离开元素后触发--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;show(&#x27;one&#x27;)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;hide(&#x27;one&#x27;)&quot;</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;show(&#x27;two&#x27;)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;hide(&#x27;two&#x27;)&quot;</span>&gt;</span>导航二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box boxOne&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;show(&#x27;one&#x27;)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;hide(&#x27;one&#x27;)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box boxTwo&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;show(&#x27;two&#x27;)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;hide(&#x27;two&#x27;)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>获取焦点（onfocus()）</p>
</li>
<li><p>失去焦点（onblur()）</p>
</li>
<li><ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span>    <span class="title function_">of</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;eli&quot;</span>);</span><br><span class="line">   a.<span class="property">value</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>    <span class="title function_">ob</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;eli&quot;</span>);</span><br><span class="line">   a.<span class="property">value</span>=<span class="string">&quot;有字&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span>    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;of()&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;ob()&quot;</span>    <span class="attr">id</span>=<span class="string">&quot;eli&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;eli&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    a.<span class="property">onfocus</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        a.<span class="property">placeholder</span>=<span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  a.<span class="property">onblur</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      a.<span class="property">placeholder</span>=<span class="string">&quot;有字&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span>    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;eli&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;hello&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>滚动事件(onscroll())</p>
</li>
<li><ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">               #test&#123;</span><br><span class="line"><span class="attr">width</span>:<span class="number">100</span>%;</span><br><span class="line"><span class="attr">height</span>:100px;</span><br><span class="line"><span class="attr">overflow</span>:scroll;</span><br><span class="line"><span class="attr">border</span>:1px    solid black;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">a.<span class="property">onscroll</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">a.<span class="property">innerHTML</span>=<span class="string">&quot;aaaaaa&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>    <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">               啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>键盘按下并松开（onkeypress()）</p>
</li>
<li><p>键盘按下事件（onkeydown()）</p>
</li>
<li><ul>
<li>onkeypress  和 onkeydown 是有区别，下面将讲解 onkeypress 与 onkeydown 事件的区别。 </li>
<li>onkeypress  事件在用户按下并放开任何字母数字键时发生。但是系统按钮（例如：箭头键、功能键）无法得到识别。 </li>
<li>onkeydown  事件在用户按下任何键盘键（包括系统按钮）时发生。 </li>
<li>具体区别： </li>
<li>\1.  一个放开一个没有放开，onkeydown 先于 onkeypress 发生。 </li>
<li>2.onkeypress  无法识别系统按钮。 </li>
<li>2.onkeydown  捕获的 keyCode 不区分字母大小，而 onkeypress 区分。</li>
</ul>
</li>
<li><p>键盘抬起事件（onkeyup()）</p>
</li>
<li><ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txt&quot;</span>).<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;键盘按下了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txt&quot;</span>).<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;键盘抬起了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>keyCode获取按下的键</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>数字值</strong></th>
<th><strong>实际键值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>48到57</td>
<td>0到9</td>
</tr>
<tr>
<td>65到90</td>
<td>a到z（A到Z）</td>
</tr>
<tr>
<td>112到135</td>
<td>F1到F12</td>
</tr>
<tr>
<td>8</td>
<td>BackSpace（退格）</td>
</tr>
<tr>
<td>9</td>
<td>Tab</td>
</tr>
<tr>
<td>13</td>
<td>Enter（回车）</td>
</tr>
<tr>
<td>20</td>
<td>Caps_Lock（大写锁定）</td>
</tr>
<tr>
<td>32</td>
<td>Space（空格键）</td>
</tr>
<tr>
<td>37</td>
<td>Left（左箭头）</td>
</tr>
<tr>
<td>38</td>
<td>Up（上箭头）</td>
</tr>
<tr>
<td>39</td>
<td>Right（右箭头）</td>
</tr>
<tr>
<td>40</td>
<td>Down（下箭头）</td>
</tr>
</tbody></table>
<ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//页面的任何的位置.按下键盘,获取按键的值</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (e.<span class="property">keyCode</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">81</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下的是Q&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">87</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下的是W&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">69</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下的是E&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">82</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下的是R&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>onmousedown &#x2F; onmouseup  鼠标按下&#x2F;抬起事件</p>
</li>
<li><ul>
<li>当鼠标左键或右键按下或者抬起的时候触发</li>
<li>按下或抬起滚动轮也会触发，滑动滚动轮不能触发</li>
<li>如果鼠标比较高级，有其他按键的情况下，按下或抬起也会触发</li>
<li>案例</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-tag">div</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">background-color</span>: pink;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dv&quot;</span>).<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标按下了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dv&quot;</span>).<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标抬起了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>

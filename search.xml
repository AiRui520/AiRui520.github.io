<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+GitHub搭建博客</title>
    <url>/2022/07/01/Hexo+GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.zyiz.net%2Fupload%2F202002%2F18%2F202002182223498227.png&refer=http%3A%2F%2Fwww.zyiz.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659501869&t=eedef2a99fe19a8fd51bafe9ae2a1177" alt="img"></p>
<span id="more"></span>

<p>搭建博客千千万，最后受欢迎的9还是Hexo和Jekyll,用户用的非常多的两个静态博客生成系统。本文就介绍利用Hexo结合github page来搭建个人博客。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h3><p>Hexo 是一个基于 node.js 制作的快速、简洁且高效的博客框架。Hexo 可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>
<h3 id="Hexo和Jekyll的区别"><a href="#Hexo和Jekyll的区别" class="headerlink" title="Hexo和Jekyll的区别"></a>Hexo和Jekyll的区别</h3><p>·本地环境<br>Jeklly 是由 Ruby 语言编写，需要到官网下载并安装 RubyInstaller。Hexo 则需要安装 Node.js 环境。网上经常看到很多人吐槽安装 Jekyll 经常碰到各种问题。</p>
<p>·速度<br>说是比较 Hexo 和 Jeklly 这两个框架，其实要比较 Ruby 和 Node.js 的运行速度。Node.js 是一个 Javascrip t运行环境(Runtime)。实际上它是对 Google V8 引擎进行了封装。众所周知，Google JS Runtime 速度非常快，性能非常好。在本地预览上，Jekyll 是生成了页面然后进行预览，而 Hexo 是没有在根目录生成文件的，速度也快不少。因此，Hexo 在性能和速度上面更胜一筹。</p>
<p>·部署<br>Jeklly 是将整个工程源码上传到 Github 仓库，然后 Github 会自动生成静态文件。而 Hexo 需要事先在本地生成整个站点页面，再将 Html 文件、资源文件等上传到 Github 上。</p>
<p>·主题<br>Jekyll 使用 Liquid；它是有 Ruby 语言编写的开源模板语言。Hexo 使用的是 EJS；EJS 是 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。EJS 相对比较复杂，所以可实现的功能更加的多。从开发一个主题难度上看，Hexo 实现起来更方便、更简单些。</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>1、本机系统：Windows 10（64位）<br>2、Node.js：v6.9.2LTS（64位）</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I&#x2F;O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>打开官网下载链接Node.js:<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> (选择长期服务，版本更稳定)</p>
<p><img src="https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg" alt="img"></p>
<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>
<p>测试安装是否成功：</p>
<p>按【win+R】键，输入cmd，再按回车弹出命令窗口</p>
<p>输入：(显示版本行)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>显示结果：</p>
<p><img src="https://i.loli.net/2021/10/19/fDzgWhEbnkxPevL.jpg" alt="img"></p>
<p>即安装成功；</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p>
<p><strong>从一般开发者的角度来看，git有以下功能：</strong><br>1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。<br>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。<br>3、在单机上自己创建的分支上提交代码。<br>4、在单机上合并分支。<br>5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。<br>6、生成补丁（patch），把补丁发送给主开发者。</p>
<p>打开官网下载链接：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> (选择windows版本即可)</p>
<p><img src="https://i.loli.net/2021/10/19/7UgXJ4y3MV6Bpri.jpg" alt="img"></p>
<p>下载完成之后直接双击安装包，只需点击下一步（出下图外选项，默认所有选项），然后改变安装路径即可。</p>
<p><img src="https://i.loli.net/2021/10/19/oT9CgyscVXWPnbF.jpg" alt="img"></p>
<p>测试是否安装成功：</p>
<p>按【win+R】键，输入cmd，再按回车弹出命令窗口，再输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure>

<p>显示结果:</p>
<p><img src="https://i.loli.net/2021/10/19/y5LnHxaYiID93Cs.jpg" alt="img"></p>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）"><a href="#在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）" class="headerlink" title="在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）"></a>在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github注册的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后按四次【enter】即可，生成后如下图：</p>
<p><img src="https://i.loli.net/2021/10/19/6S8LwDAmHTMvqJz.jpg" alt="img"></p>
<h3 id="打开Github-点击头像–-gt-【setting】"><a href="#打开Github-点击头像–-gt-【setting】" class="headerlink" title="打开Github,点击头像–&gt;【setting】"></a>打开Github,点击头像–&gt;【setting】</h3><p><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" alt="img"></p>
<h3 id="点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】"><a href="#点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】" class="headerlink" title="点击【SSH and GPG keys】–&gt;【New SSH key】"></a>点击【SSH and GPG keys】–&gt;【New SSH key】</h3><p><img src="https://i.loli.net/2021/10/19/JNnuwh4dAMHFILT.jpg" alt="img"></p>
<h3 id="输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-x2F-用户-x2F-用户名-x2F-ssh-x2F-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；"><a href="#输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-x2F-用户-x2F-用户名-x2F-ssh-x2F-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；" class="headerlink" title="输入title（可以随便输），但Key你需要用记事本或Notepad++打开磁盘中c:&#x2F;用户&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa.pub然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；"></a>输入title（可以随便输），但Key你需要用记事本或Notepad++打开<strong>磁盘中c:&#x2F;用户&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa.pub</strong>然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；</h3><p><img src="https://i.loli.net/2021/10/19/uglR7p4jMUSbfxe.jpg" alt="img"></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在想要搭建博客的目录下创建文件夹名为blog，按【win+R】键，输入cmd，再按回车弹出命令窗口，cd到创建的文件夹下，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/19/pwBHNlgo2cdZiA4.jpg" alt="img"></p>
<p>不要关闭刚才的命令窗口，在刚才的窗口中初始化hexo，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init 你的博客名</span><br></pre></td></tr></table></figure>

<h3 id="在博客目录中安装依赖"><a href="#在博客目录中安装依赖" class="headerlink" title="在博客目录中安装依赖"></a>在博客目录中安装依赖</h3><p>在刚才的窗口中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 博客名</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>安装完成之后进行测试，窗口中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s -p 5555</span><br></pre></td></tr></table></figure>

<p>在浏览器上输入 localhost:5555</p>
<p><img src="https://i.loli.net/2021/10/19/KFMBiULjA1yY8st.jpg" alt="img"></p>
<h3 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h3><p>打开官网下载链接：<a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a> （点击DPWNLOAD FOR WINDOWS）</p>
<p><img src="https://i.loli.net/2021/10/19/kAnXiPatsr2zxDc.jpg" alt="img"></p>
<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>
<p>打开Sublime 直接将博客目录拖进Sublime即可；</p>
<p><img src="https://i.loli.net/2021/10/19/RMkyeoixVCAt81f.jpg" alt="img"></p>
<h3 id="hexo发布到Github"><a href="#hexo发布到Github" class="headerlink" title="hexo发布到Github"></a>hexo发布到Github</h3><p>使用Sublime打开博客根目录中_config.yml 修改第16行的url 改为自己的网址（如 https:&#x2F;&#x2F;自己的博客名.github.io ）</p>
<p><img src="https://i.loli.net/2021/10/20/QHMrJse8xOnjWl5.jpg" alt="img"></p>
<p>打开Github网页点击【Your repositories】 最后复制链接</p>
<p><img src="https://i.loli.net/2021/10/20/u1w8kDULWQBvGzs.jpg" alt="img"><img src="https://i.loli.net/2021/10/20/6cGuVNTXKWFSZsw.jpg" alt="img"><img src="https://i.loli.net/2021/10/20/Sn8IUm5Tsq6dDcg.jpg" alt="img"></p>
<p>在_config.yml文件最后一行添加repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repo: </span><br></pre></td></tr></table></figure>

<p>将你复制的链接添加到repo之后，用引号隔开（切记引号后面必须要有空格）</p>
<p>在最后一行添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">branch: main</span><br></pre></td></tr></table></figure>

<p>type后添加git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br></pre></td></tr></table></figure>

<p>如下图<br><img src="https://i.loli.net/2021/10/21/b4Px7pFjTvI5ea2.jpg" alt="img"></p>
<p>在博客根目录下添加插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="获取个人访问令牌"><a href="#获取个人访问令牌" class="headerlink" title="获取个人访问令牌"></a>获取个人访问令牌</h3><p>对密码身份验证的支持已于 2021 年 8 月 13 日移除。现在改用个人访问令牌。简单点说就是需要把你的密码换成 token。</p>
<p>在个人设置页面，找到 Settings<br><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" alt="img"><br>找到 Developer settings<br><img src="https://i.loli.net/2021/10/21/VkyOgL5Z1746mzT.jpg" alt="img"><br>选择个人访问令牌 Personal access tokens，然后点击生成令牌 Generate new token<br><img src="https://i.loli.net/2021/10/21/KsVtaRpmhUSLorF.jpg" alt="img"><br>设置 token 的有效期，访问权限等，生成令牌 Generate token<br><img src="https://i.loli.net/2021/10/21/6Kdwmi7Qr2MWUJf.jpg" alt="img"><br>如下为生成的令牌<br><img src="https://i.loli.net/2021/10/21/LMsRWZaq8oSUwnh.jpg" alt="img"></p>
<p>注意<br>记得把 token 保存下来，当你再次刷新网页的时候，就没办法看见了</p>
<p>最后，把 token 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 token 了。</p>
<p>添加到如下图位置：（使用“@”和后面内容隔开）</p>
<p><img src="https://i.loli.net/2021/10/21/WCX7dgp9UNFxJ1B.jpg" alt="img"></p>
<h3 id="git中设置你的用户名和邮件名"><a href="#git中设置你的用户名和邮件名" class="headerlink" title="git中设置你的用户名和邮件名"></a>git中设置你的用户名和邮件名</h3><p>这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;you@example.com&quot;</span><br></pre></td></tr></table></figure>



<h3 id="生成提交"><a href="#生成提交" class="headerlink" title="生成提交"></a>生成提交</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>打开你的浏览器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://博客名.github.io</span><br></pre></td></tr></table></figure>

<p>恭喜您，您的博客现在已制作完成，现在只需要添加你喜欢的主题既可以开始你的博客之旅了。</p>
<h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><p>hexo主题网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br><img src="https://i.loli.net/2021/10/21/AhUeqK8sB53jp4k.jpg" alt="img"></p>
<p>找到你喜欢的主题，例如next主题 点击【next】<br><img src="https://i.loli.net/2021/10/21/ciqEGsyQ3l9Oorp.jpg" alt="img"></p>
<p>按照文件中所说下载和修改即可<br><img src="https://i.loli.net/2021/10/21/b16RkjZFNDQAEic.jpg" alt="img"></p>
<p>在博客根目录中打开【Git Bash Here】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-themes-next</span><br></pre></td></tr></table></figure>

<p>安装完成后，打开 Hexo 配置文件(_config.yml)并将theme变量设置为next.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h3 id="现在来介绍常用的Hexo-命令"><a href="#现在来介绍常用的Hexo-命令" class="headerlink" title="现在来介绍常用的Hexo 命令"></a>现在来介绍常用的Hexo 命令</h3><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>
<p>命令简写<br>hexo n “我的博客” &#x3D;&#x3D; hexo new “我的博客” #新建文章<br>hexo g &#x3D;&#x3D; hexo generate #生成<br>hexo s &#x3D;&#x3D; hexo server #启动服务预览<br>hexo d &#x3D;&#x3D; hexo deploy #部署</p>
<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
]]></content>
  </entry>
  <entry>
    <title>Json教程</title>
    <url>/2022/07/01/Json%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://img0.baidu.com/it/u=1264698771,643931544&fm=253&fmt=auto&app=138&f=JPEG?w=640&h=404" alt="img"></p>
<span id="more"></span>
<h2 id="Json教程"><a href="#Json教程" class="headerlink" title="Json教程"></a>Json教程</h2><p>JSON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JavaScript 对象表示法)</p>
<p>JSON 是存储和交换文本信息的语法，类似 XML。</p>
<p>JSON 比 XML 更小、更快，更易解析。</p>
<p>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;百度&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;google&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.google.com&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;微博&quot;</span> <span class="punctuation">,</span> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.weibo.com&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Json语法规则"><a href="#Json语法规则" class="headerlink" title="Json语法规则"></a>Json语法规则</h3><p>JSON 语法是 JavaScript 对象表示语法的子集。</p>
<ul>
<li>数据在名称&#x2F;值对中</li>
<li>数据由逗号分隔</li>
<li>大括号 <strong>{}</strong> 保存对象</li>
<li>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</li>
</ul>
<h3 id="JSON-名称-x2F-值对"><a href="#JSON-名称-x2F-值对" class="headerlink" title="JSON 名称&#x2F;值对"></a>JSON 名称&#x2F;值对</h3><p>JSON 数据的书写格式是：”key”:”value”</p>
<h3 id="JSON-值数据类型"><a href="#JSON-值数据类型" class="headerlink" title="JSON 值数据类型"></a>JSON 值数据类型</h3><p>JSON 值可以是：</p>
<ul>
<li>数字（整数或浮点数）:JSON 数字可以是整型或者浮点型，例如，”age”:18</li>
<li>字符串（在双引号中）:例如，”name”:”王钢蛋”</li>
<li>逻辑值（true 或 false）:JSON 布尔值可以是 true 或者 false，例如，”flag”:true</li>
<li>数组（在中括号中）:JSON 数组在中括号 <strong>[]</strong> 中书写，JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。数组可包含多个对象。</li>
<li>对象（在大括号中）:JSON 对象在大括号 <strong>{}</strong> 中书写，例如，{“data”:{“name”:”张三”,”age”:18}}</li>
<li>对象可以包含多个 <strong>key&#x2F;value（键&#x2F;值）</strong>对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。key 和 value 中使用冒号(:)分割。每个 key&#x2F;value 对使用逗号(,)分割。</li>
<li>null：例如，“name”:null</li>
</ul>
<h3 id="JSON访问"><a href="#JSON访问" class="headerlink" title="JSON访问"></a>JSON访问</h3><h4 id="访问JSON对象"><a href="#访问JSON对象" class="headerlink" title="访问JSON对象"></a>访问JSON对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;&#x27;</span></span><br><span class="line"><span class="comment">//将JSON格式的字符串转换成JSON对象</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>)</span><br></pre></td></tr></table></figure>

<h4 id="访问JSON数组"><a href="#访问JSON数组" class="headerlink" title="访问JSON数组"></a>访问JSON数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = <span class="string">&#x27;[&quot;google&quot;,&quot;baidu&quot;,&quot;sohu&quot;,&quot;sina&quot;]&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(ary);</span><br><span class="line">		</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="复杂情形"><a href="#复杂情形" class="headerlink" title="复杂情形"></a>复杂情形</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123;&quot;students&quot;:[&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:18&#125;]&#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line">		</span><br><span class="line"><span class="keyword">let</span> ary = obj.<span class="property">students</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;ary.<span class="property">length</span>;i++)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(ary[i].<span class="property">name</span>+<span class="string">&quot;============&quot;</span>+ary[i].<span class="property">age</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p>JSON 通常用于与服务端交换数据。</p>
<p>在接收服务器数据时一般是字符串。</p>
<p>我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p>
]]></content>
  </entry>
  <entry>
    <title>Markdown过长导致页面无法显示问题</title>
    <url>/2022/07/04/Markdown%E8%BF%87%E9%95%BF%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://img1.baidu.com/it/u=729938845,709425648&fm=253&fmt=auto&app=138&f=JPEG?w=977&h=500" alt="img"></p>
<span id="more"></span>

<h2 id="文章摘要设置"><a href="#文章摘要设置" class="headerlink" title="文章摘要设置"></a>文章摘要设置</h2><p>打开主题配置文件 _config.yml 文件，找到如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>

<p>把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。</p>
<p>这里我们可以通过在文章使用<code>&lt;!-- more --&gt;</code>标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。</p>
<p>强烈推荐使用该<code>&lt;!-- more --&gt;</code>标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</p>
<h2 id="其他的文章配置"><a href="#其他的文章配置" class="headerlink" title="其他的文章配置"></a>其他的文章配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Post Settings</span><br><span class="line"># ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span><br><span class="line"># 自动将页面滚动到&lt;!-- more --&gt;标记下的地方。</span><br><span class="line">scroll_to_more: false# Automatically saving scroll position on each post/page in cookies.</span><br><span class="line"># 自动保存每篇文章或页面上一次滚动的地方。</span><br><span class="line">save_scroll: false# Automatically excerpt description in homepage as preamble text.</span><br><span class="line"># 自动在首页对文章进行摘要描述作为前言文本。</span><br><span class="line">excerpt_description: true# Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line"># 不推荐使用自动摘要。</span><br><span class="line"># 请在文章中使用&lt;!-- more --&gt;标志来精确控制摘要长度。</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 200# Post meta display settings</span><br><span class="line"># 文章元数据展示设置</span><br><span class="line">post_meta:</span><br><span class="line">  # 文本显示</span><br><span class="line">  item_text: true</span><br><span class="line">  # 创建时间</span><br><span class="line">  created_at: true</span><br><span class="line">  # 更新时间</span><br><span class="line">  # 这个更新时间有点问题，因为每次重新生成文章/部署时都会刷新更新时间，不建议使用</span><br><span class="line">  updated_at: false</span><br><span class="line">  # 目录分类</span><br><span class="line">  categories: true# Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line"># 文章字数展示设置</span><br><span class="line">post_wordcount:</span><br><span class="line">  # 文本显示</span><br><span class="line">  item_text: true</span><br><span class="line">  # 文章字数统计</span><br><span class="line">  wordcount: true</span><br><span class="line">  # 阅读时长</span><br><span class="line">  min2read: true</span><br><span class="line">  # 站点总字数统计</span><br><span class="line">  totalcount: true</span><br><span class="line">  # 该post_wordcount的所有设置另起一行显示</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>SpringBoot整合JPA</title>
    <url>/2022/07/01/SpringBoot%E6%95%B4%E5%90%88Jpa/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F2331630%2F202107%2F2331630-20210721141158611-538846916.png&refer=http%3A%2F%2Fimg2020.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659501639&t=2f8efd79e607e9df171c317efc448f26" alt="img"></p>
<span id="more"></span>


<p>1.添加依赖</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>org.springframework.boot<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>spring<span class="operator">-</span>boot<span class="operator">-</span>starter<span class="operator">-</span>data<span class="operator">-</span>jpa<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>dependency<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>groupId<span class="operator">&gt;</span>org.springframework.boot<span class="operator">&lt;</span><span class="operator">/</span>groupId<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>artifactId<span class="operator">&gt;</span>spring<span class="operator">-</span>boot<span class="operator">-</span>starter<span class="operator">-</span>jdbc<span class="operator">&lt;</span><span class="operator">/</span>artifactId<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">/</span>dependency<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.配置数据源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/student?serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="comment">#打印SQL语句</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#使用测试用例时需要配置该项</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">enable_lazy_load_no_trans:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>3.新建实体类，并建立映射关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name = &quot;student&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer studentId;</span><br><span class="line">    <span class="meta">@Column(name = &quot;student_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String studentName;</span><br><span class="line">    <span class="meta">@Column(name = &quot;student_gender&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String studentGender;</span><br><span class="line">    <span class="meta">@Column(name = &quot;student_age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String studentAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@Table：用于表明该实体类对应的是数据库中的哪张表，name属性用于配置表名。</p>
<p>@Entity：JPA要求实体类上需要标注该注解</p>
<p>@Id：在标注了@Entity的类上必须有一个字段标注该注解，该注解用于表明标注了此注解的字段是主键。</p>
<p>@GeneratedValue：用于表明该主键的生成策略，通常和@Id同时出现</p>
<p>@Column：该注解并不是必须的，通常用于表明该变量对应的数据库表字段，如果字段名称使用经典命名法，而变量名称使用了驼峰命名法，则此注解可以省略</p>
<h3 id="JpaRepository接口详解"><a href="#JpaRepository接口详解" class="headerlink" title="JpaRepository接口详解"></a>JpaRepository接口详解</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">public interface JpaRepository<span class="operator">&lt;</span>T, ID<span class="operator">&gt;</span> extends PagingAndSortingRepository<span class="operator">&lt;</span>T, ID<span class="operator">&gt;</span>, QueryByExampleExecutor<span class="operator">&lt;</span>T<span class="operator">&gt;</span> &#123;</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>查询所有的数据</span><br><span class="line">    List<span class="operator">&lt;</span>T<span class="operator">&gt;</span> findAll();</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>查询所有的数据，并排序，排序的字段及排序方式通过Sort对象指定</span><br><span class="line">    List<span class="operator">&lt;</span>T<span class="operator">&gt;</span> findAll(Sort sort);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>根据ID批量查询</span><br><span class="line">    List<span class="operator">&lt;</span>T<span class="operator">&gt;</span> findAllById(Iterable<span class="operator">&lt;</span>ID<span class="operator">&gt;</span> ids);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>批量保存</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> List<span class="operator">&lt;</span>S<span class="operator">&gt;</span> saveAll(Iterable<span class="operator">&lt;</span>S<span class="operator">&gt;</span> entities);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>刷新缓存</span><br><span class="line">    void flush();</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>保存并刷新缓存</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> S saveAndFlush(S entity);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>批量保存并刷新缓存</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> List<span class="operator">&lt;</span>S<span class="operator">&gt;</span> saveAllAndFlush(Iterable<span class="operator">&lt;</span>S<span class="operator">&gt;</span> entities);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>批量删除</span><br><span class="line">    void deleteAllInBatch(Iterable<span class="operator">&lt;</span>T<span class="operator">&gt;</span> entities);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>通过ID批量删除</span><br><span class="line">    void deleteAllByIdInBatch(Iterable<span class="operator">&lt;</span>ID<span class="operator">&gt;</span> ids);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>等价于删除全部数据</span><br><span class="line">    void deleteAllInBatch();</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>通过ID查询</span><br><span class="line">    T getById(ID id);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>通过示例批量查询</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> List<span class="operator">&lt;</span>S<span class="operator">&gt;</span> findAll(Example<span class="operator">&lt;</span>S<span class="operator">&gt;</span> example);</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>通过示例批量查询</span><br><span class="line">    <span class="operator">&lt;</span>S extends T<span class="operator">&gt;</span> List<span class="operator">&lt;</span>S<span class="operator">&gt;</span> findAll(Example<span class="operator">&lt;</span>S<span class="operator">&gt;</span> example, Sort sort);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Jquery基础知识点</title>
    <url>/2022/07/08/Jquery%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.taodabai.com%2Fupload%2Fb6%2F47%2Fb647ba5763db7cdb66603673771da718.jpg&refer=http%3A%2F%2Fimg.taodabai.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659875204&t=eb5f718fab6f53be30c47dd30429dfac" alt="img"></p>
<span id="more"></span>

<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><h2 id="JQuery定义"><a href="#JQuery定义" class="headerlink" title="JQuery定义"></a>JQuery定义</h2><p>它是JavaScript的封装，它可以说是开源的JavaScript的函数库<br>使用它简化了JavaScript开发</p>
<h2 id="JQuery的下载及引用"><a href="#JQuery的下载及引用" class="headerlink" title="JQuery的下载及引用"></a>JQuery的下载及引用</h2><p>下载：<a href="https://jquery.com/download/">https://jquery.com/download/</a><br>下载好之后需要通过script标签引用，切记其位置必须是其它JavaScript代码之上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//调用Jquery代码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>JQuery与JavaScript比较</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html<span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//使用has方法</span></span></span><br><span class="line"><span class="language-javascript">   $(<span class="string">&quot;div&quot;</span>).<span class="title function_">has</span>(<span class="string">&quot;#demo&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>eq(索引)，表示选取指定索引的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">   $(<span class="string">&quot;div&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;这是第一个div里面的input&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;这是第二个div里面的input&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="选择转移"><a href="#选择转移" class="headerlink" title="选择转移"></a>选择转移</h2><p>我们可以以一个元素为参照，找到其它元素（节点选择）</p>
<p>详细如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">prev</span>(); 表示选择id是box元素的兄弟节点</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">prevAll</span>(); 表示选择id是box元素的上面所有的同级元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">next</span>(); 表示选择id是box元素的兄弟节点</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">nextAll</span>(); 表示选择id是box元素的下面所有的同级元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">parent</span>(); 表示选择id是box元素的父元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">children</span>(); 表示选择id是box元素的所有子元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">siblings</span>(); 表示选择id是box元素的其它同级元素</span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.myClass&#x27;</span>); 表示选择id是box元素的<span class="keyword">class</span>等于myClass的元素</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//确定参照节点</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> $div = $(<span class="string">&quot;#demo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">prev</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">prevAll</span>().<span class="title function_">css</span>(<span class="string">&quot;font-size&quot;</span>,<span class="number">33</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">next</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">nextAll</span>().<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;gray&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#ff6700&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;gold&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>这是一个div</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是div里面的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这又是一个标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这是一个a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="html方法的使用"><a href="#html方法的使用" class="headerlink" title="html方法的使用"></a>html方法的使用</h2><p>在jquery中可以通过html属性为元素设置html内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> $div = $(<span class="string">&quot;#demo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//如果要获取内容</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> rs = $div.<span class="title function_">html</span>();</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">alert</span>(rs)</span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">html</span>(<span class="string">&quot;&lt;span style=&#x27;color: red&#x27;&gt;哈嘿~~~~&lt;/span&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//在元素后追加内容</span></span></span><br><span class="line"><span class="language-javascript">     $div.<span class="title function_">append</span>(<span class="string">&quot;&lt;span style=&#x27;color: red&#x27;&gt;大宝贝&lt;/span&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="获取和设置元素的属性"><a href="#获取和设置元素的属性" class="headerlink" title="获取和设置元素的属性"></a>获取和设置元素的属性</h2><p>prop方法：css方法可以设置元素的样式属性，而该方法可以设置元素的其它属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">     $(function () &#123;</span><br><span class="line">     var $a = $(&quot;#aId&quot;);</span><br><span class="line">     var $input = $(&quot;#InputId&quot;);</span><br><span class="line">     //可以获取</span><br><span class="line">     var Sa = $a.prop(&quot;id&quot;);</span><br><span class="line">     // alert(Sa);</span><br><span class="line">     //设置元素属性</span><br><span class="line">     $a.prop(&#123;&quot;href&quot;:&quot;http://www.baidu.com&quot;,&quot;class&quot;:&quot;aClass&quot;,&quot;title&quot;:&quot;这是</span><br><span class="line">    标题&quot;&#125;);</span><br><span class="line">     //获取input中的属性value使用的是val()方法</span><br><span class="line">     // var Sinput = $input.prop(&quot;value&quot;);</span><br><span class="line">     // alert(Sinput);</span><br><span class="line">     var Sinput = $input.val();</span><br><span class="line">     alert(Sinput);</span><br><span class="line">     //设置value值</span><br><span class="line">     $input.val(&quot;12313212&quot;);</span><br><span class="line">     &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;aId&quot;</span>&gt;</span>这是a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;InputId&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;InputId&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JQuery事件"><a href="#JQuery事件" class="headerlink" title="JQuery事件"></a>JQuery事件</h2><p>常用事件</p>
<ul>
<li><p>click() 鼠标点击事件</p>
</li>
<li><p>blur() 离焦事件</p>
</li>
<li><p>focus() 聚焦事件</p>
</li>
<li><p>mouseover() 鼠标进入事件</p>
</li>
<li><p>mouseout() 鼠标离开事件</p>
</li>
<li><p>ready() DOM加载完毕触发</p>
</li>
<li><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line"> &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"> &lt;script src=&quot;jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">     $(function () &#123;</span><br><span class="line">     var $li = $(&quot;.list li&quot;);</span><br><span class="line">     var $input = $(&quot;#in_one&quot;);</span><br><span class="line">     var $btn = $(&quot;#btn&quot;);</span><br><span class="line">     var $div = $(&quot;#demo&quot;);</span><br><span class="line">     //点击事件</span><br><span class="line">     $li.click(function () &#123;</span><br><span class="line">     $(this).css(&#123;&quot;background&quot;:&quot;red&quot;&#125;);</span><br><span class="line">     //index()方法可以获取当前元素的索引值</span><br><span class="line">     //alert($(this).index())</span><br><span class="line">     &#125;);</span><br><span class="line">     //获取焦点</span><br><span class="line">     $input.focus(function () &#123;</span><br><span class="line">    • JQuery事件</span><br><span class="line">     分区 新分区 1 的第 7 页 </span><br><span class="line">     $input.focus(function () &#123;</span><br><span class="line">     $(this).val(&quot;嗨嗨嘿&quot;);</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">   &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">     &lt;li&gt;这是一行字&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;这是一行字&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;这是一行字&lt;/li&gt;</span><br><span class="line">     &lt;li&gt;这是一行字&lt;/li&gt;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">     &lt;input type=&quot;text&quot; id=&quot;in_one&quot;/&gt;</span><br><span class="line">     &lt;input type=&quot;submit&quot; id=&quot;btn&quot; value=&quot;点一下&quot;/&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>html基础（一）</title>
    <url>/2022/07/08/html%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.iisp.com%2Fimage%2F20161011%2F20161011180825_78244.jpg&refer=http%3A%2F%2Fimg.iisp.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659877024&t=24bae5fadeb346539de3c527885be3df" alt="img"></p>
<span id="more"></span>

<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h2><p>​     HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言。HTML是由Web的发明者 Tim Berners-Lee和同事 Daniel W. Connolly于1990年创立的一种标记语言，它是标准通用化标记语言SGML的应用。用HTML编写的超文本文档称为HTML文档，它能独立于各种操作系统平台(如UNIX， Windows等)。使用HTML，将所需要表达的信息按某种规则写成HTML文件，通过专用的浏览器来识别，并将这些HTML文件“翻译”成可以识别的信息，即现在所见到的网页。<br>     自1990年以来，HTML就一直被用作万维网的信息表示语言，使用HTML描述的文件需要通过web浏览器显示出效果。HTML是一种建立网页文件的语言，通过标记式的指令(Tag)，将影像、声音、图片、文字动画、影视等内容显示出来。事实上，每一个HTML文档都是一种静态的网页文件，这个文件里面包含了HTML指令代码，这些指令代码并不是一种程序语言，只是一种排版网页中资料显示位置的标记结构语言，易学易懂，非常简单。HTML的普遍应用就是带来了超文本的技术―通过单击鼠标从一个主题跳转到另一个主题，从一个页面跳转到另一个页面，与世界各地主机的文件链接超文本传输协议规定了浏览器在运行HTML文档时所遵循的规则和进行的操作。HTTP的制定使浏览器在运行超文本时有了统一的规则和标准。<br>      <a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91"> 万维网</a>（world wide web，简称www）上的一个<a href="https://baike.baidu.com/item/%E8%B6%85%E5%AA%92%E4%BD%93/1750647">超媒体</a>文档称之为一个<a href="https://baike.baidu.com/item/%E9%A1%B5%E9%9D%A2">页面</a>（<a href="https://baike.baidu.com/item/%E5%A4%96%E8%AF%AD">外语</a>：page）。作为一个组织或者个人在<a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91/215515">万维网</a>上放置开始点的页面称为<a href="https://baike.baidu.com/item/%E4%B8%BB%E9%A1%B5">主页</a>（外语：Homepage）或首页，主页中通常包括有指向其他相关页面或其他节点的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88">指针</a>（<a href="https://baike.baidu.com/item/%E8%B6%85%E7%BA%A7%E9%93%BE%E6%8E%A5">超级链接</a>），所谓超级链接，就是一种<a href="https://baike.baidu.com/item/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E5%99%A8">统一资源定位器</a>（Uniform Resource Locator，<a href="https://baike.baidu.com/item/%E5%A4%96%E8%AF%AD">外语</a><a href="https://baike.baidu.com/item/%E7%BC%A9%E5%86%99">缩写</a>：<a href="https://baike.baidu.com/item/URL">URL</a>）指针，通过激活（点击）它，可使<a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8">浏览器</a>方便地获取新的网页。这也是HTML获得广泛应用的最重要的原因之一。在逻辑上将视为一个整体的一系列<a href="https://baike.baidu.com/item/%E9%A1%B5%E9%9D%A2">页面</a>的有机集合称为<a href="https://baike.baidu.com/item/%E7%BD%91%E7%AB%99">网站</a>（<a href="https://baike.baidu.com/item/Website">Website</a>或<a href="https://baike.baidu.com/item/Site/10831143">Site</a>）。超文本标记语言（英文缩写：HTML）是为“<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5">网页</a>创建和其它可在<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8">网页浏览器</a>中看到的信息”设计的一种<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">标记语言</a>。<br>     网页的本质就是超文本<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/5964436">标记语言</a>，通过结合使用其他的<a href="https://baike.baidu.com/item/Web%E6%8A%80%E6%9C%AF">Web技术</a>（如：<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a>、<a href="https://baike.baidu.com/item/%E5%85%AC%E5%85%B1%E7%BD%91%E5%85%B3%E6%8E%A5%E5%8F%A3">公共网关接口</a>、<a href="https://baike.baidu.com/item/%E7%BB%84%E4%BB%B6">组件</a>等），可以创造出功能强大的网页。因而，超文本标记语言是万维网（<a href="https://baike.baidu.com/item/Web">Web</a>）编程的基础，也就是说万维网是建立在超文本基础之上的。超文本标记语言之所以称为超文本标记语言，是因为文本中包含了所谓“超级链接”点。</p>
<h2 id="HTML版本"><a href="#HTML版本" class="headerlink" title="HTML版本"></a>HTML版本</h2><p>​        HTML是用来标记Web信息如何展示以及其他特性的一种语法规则，它最初于1989年由CERN的Tim Berners-Lee发明。HTML基于更古老一些的语言SGML定义，并简化了其中的语言元素。这些元素用于告诉浏览器如何在用户的屏幕上展示数据，所以很早就得到各个Web浏览器厂商的支持。 [5]<br>HTML历史上有如下版本： [5]<br>①HTML 1.0：在1993年6月作为互联网工程工作小组(IETF)工作草案发布。<br>②HTML 2.0：1995年1 1月作为RFC 1866发布，于2000年6月发布之后被宣布已经过时。<br>③HTML 3.2：1997年1月14日，W3C推荐标准。<br>④HTML 4.0：1997年12月18日，W3C推荐标准。<br>⑤HTML 4.01（微小改进）：1999年12月24日，W3C推荐标准。<br>⑥<a href="https://baike.baidu.com/item/HTML%205/8762673">HTML 5</a>：HTML5是公认的下一代Web语言，极大地提升了Web在富媒体、富内容和富应用等方面的能力，被喻为终将改变移动互联网的重要推手。Internet Explorer 8及以前的版本不支持。</p>
<h2 id="迎接新的Web时代"><a href="#迎接新的Web时代" class="headerlink" title="迎接新的Web时代"></a>迎接新的Web时代</h2><p>​        HTML5并不是革命性的改变，而只是发展性的。而且对于之前HTML4的很多标准都是兼容的，所有通过最新HTML5标准制作的Web应用也可以轻松的在老版本的浏览器上运行。HTML5标准中的确是集成了很多实用的功能比如：音视频、本地存储、Socket通信、动画等都是之前应用开发中确实感觉到Web端的鸡肋才得到重视和升级的。<br>       HTML5的目标是：它通过一些新标签，新功能为开发更加简、独立、标准的通用Web应用提供了标准。新的标准解决了三大问题：浏览器兼容问题，解决了文档结构不明确的问题，解决了Web应用程序功能受限等问题。<br>号称“CSS之父”的Hakon Wium Lie认为，HTML5与CSS3将是全球互联网发展的未来趋势。<br>自从2010年HTML5正式推出以来，它就以一种惊人的速度被迅速推广使用，微软也因此在IE上做了关于HTML5的标准改进，使其能够支持HTML5，google Chrome，Safari，Opera，Mozilla等主要Web浏览器也针对HTML5制定了相应的支持措施。<br>     目前主流的浏览器厂商也纷纷在研发HTML5相关产品，从目前这些浏览器对HTML5的支持来看，Web的未来属于HTML5</p>
<h2 id="HTML的开发环境和运行环境"><a href="#HTML的开发环境和运行环境" class="headerlink" title="HTML的开发环境和运行环境"></a>HTML的开发环境和运行环境</h2><p>​        HTML本质上就是一个文档，市面上常见的一些简单的文本编辑器都是可以用来开发HTML，编辑之后只需将后缀修改为”.html”即可 如：记事本，EditPlus等<br>前端开发也有众多专业的开发软件，如：Webstrom，Sublime Text，Dreamweaver，HBuilder等，本书主要以  webstrom为主要开发软件<br>        HTML运行环境即各种浏览器，如:IE，edge，Chrome，Firefox，Safari等均可作为HTML的运行环境</p>
<h2 id="HTML文档结构"><a href="#HTML文档结构" class="headerlink" title="HTML文档结构"></a>HTML文档结构</h2><p>​    HTML文档有明确的文档结构，包含三个部分：&lt;HTML&gt;中包含&lt;head&gt;…&lt;&#x2F;head&gt;部分和&lt;body&gt;…&lt;&#x2F;body&gt;部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：</p>
<ol>
<li><p>第1行，HTML5的文档声明，声明开发版本</p>
</li>
<li><p>第2行，&lt;html&gt;表示HTML的文档起点，”lang&#x3D;en”表示开发语言为英语，与之对应的在文档的最后一行&lt;&#x2F;html&gt;表示文档的结束位置</p>
</li>
<li><p>第3，6行，表示文档的头部信息，该部分中的内容不在浏览器的主体中显示，文档头部中主要用来做一些辅助功能。</p>
</li>
<li><p>第4行，&lt;meta&gt;是&lt;head&gt;中的一个辅助性标签，不包含任何内容，它的属性定义了与文档相关联的名称&#x2F;值，它提供了相关页面的元信息如：针对搜索引擎和更新频度的描述和关键词， 详见下节&lt;meta&gt;标签</p>
</li>
<li><p>第5行，&lt;title&gt;用来添加网页的标题，网页标题显示在浏览器的标题栏中</p>
<p>​</p>
</li>
</ol>
<h2 id="lt-meta-gt-标签"><a href="#lt-meta-gt-标签" class="headerlink" title="&lt;meta&gt;标签"></a>&lt;meta&gt;标签</h2><ul>
<li>&lt;meta&gt;标签位于&lt;head&gt;标签区域内提供了HTML的文档元数据（注：元数据是数据的数据信息且元数据不会显示在客户端，但是会被浏览器解析）</li>
<li>&lt;meta&gt;标签提供了文档的字符集，使用语言，作者等基本信息，此外还涉及关键词和网页等级设定</li>
<li>&lt;meta&gt;标签常用属性表</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://baike.baidu.com/item/charset">charset</a></td>
<td><em>character_set</em></td>
<td>定义文档的字符编码。</td>
</tr>
<tr>
<td><a href="https://baike.baidu.com/item/content">content</a></td>
<td><em>text</em></td>
<td>定义与 http-equiv 或 name 属性相关的元信息。</td>
</tr>
<tr>
<td>http-equiv</td>
<td>content-typedefault-stylerefresh</td>
<td>把 content 属性关联到 HTTP 头部。</td>
</tr>
<tr>
<td>name</td>
<td>application-nameauthordescriptiongeneratorkeywords</td>
<td>把 content 属性关联到一个名称。</td>
</tr>
<tr>
<td><a href="https://baike.baidu.com/item/scheme/8379129">scheme</a></td>
<td><em>format&#x2F;URI</em></td>
<td>HTML5不支持。定义用于翻译 content 属性值的格式。</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明文档的字符编码，中文常用的还有GBK，gb2312--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页面关键词--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;软件咨询，软件开发，影视后期&quot;</span>/&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--页面描述--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;软件开发，影视后期，我们可以快速的帮你提升职业技能水平&quot;</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--网页作者--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Mr.cai&quot;</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--搜索引擎抓取robots是一组使用逗号（，）分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noindex&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上面示例定义了此网页不被搜索引擎索引进数据库，但搜索引擎可以通过此网页的链接继续索引其它网页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;nofollow&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上面示例定义此网页被搜索引擎索引进数据库，但搜索引擎不可以通过此网页的链接继续索引其它网页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上面示例定义了此网页不被搜索引擎索引进数据库，且搜索引擎不可以通过此网页的链接继续索引其它网页--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--针对谷歌GOOGLEBOT使用robots--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以将name的属性只定义为GOOGLEBOT标识为谷歌搜索引擎。 使用元标记拦截或删除网页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;googlebot&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noindex, nofollow&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--针对百度baiduspider使用robots--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以将name的属性只定义为baiduspider标识为百度搜索引擎。禁止搜索引擎收录的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;baiduspider&quot;</span> <span class="attr">content</span>=<span class="string">&quot;noarchive&quot;</span>/&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--页面重定向和刷新--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0;url=http://www.baidu.com&quot;</span>/&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--禁止Chrome浏览器中自动提示翻译--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google&quot;</span> <span class="attr">value</span>=<span class="string">&quot;notranslate&quot;</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--禁止百度转码--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-siteapp&quot;</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!--自定义标签：app版本号说明--&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;app-version&quot;</span><span class="attr">content</span>=<span class="string">&quot;1.13.3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>meta<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>HTML文档由HTML元素定义，一个基本元素由“开始标签”，“元素内容”，“结束标签”构成</p>
<table>
<thead>
<tr>
<th>&lt;开始标签&gt;</th>
<th>元素内容</th>
<th>&lt;&#x2F;结束标签&gt;</th>
</tr>
</thead>
<tbody><tr>
<td>HTML元素以开始标签起始</td>
<td>元素内容即开始标签和结束标签之间的内容</td>
<td>HTML元素以结束标签终结</td>
</tr>
</tbody></table>
<h2 id="块级标签和行级标签"><a href="#块级标签和行级标签" class="headerlink" title="块级标签和行级标签"></a>块级标签和行级标签</h2><p>HTML中，所有标签都是预定义的，也就是说所有的标签都有各自的特点属性，根据这些特点可将标签分为块级标签和行级标签两类</p>
<h4 id="块级标签"><a href="#块级标签" class="headerlink" title="块级标签"></a>块级标签</h4><p>块级标签编译后在浏览器中默认没有高度，其高度由其添加的内容决定，其宽度默认为屏幕宽度，也就是说块级标签默认占一行</p>
<h4 id="行级标签"><a href="#行级标签" class="headerlink" title="行级标签"></a>行级标签</h4><p>行级标签编译后在浏览器中默认没有宽度和高度，其宽高均有添加的内容决定，也就是说行级标签在其内容不满一行时不会换行</p>
<h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h2><h4 id="常用的块级标签"><a href="#常用的块级标签" class="headerlink" title="常用的块级标签"></a>常用的块级标签</h4><ul>
<li><p>标题标签</p>
</li>
<li><ul>
<li>标题（Heading）通过&lt;h1&gt;….&lt;h6&gt;标签定义，表示一级标题至六级标题，其中&lt;h1&gt;最大，&lt;h6&gt;最小</li>
<li>标题标签只用于标题</li>
<li>标题标签不单单用于字体放大加粗，更多的是为搜索引擎使用标题帮助网页索引</li>
</ul>
</li>
<li><p>段落标签</p>
</li>
<li><ul>
<li>段落通过&lt;p&gt;…&lt;&#x2F;p&gt;标签定义，表示文档中的一个自然段</li>
<li>注：段落标签不能嵌套使用，若想要段落标签中的内容换行显示可使用<br/>标签换行</li>
</ul>
</li>
<li><p>div标签</p>
</li>
<li><ul>
<li><p>div标签用于定义文档中的分区或节</p>
</li>
<li><p>可以把文档分割为独立的，不同的部分</p>
</li>
<li><p>在后期通过学习样式表，div可以与CSS配合对整个网页进行页面布局，模块划分，让网页制作不再有难度</p>
</li>
<li><p>div若不带样式单独使用则与段落标签<p>相似，没有特定的含义</p>
<p>​</p>
</li>
</ul>
</li>
<li><p>无序列表</p>
</li>
<li><ul>
<li>列表可以结合链接标签用来定义新闻标题等一些较为常用的标题类链接</li>
<li>无序列表使用<ul>定义列表，<li>定义列表中的条目，默认此列项目使用黑色小圆点进行标记</li>
<li>通过在<ul>中添加type属性更改列表的展示标记，其中disc表示实心圆，square表示矩形显示，circle表示空心圆</li>
</ul>
</li>
<li><p>有序列表</p>
</li>
<li><ul>
<li>有序列表使用<ol>定义列表，<li>定义列表中的条目，默认此列项目使用阿拉伯数字进行标记</li>
<li>通过在<ol>中添加type属性更改列表的展示标记，其中‘A’表示大写字母，‘a’表示小写字母，‘I’表示大写罗马数字，‘i’表示小写罗马数字，‘1’表示阿拉伯数字（默认）</li>
</ul>
</li>
<li><p>自定义列表</p>
</li>
<li><ul>
<li>使用<dl>定义列表，<dt>定义列表中的项目，<dd>定义列表条目</li>
<li>自定义列表不单单只用了区分项目，后期通过样式，标签嵌套可以胜任诸多任务，如：商城，外卖类网站商品的模块划分</li>
</ul>
</li>
</ul>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>pc端游戏<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>穿越火线<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>英雄联盟<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>CSGO<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>手机游戏<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>和平精英<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>阴阳师<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>嵌套列表</p>
</li>
<li><ul>
<li>列表可以通过多层嵌套实现多级列表</li>
</ul>
</li>
</ul>
<h4 id="常用的行级标签"><a href="#常用的行级标签" class="headerlink" title="常用的行级标签"></a>常用的行级标签</h4><ul>
<li><p>内联元素</p>
</li>
<li><ul>
<li>使用<span>…<span>表示</li>
<li>单独使用没有特定的含义</li>
<li>当与CSS一同使用，用来组合文档中的行内元素，如：在一行文字中给某一个字单独设置样式，再或者在某行字中添加小图标</li>
</ul>
</li>
<li><p>链接标签</p>
</li>
<li><ul>
<li>使用<a href="url">…</a>表示</li>
<li>用于从一个页面跳转到另一个页面</li>
<li>href表示跳转的链接目标</li>
<li>默认情况下链接将以以下形式出现在网页中</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在未点击访问时链接字体程蓝色并带同色下划线</li>
<li>在点击后链接字体会程红色显示并带同色下划线</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>标签常用属性</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>download</td>
<td>filename</td>
<td>指定下载链接</td>
</tr>
<tr>
<td>href</td>
<td>URL</td>
<td>规定链接目标</td>
</tr>
<tr>
<td>target</td>
<td>_blank_parent_self_top</td>
<td>_blank：新窗口打开。_parent：在父窗口中打开链接。_self：默认，当前页面跳转。_top：在当前窗体打开链接，并替换当前的整个窗体(框架页)。</td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li>在网页开发中常用的链接有以下四种：</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>链接分类</th>
<th>属性参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>空链接</td>
<td>href&#x3D;”#”href&#x3D;”javascript:void(0)”</td>
<td>空链接即只能点击不会做页面跳转的链接，用于向页面上添加对象或行为  如：设为首页，添加收藏等</td>
</tr>
<tr>
<td>本地链接</td>
<td>href&#x3D;”本地路径”</td>
<td>用于本地工程&#x2F;服务器页面之间的相互跳转</td>
</tr>
<tr>
<td>网络链接</td>
<td>herf&#x3D;”url”</td>
<td>用于给网站添加外部链接，点击后跳转到其它网站</td>
</tr>
<tr>
<td>锚链接</td>
<td>href&#x3D;”#name”</td>
<td>用于添加页面内快速引导，可以从页面的一个位置快速的转到另一个位置</td>
</tr>
</tbody></table>
<p>空链接“#”与“javascript:void(0)”的区别：</p>
<ol>
<li>“#”包含一个位置信息，默认为网页顶端，当页面高度大于一屏时，点击后会跳转到网页顶部</li>
<li>“javascript:void(0)”是一个伪协议，表示url内容通过javascript执行，而void(0)则表示不作任何操作，这样该标签既保留了链接样式还能防止页面跳转</li>
<li>空链接通常通过添加javascript事件去做一些其它操作，如：设置收藏，设置首页，弹窗等，这些会在本书javascript事件章节详细讲解</li>
</ol>
<p>绝对路径和相对路径</p>
<p>绝对路径：是指文件在硬盘上的真正存在的路径，如：一张名为“头像.jpg”的图片或一个名为“index.html”的网页存放在我计算机中的“C:\Users\document\WebstormProjects\untitled15”目录中，则图片的绝对路径为“C:\Users\document\WebstormProjects\untitled15\头像.jpg”，网页的绝对路径为“C:\Users\document\WebstormProjects\untitled15\index.html”，但在开发时很少使用绝对路径，当指定了决定路径后在项目路径在本地计算机上是没问题的，但上传到服务器或在其它计算机上时很可能会出现找不到路径，路径错误等问题。</p>
<p>相对路径：指由文件本身相对于目标文件的路径，使用相对路径的三种写法，下边以网页index.html引用网页Login.html为例说明：</p>
<p>1.若Login.html相对index.html是在同一目录，那么网页在引用图片时则只需要通过Login.html名称+后缀引用即可</p>
<table>
<thead>
<tr>
<th>位置关系图示</th>
<th>代码示例</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626061269598-89399a32-cf28-42f3-beff-1c35ca4a7265.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_10,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td>
<td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626061301889-949b6f4d-7725-47f2-85f0-dbf5806facd0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td>
</tr>
</tbody></table>
<p>​             2.若网页Login.html存在某个文件夹中，文件夹与网页index.html属于同一目录，那么网页index.html在引用网页Login.html时则需要通过找到文件夹使用分隔符“&#x2F;”才能找到文件夹中相对的网页Login.html文件，这里需要注意：绝对路径使用分隔符“\”，相对路径使用分隔符“&#x2F;”</p>
<table>
<thead>
<tr>
<th>位置关系图示</th>
<th>代码示例</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626061376948-03e21db6-7ff0-47a9-8211-aac16e6f9369.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td>
<td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626061390608-6d2708e8-bee4-41a4-b85d-dbec01b0f42d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td>
</tr>
</tbody></table>
<p>3.若网页index.html和网页Login.html都存在不同的文件夹中，两个不同的文件夹属于同一目录，那么网页index.html在引用网页Login.html时则需要通过“..&#x2F;”返回上一级路径再去引用存放网页Login.html的文件夹再使用分隔符“&#x2F;”引用网页Login.html，这里需要注意一个“..&#x2F;”，表示网上返回一级，如果要返回多个则需要使用多个“..&#x2F;”</p>
<p>网络链接示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网络链接<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>锚链接示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span>这是网页顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#middle&quot;</span>&gt;</span>跳转至网页中部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bottom&quot;</span>&gt;</span>跳转至网页底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>网页内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里省略若干行相同内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>这是网页中部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>跳转至网页顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bottom&quot;</span>&gt;</span>跳转至网页底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>网页内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里省略若干行相同内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#middle&quot;</span>&gt;</span>跳转至网页中部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>跳转至网页顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>这是网页底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>附：</p>
<ol>
<li>锚链接是在页面内的不同位置跳转，本质上就是元素间的跳转</li>
<li>使用锚链接首先要建立锚点目标，只需要给元素添加id或name属性即可 如：<a name="top">,<div id="top"></li>
<li>建立好锚点目标后再使用<a href="#id值或name值">引用锚点</li>
<li>如果不同页面跳转，同时存在锚点，则先跳转到要跳转的页面，然后在寻找锚点元素进行跳转</li>
</ol>
<ul>
<li><p>图片标签</p>
</li>
<li><ul>
<li>图片标签使用<img/>表示，图片标签没有结束标签“&#x2F;”表示结束</li>
<li>标签属性</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>src（必需）</td>
<td>url</td>
<td>图片路径或网络地址</td>
</tr>
<tr>
<td>title</td>
<td>text</td>
<td>图片标题描述，当鼠标悬停在图片上时显示</td>
</tr>
<tr>
<td>alt</td>
<td>text</td>
<td>图片替换文本，当图片路径发生错误时显示</td>
</tr>
<tr>
<td>width</td>
<td>pixels</td>
<td>图片宽度</td>
</tr>
<tr>
<td>height</td>
<td>pixels</td>
<td>图片高度</td>
</tr>
</tbody></table>
<ul>
<li><p>图片增强（map）</p>
</li>
<li><ul>
<li><code>&lt;map&gt;</code>标签有助于定义图像映射。图像映射指的是图像中包含一个或多个可点击区域。<code>&lt;map&gt;</code>标签与<code>&lt;area&gt;</code>标签一起确定可点击区域。可点击区域可以是矩形、圆形或多边形区域这些形状之一。如果不指定形状，就会认为是整个图像。</li>
</ul>
</li>
</ul>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;img src=&quot;../images/mapImages/4.png&quot; width=&quot;592&quot; height=&quot;182&quot; alt=&quot;mapSelect&quot; usemap=&quot;#circusmap&quot;&gt;</span><br><span class="line">        &lt;map name=&quot;circusmap&quot;&gt;</span><br><span class="line">            &lt;area shape=&quot;rect&quot; coords=&quot;82,70,155,133&quot; href=&quot;map2.html&quot;&gt;</span><br><span class="line">            &lt;area shape=&quot;rect&quot; coords=&quot;297,70,387, 133&quot; href=&quot;map1.html&quot;&gt;</span><br><span class="line">            &lt;area shape=&quot;rect&quot; coords=&quot;480,70,572, 133&quot; href=&quot;map3.html&quot;&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>知识补充：</p>
<ul>
<li><ul>
<li><area>标签定义图像映射中的区域</li>
<li>shape属性</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>shape属性用于定义图像映射中对鼠标敏感的区域的形状</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>圆形（circ或circle）</li>
<li>多边形（poly或polygon）</li>
<li>矩形（rect或rectangle）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>coords属性</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>圆形：shape&#x3D;”circle”，coords&#x3D;”x,y,z”</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这里的 x 和 y 定义了圆心的位置（”0,0” 是图像左上角的坐标），z 是以像素为单位的圆形半径。</p>
<ul>
<li><ul>
<li><ul>
<li>多边形：shape&#x3D;”polygon”，coords&#x3D;”x1,y1,x2,y2,x3,y3,…”</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>每一对 “x,y” 坐标都定义了多边形的一个顶点（”0,0” 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。</p>
<p>多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。</p>
<ul>
<li><ul>
<li><ul>
<li>矩形：shape&#x3D;”rectangle”，coords&#x3D;”x1,y1,x2,y2”</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，”0,0” 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。</p>
<ul>
<li>常用文本格式化标签</li>
</ul>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><b></td>
<td>定义粗体文本</td>
</tr>
<tr>
<td><em></td>
<td>定义着重文字</td>
</tr>
<tr>
<td><i></td>
<td>定义斜体文字</td>
</tr>
<tr>
<td><small></td>
<td>定义小号文字</td>
</tr>
<tr>
<td><strong></td>
<td>定义加重语气</td>
</tr>
<tr>
<td><sub></td>
<td>定义下标字</td>
</tr>
<tr>
<td><sup></td>
<td>定义上标字</td>
</tr>
<tr>
<td><ins></td>
<td>定义插入字(加了下划线)</td>
</tr>
<tr>
<td><del></td>
<td>定义删除字(加了删除线)</td>
</tr>
</tbody></table>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>定义粗体文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>定义着重文字<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>定义斜体文字<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>定义小号文字<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>定义加重语气<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    定义下标字 <span class="tag">&lt;<span class="name">sub</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    定义上标字 <span class="tag">&lt;<span class="name">sup</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ins</span>&gt;</span>定义插入字(加了下划线)<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>定义删除字(加了删除线)<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2022/07/08/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><img src="https://img2.baidu.com/it/u=3364251630,2616048261&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=281" alt="img"></p>
<span id="more"></span>

<h1 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​        JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。<br>●是一种解释性脚本语言（代码不进行预编译）。<br>●主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。<br>●可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。<br>●跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。<br>        Javascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。</p>
<h2 id="JavaScript能做什么"><a href="#JavaScript能做什么" class="headerlink" title="JavaScript能做什么"></a>JavaScript能做什么</h2><p>●使网页具有交互性，例如响应用户点击，给用户提供更好的体验<br>●可以处理表单，检验用户的输入，并提供及时反馈节省用户时间。例如，表单中要你输入电子邮箱而你却输入一个手机号，那么应该给你一个提醒。<br>●还可以根据用户的操作，动态的创建页面。例如，发邮件时，添加附件操作。<br>●设置cookie，cookie是存储在浏览器上的一些临时信息，例如你浏览过的网站地址，使用过的用户名<br>●JavaScript 是有规律地重复的HTML元素简化，减少下载时间。<br>●浏览器与服务器进行数据通讯，比如现在最流行的Ajax异步传输；</p>
<h2 id="JavaScript构成"><a href="#JavaScript构成" class="headerlink" title="JavaScript构成"></a>JavaScript构成</h2><p>●JavaScript由以下三部分组成：<br>○ECMAScript，它用来描述语法和基本对象<br>○文档对象模型Doucment Object       Model（DOM），用来处理网页内容</p>
<p><img src="https://files.catbox.moe/vxrm52.png"><br>○浏览器对象模型Borwser Object Model（BOM），用来处理浏览器交互<br><img src="https://files.catbox.moe/8s07n8.png"></p>
<h2 id="JavaScript的开发环境与运行环境"><a href="#JavaScript的开发环境与运行环境" class="headerlink" title="JavaScript的开发环境与运行环境"></a>JavaScript的开发环境与运行环境</h2><p>●JavaScript为轻型脚本语言，可在任意文本编辑器中编辑<br>●由于JavaScript是内嵌在HTML中执行，所以其运行环境即浏览器<br>10.5 JavaScript的使用<br>●JavaScript需在HTML中内嵌运行，其内嵌方式有两种：<br>○在网页中创建&lt;script&gt;&lt;&#x2F;script&gt;,在标签之间写JavaScript代码<br>JavaScript复制代码`<code>1﻿</code>&lt;script&gt;<code>2﻿</code>    alert(“hello world”)<code>3﻿</code>&lt;script&gt;&#96;</p>
<h2 id="JavaScript的使用"><a href="#JavaScript的使用" class="headerlink" title="JavaScript的使用"></a>JavaScript的使用</h2><ul>
<li><p>JavaScript需在HTML中内嵌运行，其内嵌方式有两种：</p>
</li>
<li><ul>
<li>在网页中创建&lt;script&gt;&lt;&#x2F;script&gt;,在标签之间写JavaScript代码</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  	<span class="title function_">alert</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>在外部创建“.js”文件，通过&lt;script src&#x3D;”文件路径”&gt;引入到HTML文件中执行</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;xxx/xxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h2><ul>
<li><p>值</p>
</li>
<li><ul>
<li>数字类型的值（数字）</li>
<li>算术值（加减乘除等运算，需要两个或两个以上的数字）</li>
<li>特殊数字</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在JavaScript中有三个特殊数值，他们被视为数字，但其行为不像普通数字那样</li>
<li>Infinity和-Infinity表示正无穷大和负无穷大</li>
<li>NaN代表不是数字，就是不当的算数运算得到不当的值（比如：0&#x2F;0或者Infinity-Infinity都会得到这样的值）</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>字符串（用于表示文本，使用引号引起来即可）</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在字符串中还需要注意</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><p>在引号中添加特殊字符时比较难加，但是只需要添加反引号”&#96;“就可解决这个问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello my   &quot;son&quot;`</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>转义符（\）</p>
</li>
<li><ul>
<li><p>出现在引用文本中，表示后面有特殊字符</p>
</li>
<li><p>换行符（\n）</p>
</li>
<li><p>制表符（\t）</p>
</li>
<li><p>如果希望字符串中的斜杠只是斜杠，可以使用两个斜杠</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;l   input \&quot;\\n\&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>运算符</p>
</li>
<li><ul>
<li>一元运算符</li>
</ul>
</li>
<li><ul>
<li><p>在JavaScript中并非所有的运算符都是由符号构成的，还有由单词构成的符号，如：typeof运算符用来生成一个字符串，表示你输入数据的类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span>   <span class="number">2.2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span>   <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>布尔值</p>
</li>
<li><ul>
<li>比较运算符（&gt;,&lt;,&lt;&#x3D;,&lt;&#x3D;……）</li>
</ul>
</li>
<li><ul>
<li><p>比较运算符属于二元运算符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>&lt;<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>字符串也是可以比较的</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(a&gt;b)</th>
</tr>
</thead>
<tbody><tr>
<td>字符串在比较时大致时按照字母的顺序比较，而小写字母的大于大写字母，在字符串比较是JavaScript从左道右遍历字符按照字母的unicode编码进行比较</td>
</tr>
<tr>
<td>注意：在JavaScript中只有一个值不等于它自己，他就是NaN（不是数字）console.log(NaN&#x3D;&#x3D;NaN)返回false</td>
</tr>
</tbody></table>
<ul>
<li><p>逻辑运算符（与，或，非）</p>
</li>
<li><ul>
<li>&amp;&amp;:表示逻辑与，表示结果为真才为真</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(true&amp;&amp;false)</th>
<th>false</th>
</tr>
</thead>
<tbody><tr>
<td>console.log(true&amp;&amp;true)</td>
<td>true</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li>||：表示逻辑或，表示一个为真，则为真</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(true||false)</th>
<th>true</th>
</tr>
</thead>
<tbody><tr>
<td>console.log(false||false)</td>
<td>false</td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li>!：表示逻辑非，表示取反</li>
<li>在上边两种运算符混合使用时需要注意他们的优先级，一般情况下是,||具有最低优先级，然后时&amp;&amp;，然后是比较运算符，再然后时其他运算符</li>
<li>三元运算符，由问号和冒号写成</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(true?1:2)</th>
</tr>
</thead>
<tbody><tr>
<td>console.log(false?1:2)</td>
</tr>
</tbody></table>
<ul>
<li><p>空值</p>
</li>
<li><ul>
<li>再JavaScript中使用null和undefined表示空值</li>
</ul>
</li>
<li><p>自动类型转换</p>
</li>
<li><ul>
<li>JavaScript的包容性时相当高的，几乎可以接受你给他的任何程序</li>
<li>当运算符应用不同类型的值时，JavaScript会使用一组规则自动将值转换成所需要的类型供你使用（强制类型转换）</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>console.log(8*null)–&gt;0</th>
</tr>
</thead>
<tbody><tr>
<td>console.log(“3”-1)–&gt;2</td>
</tr>
<tr>
<td>console.log(“3”+1)–&gt;31</td>
</tr>
<tr>
<td>console.log(“six”*1)–&gt;NaN</td>
</tr>
<tr>
<td>console.log(false&#x3D;&#x3D;0)–&gt;true</td>
</tr>
<tr>
<td>console.log(null&#x3D;&#x3D;undefined)–&gt;true</td>
</tr>
<tr>
<td>console.log(null&#x3D;&#x3D;0)–&gt;false</td>
</tr>
</tbody></table>
<ul>
<li><p>表达式</p>
</li>
<li><ul>
<li>生成值得代码片段称之为表达式</li>
</ul>
</li>
<li><p>绑定（变量）</p>
</li>
<li><ul>
<li>·JavaScript为了让程序中得数据保持提供了一个称为绑定（binding）或变量（variable）得东西</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>let属于JavaScript关键字表示将定义一个绑定，它得后面是绑定名称，如果我们想给它一个值，则由”&#x3D;”运算符和表达式来完成</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>let a &#x3D;   1*2</th>
</tr>
</thead>
<tbody><tr>
<td>let num &#x3D;   10;  console.log(num*num);</td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li><ul>
<li>当绑定值指向一个值时并部意味着它永远时该值，”&#x3D;”运算符随时可以更新绑定赋予绑定新值</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在JavaScript中不单单可以使用let去做绑定,var和const两个也可以用于绑定</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>var   name&#x3D;”hello”;console.log(name);</th>
</tr>
</thead>
<tbody><tr>
<td>const demo   &#x3D; “world”;console.log(demo);</td>
</tr>
<tr>
<td>console.log(name+demo);</td>
</tr>
<tr>
<td>注：1.var全称(variable)表示变量，多用于以前得JavaScript中声明绑定2.const全称（constant），表示定义一个常量绑定，只要它存在，它就一直指向相同得值</td>
</tr>
</tbody></table>
<ul>
<li><p>JavaScript语句</p>
</li>
<li><ul>
<li>JavaScript语句是发给浏览器的命令</li>
<li>这些命令的作用是告诉浏览器要做的事情</li>
</ul>
</li>
<li><p>分号</p>
</li>
<li><ul>
<li>分号用于分隔JavaScript语句</li>
<li>通常我们在每条可执行的语句结尾添加分号，代表作一句JavaScript语句的结束</li>
<li>使用分号的另一个好处就是。。。。能在一行多写点代码嘛</li>
</ul>
</li>
<li><p>JavaScript代码</p>
</li>
<li><ul>
<li>JavaScript代码是JavaScript语句的序列</li>
<li>浏览器按照编写顺序依次执行每条语句</li>
</ul>
</li>
<li><p>JavaScript代码块</p>
</li>
<li><ul>
<li>JavaScript可以分批地组合起来</li>
<li>代码块以左花括号开始，以右花括号结束</li>
<li>代码块的作用是一并执行语句序列</li>
</ul>
</li>
<li><p>JavaScript语句标识符</p>
</li>
<li><ul>
<li>JavaScript语句通常以一个语句标识符为开始，并执行该语句。</li>
<li>语句标识符是保留关键字不能作为变量名使用</li>
<li>JavaScript语句标识符（关键字）</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>语句</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>break</td>
<td>用于跳出循环</td>
</tr>
<tr>
<td>catch</td>
<td>语句块，在try语句块执行出错时执行catch语句块</td>
</tr>
<tr>
<td>continue</td>
<td>跳过循环的一个迭代</td>
</tr>
<tr>
<td>do…while</td>
<td>执行一个语句块，在条件语句为true时继续执行该语句块</td>
</tr>
<tr>
<td>for</td>
<td>在条件语句为true时，可以将代码块执行指定的次数</td>
</tr>
<tr>
<td>for…in</td>
<td>用于遍历数组或对象的属性（对数组或者对象的属性进行循环操作）</td>
</tr>
<tr>
<td>function</td>
<td>定义一个函数</td>
</tr>
<tr>
<td>if…else</td>
<td>用于基于不同的条件来执行不同的动作</td>
</tr>
<tr>
<td>return</td>
<td>退出函数</td>
</tr>
<tr>
<td>switch</td>
<td>用于基于不同条件来执行不同的动作</td>
</tr>
<tr>
<td>throw</td>
<td>抛出错误</td>
</tr>
<tr>
<td>try</td>
<td>实现错误处理，与catch一同使用</td>
</tr>
<tr>
<td>var</td>
<td>声明一个变量</td>
</tr>
<tr>
<td>while</td>
<td>当条件语句为true时，执行语句块</td>
</tr>
</tbody></table>
<ul>
<li><p>代码折行</p>
<p><img src="https://files.catbox.moe/ydhbe5.png"></p>
</li>
</ul>
<h2 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h2><ul>
<li>javascript属于弱语言，它的变量没有明确的数据类型，它的数据类型是由它存储的值自己推断出来的</li>
<li>常见数据类型</li>
</ul>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>具体描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td>能存储整数和小数类型</td>
</tr>
<tr>
<td>string</td>
<td>用单引号或双引号来声明的字符串</td>
</tr>
<tr>
<td>boolean</td>
<td>只能是两个值选择：true、false</td>
</tr>
<tr>
<td>undefined</td>
<td>变量被声明后，但未被赋值</td>
</tr>
<tr>
<td>object</td>
<td>javascript中的对象、数组和null</td>
</tr>
</tbody></table>
<ul>
<li><p>在JavaScript中可以使用typeof()函数来检查变量的返回值类型</p>
<p><img src="https://files.catbox.moe/wrq2r2.png"></p>
</li>
<li><p>JavaScript拥有动态类型，这意味着相同的变量可用作不同的类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x；<span class="comment">//x为undefined</span></span><br><span class="line"><span class="keyword">var</span>   x = <span class="number">5</span>；<span class="comment">//x为数字</span></span><br><span class="line"><span class="keyword">var</span>   x = <span class="string">&quot;hello&quot;</span>;<span class="comment">//x为字符串</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>JavaScript字符串</p>
</li>
<li><p>字符串是存储字符的变量</p>
<p>字符串可以是引号中的任意文本。可以使用单引号或者双引号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name =   <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name =   <span class="string">&#x27;tom&#x27;</span>;</span><br></pre></td></tr></table></figure>

</li>
<li><p>也可以在字符串中使用引号，只要不匹配包围字符串的引号即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> answer   = <span class="string">&quot;let&#x27;go&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> answer   = <span class="string">&quot;my name is &#x27;tom&#x27; &quot;</span>;</span><br></pre></td></tr></table></figure>

</li>
<li><p>JavaScript数字</p>
</li>
<li><p>JavaScript只有一种数字类型。数字可以带小数点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b =   <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>

</li>
<li><p>极大或极小的数字可以通过科学计数来书写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a =   <span class="number">123e5</span>;<span class="comment">//12300000  </span></span><br><span class="line"><span class="keyword">var</span> b =   <span class="number">123e-5</span>;<span class="comment">//0.00123</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>JavaScript布尔</p>
</li>
<li><ul>
<li>布尔（逻辑）只能有两个值：true或false</li>
</ul>
</li>
<li><p>布尔常用在条件测试中。这个我们将在之后详解</p>
</li>
<li><p>JavaScript数组</p>
</li>
<li><ul>
<li>详见10.8节</li>
</ul>
</li>
<li><p>JavaScript对象</p>
</li>
<li><ul>
<li><p>详见10.9节</p>
</li>
<li><p>对象由花括号分隔。在扩号内部，对象的属性以名称和值对的形式（键值对 name：value）来定义，属性由逗号分隔</p>
</li>
<li><p>对象有两种寻址方式：</p>
<p><img src="https://files.catbox.moe/9ftj31.png"></p>
</li>
</ul>
</li>
<li><p>Undefined和Null</p>
</li>
<li><p>Undefined表示变量不含值</p>
<p>Null可以通过将变量的值设置为Null来清空变量</p>
<p><img src="https://files.catbox.moe/c70gx5.png"></p>
</li>
<li><p>声明变量类型</p>
</li>
<li><ul>
<li>当声明新变量时，可以使用关键词“new”来声明其类型</li>
</ul>
</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li><p>什么是数组</p>
</li>
<li><ul>
<li>数组对象是使用单独的变量名来存储一系列相同类型的值</li>
<li>数字可以用一个变量名存储所有的值，并且可以用变量名访问任何一个值</li>
<li>数组中的每个元素都有自己的ID，以便它可以很容易地被访问到</li>
</ul>
</li>
<li><p>创建数组，有几种不同的方式</p>
</li>
<li><p>常规方式</p>
<p><img src="https://files.catbox.moe/dl7qyu.png"></p>
</li>
<li><p>简洁方式</p>
<p><img src="https://files.catbox.moe/bxwyb8.png"></p>
</li>
<li><p>字面方式</p>
<p><img src="https://files.catbox.moe/1mwch8.png"></p>
</li>
<li><p>访问数组</p>
</li>
<li><ul>
<li>通过上边的几个例子，大家应该能看出来数组是怎么访问的</li>
<li>语法：数组名[下标]</li>
</ul>
</li>
<li><ul>
<li>在数组中[0]代表数组的第一个元素，[1]则代表的是第二个元素</li>
</ul>
</li>
<li><p>来个数组式循环弹窗看看</p>
<p><img src="https://files.catbox.moe/o4xcer.png"></p>
</li>
<li><p>在一个数组中可以有不同的对象</p>
</li>
<li><ul>
<li><p>所有的JavaScript变量都是对象，数组元素是对象，函数也是对象</p>
</li>
<li><p>因此，我们可以在数组中有不同的变量类型</p>
</li>
<li><p>我们可以在一个数组中包含对象元素，函数，数组</p>
<p><img src="https://files.catbox.moe/lpu5by.png"></p>
</li>
</ul>
</li>
<li><p>数组方法和属性</p>
</li>
<li><p>使用数组对象预定义属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>    a = 数组名.<span class="property">length</span>       <span class="comment">//length元素的数量</span></span><br><span class="line"><span class="keyword">var</span>    b = 数组名.<span class="title function_">indexOf</span>(<span class="string">&quot;需要索引的字段&quot;</span>)    <span class="comment">//括号里面为索引值</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>更多的实例</p>
</li>
<li><ul>
<li><p>合并两个数组-concat()</p>
<p><img src="https://files.catbox.moe/kz1at0.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>合并三个数组-concat()</p>
<p><img src="https://files.catbox.moe/l99gtm.png"></p>
</li>
</ul>
</li>
<li><p>用数组的元素组合字符串-join()</p>
</li>
<li><ul>
<li><p>join()方法用于把数组中的所有元素放入一个字符串</p>
</li>
<li><p>元素是同过指定的分隔符分隔的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObject.<span class="title function_">join</span>(separator)</span><br><span class="line">separator：指定要使用的分隔符，如果省略改参数，则使用逗号作为分隔符</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://files.catbox.moe/5ouzax.png"></p>
</li>
</ul>
<p><img src="https://files.catbox.moe/v2dt2m.png"></p>
<p><img src="https://files.catbox.moe/0z8fu1.png"></p>
<ul>
<li><p>删除数组的最后一个元素-pop()</p>
<p><img src="https://files.catbox.moe/o76e63.png"></p>
</li>
<li><p>数组的末尾添加新的元素-push()</p>
<p><img src="https://files.catbox.moe/xaqslo.png"></p>
</li>
<li><p>将一个数组中的元素的顺序反转排序-reverse()</p>
<p><img src="https://files.catbox.moe/lnlzsb.png"></p>
</li>
<li><p>删除数组的第一个元素-shift()</p>
<p><img src="https://files.catbox.moe/uq24ic.png"></p>
</li>
<li><p>从一个数组中选择元素-slice()</p>
</li>
<li><ul>
<li><p>slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分</p>
</li>
<li><p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">stringObject.<span class="title function_">slice</span>(start,end)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><ul>
<li>返回值</li>
</ul>
</li>
<li><ul>
<li><p>一个新的字符串，包括字符串stratObject从strat开始（包括strat）到end结束（不包括end）为止的所有字符串</p>
<p><img src="https://files.catbox.moe/qnpc9e.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>数组排序（按字母顺序升序）-sort()</p>
<p><img src="https://files.catbox.moe/w4l39r.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>数字排序（按数字顺序升序）-sort()</p>
<p><img src="https://files.catbox.moe/8z6azi.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>数字排序（按数字顺序降序）-sort()</p>
<p><img src="https://files.catbox.moe/14e3wp.png"></p>
</li>
</ul>
</li>
<li><ul>
<li>在数组的第二位置添加一个元素 -splice()</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>splice()方法用于插入，删除，或者替换数组的元素</p>
</li>
<li><p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObject.<span class="title function_">splice</span>(index,howmant,element1....,element1)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>index</td>
<td>必需。规定从何处添加&#x2F;删除元素。该参数是开始插入和(或)删除的数组元素的下标，必需是数字哦</td>
</tr>
<tr>
<td>howmant</td>
<td>必需。规定应该删除多少元素。必须是数字，但可以是（0）。如果未规定此参数，则删除从index开始到原数组结尾的所有元素</td>
</tr>
<tr>
<td>element1</td>
<td>可选。规定要添加到数组的新元素。从index所指的下标处开始插入</td>
</tr>
<tr>
<td>elementN</td>
<td>可选。可向数组添加若干元素。</td>
</tr>
</tbody></table>
<ul>
<li><ul>
<li>返回值</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>如果从arrayObject中删除了元素，则返回的是含有被删除的元素的数组</li>
</ul>
</li>
</ul>
</li>
<li><p>注意：splice()方法和slice()方法的作用是不同的，splice()方法会直接对数组,行修改。</p>
</li>
<li><p>下边的这个例子就是替换了下标“1”至“3”里面的内容，包含1和3下标的内容，也就是说我把数组里的“33，22，66”替换成了“88,44”。</p>
<p><img src="https://files.catbox.moe/xh8wnu.png"></p>
</li>
<li><p>转换数组到字符串 -toString()</p>
<p><img src="https://files.catbox.moe/c5oso5.png"></p>
</li>
<li><p>在数组的开头添加新元素 -unshift()</p>
<p><img src="https://files.catbox.moe/7nddbq.png"></p>
</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li><p>JavaScript对象</p>
</li>
<li><ul>
<li>在JavaScript中，对象是拥有属性和方法的数据。</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>属性是与对象相关的值</li>
<li>方法是能够在对象上执行的动作</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><p>对象也是一个变量，但对象可以包含多个值（多个变量）</p>
<p><img src="https://files.catbox.moe/zbru2q.png"></p>
</li>
</ul>
</li>
<li><ul>
<li><p>上边这个例子中，三个值（**”Lamborghini”,999999,”black”**）赋予变量car</p>
</li>
<li><p>三个变量（”neme”,price,color）赋予变量car</p>
</li>
<li><p>JavaScript对象是变量的容器</p>
</li>
<li><p>定义JavaScript对象是可以跨越多行，空格跟换行不是必须的</p>
<p><img src="https://files.catbox.moe/1firyr.png"></p>
<p><img src="https://files.catbox.moe/8t2ieu.png"></p>
</li>
</ul>
</li>
<li><p>对象属性</p>
</li>
<li><ul>
<li>JavaScript对象是变量的容器</li>
<li>JavaScript对象是键值对的容器</li>
<li>键值对的基本写法为name:value（上边的例子就是喽）</li>
<li>键值对在JavaScript对象中统称为对象属性。</li>
<li>访问对象属性</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>可以用对象名点属性（如：person.one）</p>
</li>
<li><p>也可以用对象名[“属性”]（如：person[“one”]）</p>
<p><img src="https://files.catbox.moe/dad30x.png"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>对象方法</p>
</li>
<li><ul>
<li>对象的方法定义了一个函数，并作为对象的属性存储</li>
<li>对象方法通过添加()调用（当成函数调用）</li>
<li>下边的这个例子访问了person对象的all()方法（如果直接访问person对象的all属性，它将作为定义一个函数的字符串返回，也就是说把后边的代码直接返回，并且打印出来）</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>访问方法（例：person.all()）</p>
</li>
<li><p>访问属性（例：person.all）</p>
<p><img src="https://files.catbox.moe/trcnch.png"></p>
<p><img src="https://files.catbox.moe/gaplno.png"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JavaScript对象</title>
    <url>/2022/07/08/JavaScript%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.debug8.com%2Fstatics%2Fuploads%2F2020%2F08%2F15%2F1597460167384632.jpeg&refer=http%3A%2F%2Fwww.debug8.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659869298&t=98ffecf7bc2187582206328f237905ec" alt="img"></p>
<span id="more"></span>

<h1 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h1><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><ul>
<li><p>对象是一种复合值，它汇聚多个值（原始值或者是其它对象），并且允许我们按照<br>名称存储和获取这些值。</p>
</li>
<li><p>对象是一个属性无序的集合，每个属性都有自己的名字和值，只有在对象中，其使<br>用起来与顺序无关，只需要打点即可调用。</p>
</li>
<li><p>在JavaScript中对象可以从其它对象继承属性</p>
</li>
<li><p>JavaScript对象是动态的，即可以动态的添加和删除对象属性</p>
<p>​</p>
</li>
</ul>
<h2 id="认识对象"><a href="#认识对象" class="headerlink" title="认识对象"></a>认识对象</h2><ul>
<li><p>创建自定义对象我们可以通过创建Object实例来实现，然后再给他添加属性和方法<br>（函数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    person.<span class="property">name</span> = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    person.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">    person.<span class="property">job</span> = <span class="string">&quot;Teacher&quot;</span>; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;，年龄&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁，他的工作是：&quot;</span>+<span class="variable language_">this</span>.<span class="property">job</span>);</span><br><span class="line">    person.<span class="property">work</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">let</span> person = &#123;</span><br><span class="line">    name = <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age = <span class="number">18</span>,</span><br><span class="line">    job = <span class="string">&quot;Teacher&quot;</span>,</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;，年龄&quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>+<span class="string">&quot;岁，他的工作</span></span><br><span class="line"><span class="string">是：&quot;</span>+<span class="variable language_">this</span>.<span class="property">job</span>);</span><br><span class="line">    <span class="title function_">work</span>(<span class="params"></span>)&#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="属性的类型"><a href="#属性的类型" class="headerlink" title="属性的类型"></a>属性的类型</h2><ul>
<li>JavaScript使用了一些内部特性来描述属性的特征，这些特性由JavaScript实现引<br>擎的规范定义的，所以开发者不能直接在JavaScript中访问这些访问。</li>
</ul>
<h3 id="属性的特性分两种"><a href="#属性的特性分两种" class="headerlink" title="属性的特性分两种"></a>属性的特性分两种</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**数据属性**</span><br></pre></td></tr></table></figure>

<ul>
<li><p>【Configurable】：表示属性是否可以通过delete删除并重新定义，</p>
<p>是否可以修改它的特性，以及是否可以把它改为访问器属性。其默认情况下为true</p>
</li>
<li><p>【Enumerable】：表示属性是否可以通过for-in循环返回，默认情况</p>
<p>也为true</p>
</li>
<li><p>【Writable】：表示属性的值是否可以被修改，其默认值为true</p>
</li>
<li><p>【Value】：包含属性的实际值，其默认值为undefined</p>
</li>
</ul>
<br/>

<ul>
<li><p>这些属性特性我们在定义对象时并不需要显式的添加前三个，而Value特性<br>也会被我们定义，如：name:”zhangsan</p>
</li>
<li><p>如果想要修改这些默认特性，就必须使用Object.defineProperty()方<br>法，这个方法在使用时接收三个参数：要给其添加属性的对象，属性的名<br>称，以及一个描述特性的对象及其参数</p>
</li>
<li><p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>:<span class="string">&quot;王麻子&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">    person.<span class="property">name</span> = <span class="string">&quot;张金条&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">    <span class="comment">// configurable:true,</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>:<span class="string">&quot;王麻子&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">    <span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><ul>
<li><p>访问器属性不包含数据值，它包含一个获取（getter）函数以及一个设置<br>（setter）函数，不过这两个函数并非必须函数。</p>
</li>
<li><p>在读取访问器属性时，程序会自个调用获取函数，也就是说获取函数的主<br>要任务就是返回一个有效的值</p>
</li>
<li><p>访问器属性也有4个特性用了描述它们的行为</p>
<p>【Configurable】，默认值为true，表示能否通过delete删除属性从而<br>重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性<br>【Enumerable】，默认值为true，能否通过for-in循环返回属性<br>【get】读取这个属性时调用的函数 getter函数<br>【set】在为这个属性赋值时调用的函数 setter函数</p>
</li>
<li><p>以上这些属性也是不能直接定义的，必须通过Object-defineProperty()</p>
</li>
<li><p>示例</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">let</span> book = &#123;</span><br><span class="line">       <span class="attr">name</span>:<span class="string">&quot;七侠五义&quot;</span>,</span><br><span class="line">       <span class="attr">price</span>:<span class="number">1</span></span><br><span class="line">     &#125;;</span><br><span class="line">  </span><br><span class="line">     book.<span class="property">name</span> = <span class="string">&quot;斗破苍穹&quot;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">name</span>);</span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(book,<span class="string">&quot;name&quot;</span>,&#123;</span><br><span class="line">     <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="title function_">set</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = newValue;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="对象合并"><a href="#对象合并" class="headerlink" title="对象合并"></a>对象合并</h2><ul>
<li><p>在开发JavaScript时我们会把多个对象合并使用</p>
</li>
<li><p>具体来说就是把一个对象的所有属性复制到了目标对象上，这种方式也被称之为混<br>入，通过对象的合并我们可以增强对象功能</p>
</li>
<li><p>JavaScript专门为合并对象提供了一个Object.assign()方法，这个方法接收一个目<br>标对象和一个或多个其它对象（源对象），然后将每个源对象中自有属性复制到目<br>标对象</p>
</li>
<li><p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//目标对象</span></span><br><span class="line">    <span class="title class_">Obj1</span> = &#123;<span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//源对象</span></span><br><span class="line">    <span class="title class_">Obj2</span> = &#123;<span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//把2复制到目标对象中</span></span><br><span class="line">    result = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Obj1</span>,<span class="title class_">Obj2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Obj1</span> === result)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Obj2</span> === result)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">   </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="增强的对象语法"><a href="#增强的对象语法" class="headerlink" title="增强的对象语法"></a>增强的对象语法</h2><ul>
<li><p>ES6位对象定义了很多定义对象及其操作对象的语法特性，这些特性可以极大程度<br>提高对象处理的方便程度</p>
</li>
<li><p>属性值得简写</p>
<p>在给对象添加值时我们可以引用变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">let</span> username= <span class="string">&quot;sanlvzi&quot;</span>;</span><br><span class="line"> <span class="keyword">let</span> person = &#123;</span><br><span class="line"> <span class="attr">username</span>:username</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">还能简写（以下这种情况必须时变量名域对象的属性名相同才可以这么写）</span><br></pre></td></tr></table></figure></li>
</ul>
<br/>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">let</span> username= <span class="string">&quot;sanlvzi&quot;</span>;</span><br><span class="line">   username</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">let</span> person = &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul>
<li><p>对象解构是从对象中检索属性键的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>:<span class="string">&quot;张麻子&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>传统取值来说，我们可以使用打点表示法或者是下标法来从对象中检索值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> username = user.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">let</span> age = user[<span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上这种方法是没有任何问题的，但是就当属性较多时，我们的代码中会产生<br>较多的重复代码，然后ES6就搞出来了一个技术叫做对象解构</p>
</li>
<li><p>对象解构也叫解构赋值，可以快速的获取值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = user;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="使用解构从嵌套的对象中获取值"><a href="#使用解构从嵌套的对象中获取值" class="headerlink" title="使用解构从嵌套的对象中获取值"></a>使用解构从嵌套的对象中获取值</h3><ul>
<li><p>嵌套即一个对象中还有对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Marry&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">27</span>,</span><br><span class="line">   <span class="attr">friend</span>:&#123;</span><br><span class="line">   <span class="attr">friend_1_Phone</span>:<span class="number">110</span>,</span><br><span class="line">   <span class="attr">address</span>:<span class="string">&quot;文景路凤城四路...&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用传统方式获取朋友对象的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Person</span>.<span class="property">friend</span>.<span class="property">friend_1_Phone</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>换成解构赋值，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">   <span class="title class_">Pname</span>:<span class="string">&quot;Marry&quot;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">   <span class="title class_">Uname</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="title class_">Uage</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//在解构时可以加上其它属性值</span></span><br><span class="line">   <span class="keyword">let</span> &#123;<span class="title class_">Pname</span>,<span class="title class_">Page</span> = <span class="number">18</span>&#125; = <span class="title class_">Person</span>;</span><br><span class="line">   <span class="keyword">let</span> &#123;<span class="title class_">Uname</span>,<span class="title class_">Uage</span> = <span class="number">18</span>&#125; = <span class="title class_">User</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Pname</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="还可以给JavaScript解构对象创建别名"><a href="#还可以给JavaScript解构对象创建别名" class="headerlink" title="还可以给JavaScript解构对象创建别名"></a>还可以给JavaScript解构对象创建别名</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line"> <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">let</span>&#123;<span class="attr">age</span>:userAge&#125; =<span class="title class_">User</span>;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(userAge) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="还可以使用对象解构处理动态名称属性"><a href="#还可以使用对象解构处理动态名称属性" class="headerlink" title="还可以使用对象解构处理动态名称属性"></a>还可以使用对象解构处理动态名称属性</h3><ul>
<li><p>我们在开发时经常会将API的一些响应数据作为Javascript对象处理，这些对象</p>
<p>可能包含一些动态数据，我们在客户端使用这些数据时可能连属性键时啥都不<br> 知道</p>
</li>
<li><p>我们可以将键当成时参数据传递，也就是说我们可以编写一个返回User对象属<br>性值得函数，然后我们可以接收参数，让JS从对象中去检索</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getProperty</span>(<span class="params">key</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> &#123;[key]:returnValue&#125; = <span class="title class_">User</span>;</span><br><span class="line">      <span class="keyword">return</span> returnValue;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> address = <span class="title function_">getProperty</span>(<span class="string">&#x27;address&#x27;</span>);</span><br><span class="line">   <span class="keyword">let</span> name = <span class="title function_">getProperty</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(address,name);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="在函数参数和返回值中解构对象"><a href="#在函数参数和返回值中解构对象" class="headerlink" title="在函数参数和返回值中解构对象"></a>在函数参数和返回值中解构对象</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解构赋值传参</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">&#123;name,age&#125;</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fun</span>(<span class="title class_">User</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  解构函数对象返回值</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果一个函数的返回值是一个对象，我们可以直接解构对象为变量</span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>, <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">User</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span>&#123;age&#125; = <span class="title function_">fun</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span>&#123;age&#125; = <span class="title function_">fun</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure>

<p>  在循环中使用对象解构</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">User</span> = [</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;张三&quot;</span> ,</span><br><span class="line">     <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span>:<span class="number">19</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span>:<span class="number">20</span></span><br><span class="line">   &#125;</span><br><span class="line">   ];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span>&#123;name,age&#125; <span class="keyword">of</span> <span class="title class_">User</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用其它方式创建对象"><a href="#使用其它方式创建对象" class="headerlink" title="使用其它方式创建对象"></a>使用其它方式创建对象</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul>
<li><p>工厂模式是程序中应用较为普遍的一种设计模式</p>
</li>
<li><p>在这里用于抽象对象创建的过程，按照特定的接口创建方式创建对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个方法，该方法用来规定创建对象的基本属性及行为</span></span><br><span class="line"> <span class="comment">//属性我们以方法的参数形式传递进来，让方法内部对这些属性进行处理</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age,job</span>) &#123;</span><br><span class="line"> <span class="comment">//创建一个Object对象</span></span><br><span class="line"> <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> <span class="comment">//给obj对象开始赋值</span></span><br><span class="line"> obj.<span class="property">name</span> = name;</span><br><span class="line"> obj.<span class="property">age</span> = age;</span><br><span class="line"> obj.<span class="property">job</span> = job;</span><br><span class="line"> obj.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;，吃饭时DuangDuang的&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> person_1 = <span class="title function_">createPerson</span>(<span class="string">&quot;张金条&quot;</span>,<span class="number">99</span>,<span class="string">&quot;修空调&quot;</span>);</span><br><span class="line"> <span class="keyword">let</span> person_2 = <span class="title function_">createPerson</span>(<span class="string">&quot;张银条&quot;</span>,<span class="number">98</span>,<span class="string">&quot;挖坑&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="构造函数方式"><a href="#构造函数方式" class="headerlink" title="构造函数方式"></a>构造函数方式</h3><ul>
<li><p>以函数的形式为自己的对象定义属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,job</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;干饭&quot;</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//要创建对象就得new，也就是说通过new关键字调用Person方法来创建Person对象</span></span><br><span class="line">   <span class="keyword">let</span> person_1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张铜条&quot;</span>,<span class="number">88</span>,<span class="string">&quot;摆烂&quot;</span>);</span><br><span class="line">   <span class="keyword">let</span> person_2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张铁条&quot;</span>,<span class="number">90</span>,<span class="string">&quot;技师&quot;</span>);</span><br><span class="line">   person_1.<span class="title function_">eat</span>();</span><br><span class="line">   person_2.<span class="title function_">eat</span>();</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析</p>
<p>在内存中创建一个新对象，每new一次就会创建一个新的对象</p>
<p>这个对象在方法内部只是为将要形成的对象属性指定了属性值和行为</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JavaScript BOM与DOM</title>
    <url>/2022/07/08/JavaScript-BOM%E4%B8%8EDOM/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.mk2048.com%2Fweb_upload%2Fblog_imgs%2F9%2Fhttps___user-gold-cdn-xitu-io_2018_5_29_163a9401f45c8ab1_w-1280_h-720_f-jpeg_s-54086.gif&refer=http%3A%2F%2Fwww.mk2048.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659878697&t=22475cd2413ac8bfc0fc92f294e20a0b" alt="img"></p>
<span id="more"></span>

<h1 id="JavaScript-BOM与DOM"><a href="#JavaScript-BOM与DOM" class="headerlink" title="JavaScript BOM与DOM"></a>JavaScript BOM与DOM</h1><h2 id="BOM（borwser-object-Model）"><a href="#BOM（borwser-object-Model）" class="headerlink" title="BOM（borwser object Model）"></a>BOM（borwser object Model）</h2><h4 id="浏览器对象模型"><a href="#浏览器对象模型" class="headerlink" title="浏览器对象模型"></a>浏览器对象模型</h4><ul>
<li><ul>
<li>使用对象描述浏览器的各个部分</li>
<li>BOM提供与浏览器窗口交互的对象</li>
<li>BOM主要用于管理窗口与窗口之间的通讯，所以核心对象是窗口（window）</li>
</ul>
</li>
<li><p>BOM里有什么</p>
</li>
<li><ul>
<li><p>图示</p>
<p><img src="https://files.catbox.moe/ccpeyl.png"></p>
</li>
</ul>
</li>
<li><ul>
<li>与浏览器进行交互的一些对象</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>移动，调整浏览器大小的window对象</li>
<li>用于导航的location对象history</li>
<li>获取浏览器，用户屏幕信息的navigator与screen对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h5><ul>
<li><ul>
<li>open()方法用于打开一个新窗口或查找一个窗口</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>语法</li>
<li>window.open(url,name,feature,replace)</li>
</ul>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>声明要在新窗口中显示文档的url</td>
</tr>
<tr>
<td>name</td>
<td>该字符声明了新窗口的名称。这个名称可以用作标记    <a> 和 <form> 的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open()    方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</td>
</tr>
<tr>
<td>feature</td>
<td>声明了新窗口要显示的标准浏览器的特征</td>
</tr>
<tr>
<td>replace</td>
<td>一个可选的布尔值。规定了装载到窗口的     URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目。false - URL 在浏览历史中创建新的条目。</td>
</tr>
</tbody></table>
<ul>
<li><p>案例 打开新窗口控制其外观样式</p>
<p><img src="https://files.catbox.moe/9cmg9b.png"></p>
</li>
<li><p>窗口特征表</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>channelmode&#x3D;yes|no|1|0</th>
<th>是否使用剧院模式显示窗口。默认为    no。</th>
</tr>
</thead>
<tbody><tr>
<td>directories&#x3D;yes|no|1|0</td>
<td>是否添加目录按钮。默认为    yes。</td>
</tr>
<tr>
<td>fullscreen&#x3D;yes|no|1|0</td>
<td>是否使用全屏模式显示浏览器。默认是    no。处于全屏模式的窗口必须同时处于剧院模式。</td>
</tr>
<tr>
<td>height&#x3D;pixels</td>
<td>窗口文档显示区的高度。以像素计。</td>
</tr>
<tr>
<td>left&#x3D;pixels</td>
<td>窗口的 x    坐标。以像素计。</td>
</tr>
<tr>
<td>location&#x3D;yes|no|1|0</td>
<td>是否显示地址字段。默认是    yes。</td>
</tr>
<tr>
<td>menubar&#x3D;yes|no|1|0</td>
<td>是否显示菜单栏。默认是    yes。</td>
</tr>
<tr>
<td>resizable&#x3D;yes|no|1|0</td>
<td>窗口是否可调节尺寸。默认是    yes。</td>
</tr>
<tr>
<td>scrollbars&#x3D;yes|no|1|0</td>
<td>是否显示滚动条。默认是    yes。</td>
</tr>
<tr>
<td>status&#x3D;yes|no|1|0</td>
<td>是否添加状态栏。默认是    yes。</td>
</tr>
<tr>
<td>titlebar&#x3D;yes|no|1|0</td>
<td>是否显示标题栏。默认是    yes。</td>
</tr>
<tr>
<td>toolbar&#x3D;yes|no|1|0</td>
<td>是否显示浏览器的工具栏。默认是    yes。</td>
</tr>
<tr>
<td>top&#x3D;pixels</td>
<td>窗口的 y    坐标。</td>
</tr>
<tr>
<td>width&#x3D;pixels</td>
<td>窗口的文档显示区的宽度。以像素计。</td>
</tr>
</tbody></table>
<ul>
<li><p>setInterval()每隔指定的毫秒运行指定的代码&#x2F;函数</p>
</li>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/gezs9p.png"></p>
</li>
<li><p>setTimeout()经过指定毫秒数运行一次指定的代码&#x2F;函数</p>
</li>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/r0dclo.png"></p>
</li>
<li><p>location地址栏对象</p>
</li>
<li><ul>
<li>href：设置或获取整个URL为字符串</li>
</ul>
</li>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/rk4u5p.png"></p>
</li>
<li><p>reload()：重新加载</p>
</li>
<li><p>replace():用新文档替换当前文档</p>
</li>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/e2r3lh.png"></p>
</li>
</ul>
<h5 id="屏幕对象（Screen）用来获取电脑屏幕的一些数据"><a href="#屏幕对象（Screen）用来获取电脑屏幕的一些数据" class="headerlink" title="屏幕对象（Screen）用来获取电脑屏幕的一些数据"></a>屏幕对象（Screen）用来获取电脑屏幕的一些数据</h5><ul>
<li><ul>
<li>availHeight：获取系统屏幕的工作区高度（浏览器的页面高度）</li>
</ul>
</li>
<li><ul>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/k600si.png"></p>
</li>
</ul>
</li>
<li><p>availWidth：获取系统屏幕的工作区宽度（浏览器页面宽度）</p>
</li>
<li><p>height：获取屏幕的垂直分辨率</p>
</li>
<li><p>width：获取屏幕的水平分辨率 </p>
</li>
<li><ul>
<li><p>案例</p>
<p><img src="https://files.catbox.moe/oxiqgh.png"></p>
</li>
</ul>
</li>
</ul>
<h2 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h2><h4 id="文档对象模型（document）"><a href="#文档对象模型（document）" class="headerlink" title="文档对象模型（document）"></a>文档对象模型（document）</h4><ul>
<li>当一个html页面加载到浏览器的时候，那么浏览器会为每个标签都创建一个对应的对象，描述该标签的所有信息</li>
<li>我们此时所看到的网页信息实际上就是看到了这些标签的对象信息，如果我们需要操作页面的数据，我们就可以通过这些标签对象进行操作</li>
<li>图例</li>
<li><img src="https://files.catbox.moe/29phbz.png"></li>
</ul>
<h4 id="用来获取页面节点的方法"><a href="#用来获取页面节点的方法" class="headerlink" title="用来获取页面节点的方法"></a>用来获取页面节点的方法</h4><ul>
<li><p>获取页面的所有节点：document.all；</p>
</li>
<li><p>nodeName:节点名字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>    elements =<span class="variable language_">document</span>.<span class="property">all</span>;</span><br><span class="line"><span class="title function_">alert</span>(elements);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;elements.<span class="property">length</span>;index++)&#123;</span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&quot;节点名：&quot;</span>+elements[index].<span class="property">nodeName</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>通过标签属性找节点</p>
</li>
<li><ul>
<li><p>document.getElementById(“标签属性id”);</p>
</li>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;test&quot;</span>&gt;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>通过标签名获取节点</p>
</li>
<li><ul>
<li><p>document.getElementsByTagName(标签名);</p>
</li>
<li><p>注：返回的是一个数组</p>
</li>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">     <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>通过标签的Name属性获取节点</p>
</li>
<li><ul>
<li><p>document.getElementByName(“标签的name属性值”);</p>
</li>
<li><p>注：返回的是一个数组</p>
</li>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div name=<span class="string">&quot;ElName&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;ElName&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>通过关系找节点</p>
</li>
<li><ul>
<li>document可以通过一个节点，找到与它有关的节点</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>parentNode：获取当前元素的父节点</p>
</li>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span>    f = a.<span class="property">parentNode</span>;</span><br><span class="line">    <span class="title function_">alert</span>(f);</span><br><span class="line">    f.<span class="property">innerHTML</span>=<span class="string">&quot;找到我了&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>childNodes：获取当前元素的所有下一级子元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="keyword">var</span>    all = a.<span class="property">childNodes</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span>    index = <span class="number">0</span>;index&lt;all.<span class="property">length</span>;index++)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(all[index].<span class="property">nodeName</span>);</span><br><span class="line">    <span class="keyword">if</span>(all[index].<span class="property">nodeType</span>==<span class="number">1</span>)&#123;</span><br><span class="line">       all[index].<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>nodeType常数值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Node.ELEMENT_NODE</td>
<td>1</td>
<td>元素节点</td>
</tr>
<tr>
<td>Node.ATTRIBUTE_NODE</td>
<td>2</td>
<td>属性节点</td>
</tr>
<tr>
<td>Node.TEXT_NODE</td>
<td>3</td>
<td>文本节点</td>
</tr>
<tr>
<td>Node.CDATA_SECTION_NODE</td>
<td>4</td>
<td>字符数据节点（文本不会被解析器解析）</td>
</tr>
<tr>
<td>Node.ENTITY_REFERENCE_NODE</td>
<td>5</td>
<td>实体引用节点</td>
</tr>
<tr>
<td>Node.ENTITY_NODE</td>
<td>6</td>
<td>实体节点</td>
</tr>
<tr>
<td>Node.PROCESSING_INSTRUCTION_NODE</td>
<td>7</td>
<td>处理指令节点</td>
</tr>
<tr>
<td>Node.COMMENT_NODE</td>
<td>8</td>
<td>注释节点</td>
</tr>
<tr>
<td>Node.DOCUMENT_NODE</td>
<td>9</td>
<td>文档节点（DOM树的根节点）</td>
</tr>
<tr>
<td>Node.DOCUMENT_TYPE_NODE</td>
<td>10</td>
<td>向为文档定义的实体提供接口</td>
</tr>
<tr>
<td>Node.DOCUMENT_FRAGMENT_NODE</td>
<td>11</td>
<td>表示邻接节点和它们的子树。</td>
</tr>
<tr>
<td>Node.NOTATION_NODE</td>
<td>12</td>
<td>代表一个符号在DTD中的声明</td>
</tr>
</tbody></table>
<ul>
<li><p>firstChild：获取当前节点的第一个子节点</p>
</li>
<li><p>lastChild：获取当前节点的最后一个字节点</p>
</li>
<li><p>nextElementSibling：获取当前节点的下一个节点（兄弟节点）</p>
</li>
<li><p>previousElementSibling：获取当前节点的上一个节点（兄弟节点）</p>
</li>
<li><p>创建，删除，插入节点</p>
</li>
<li><ul>
<li><ul>
<li>创建：var 节点 &#x3D;  document.creatElement(“标签名”);创建新元素节点</li>
<li>节点 .setAttribute(“属性名”,”属性值”);</li>
<li>节点.appendChild(e);将某个节点添加到该节点的最后位置</li>
<li>节点.insertBefore(e,child);将某个新节点添加到该节点中，某个子节点之前</li>
<li>节点.removeChild(要删除的子节点)；删除指定的直接点</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>节点必须为直接父节点</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>    trNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> tdNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span><br><span class="line">trNode.<span class="title function_">appendChild</span>(tdNode);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>利用节点操作css</p>
</li>
<li><ul>
<li>我们可以通过上边获取节点的方式获取到节点，我们可以通过节点对象去操作标签的的样式</li>
<li>语法</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>节点.style.要操作的样式&#x3D;”值”;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="JavaScript中常用的事件"><a href="#JavaScript中常用的事件" class="headerlink" title="JavaScript中常用的事件"></a>JavaScript中常用的事件</h4><ul>
<li><p>js有可以通过某些方式触发函数的执行，我们把这种方式称之为事件</p>
</li>
<li><p>点击事件（onclick()）</p>
</li>
<li><ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span>    <span class="title function_">sp</span>(<span class="params">elementid</span>)&#123;</span><br><span class="line"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(elementid);</span><br><span class="line">a.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>    <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">nzmd</span>=<span class="string">&quot;ElName&quot;</span>    <span class="attr">style</span>=<span class="string">&quot;height:100px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">p</span>    <span class="attr">id</span>=<span class="string">&quot;elp&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sp(&#x27;elp&#x27;)&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;ela&quot;</span>    <span class="attr">onclick</span>=<span class="string">&quot;sp(&#x27;ela&#x27;)&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>鼠标进入事件（onmouseover(),onmousemove()）</p>
</li>
<li><p>鼠标离开事件（onmouseout()）</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.box</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.boxOne</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background-color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.boxTwo</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background-color</span>: aqua;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">idName</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//根据id获取要显示的元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idName);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        el.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">hide</span>(<span class="params">idName</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idName);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        el.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--悬停事件：鼠标进入元素后触发--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--鼠标离开事件：鼠标离开元素后触发--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;show(&#x27;one&#x27;)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;hide(&#x27;one&#x27;)&quot;</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;show(&#x27;two&#x27;)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;hide(&#x27;two&#x27;)&quot;</span>&gt;</span>导航二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box boxOne&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;show(&#x27;one&#x27;)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;hide(&#x27;one&#x27;)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box boxTwo&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;show(&#x27;two&#x27;)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;hide(&#x27;two&#x27;)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>获取焦点（onfocus()）</p>
</li>
<li><p>失去焦点（onblur()）</p>
</li>
<li><ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span>    <span class="title function_">of</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;eli&quot;</span>);</span><br><span class="line">   a.<span class="property">value</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>    <span class="title function_">ob</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;eli&quot;</span>);</span><br><span class="line">   a.<span class="property">value</span>=<span class="string">&quot;有字&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span>    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;of()&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;ob()&quot;</span>    <span class="attr">id</span>=<span class="string">&quot;eli&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;eli&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    a.<span class="property">onfocus</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        a.<span class="property">placeholder</span>=<span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  a.<span class="property">onblur</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      a.<span class="property">placeholder</span>=<span class="string">&quot;有字&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span>    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;eli&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;hello&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>滚动事件(onscroll())</p>
</li>
<li><ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">               #test&#123;</span><br><span class="line"><span class="attr">width</span>:<span class="number">100</span>%;</span><br><span class="line"><span class="attr">height</span>:100px;</span><br><span class="line"><span class="attr">overflow</span>:scroll;</span><br><span class="line"><span class="attr">border</span>:1px    solid black;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span>    a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">a.<span class="property">onscroll</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">a.<span class="property">innerHTML</span>=<span class="string">&quot;aaaaaa&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>    <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">               啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>键盘按下并松开（onkeypress()）</p>
</li>
<li><p>键盘按下事件（onkeydown()）</p>
</li>
<li><ul>
<li>onkeypress  和 onkeydown 是有区别，下面将讲解 onkeypress 与 onkeydown 事件的区别。 </li>
<li>onkeypress  事件在用户按下并放开任何字母数字键时发生。但是系统按钮（例如：箭头键、功能键）无法得到识别。 </li>
<li>onkeydown  事件在用户按下任何键盘键（包括系统按钮）时发生。 </li>
<li>具体区别： </li>
<li>\1.  一个放开一个没有放开，onkeydown 先于 onkeypress 发生。 </li>
<li>2.onkeypress  无法识别系统按钮。 </li>
<li>2.onkeydown  捕获的 keyCode 不区分字母大小，而 onkeypress 区分。</li>
</ul>
</li>
<li><p>键盘抬起事件（onkeyup()）</p>
</li>
<li><ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txt&quot;</span>).<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;键盘按下了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;txt&quot;</span>).<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;键盘抬起了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
<li><p>keyCode获取按下的键</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>数字值</strong></th>
<th><strong>实际键值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>48到57</td>
<td>0到9</td>
</tr>
<tr>
<td>65到90</td>
<td>a到z（A到Z）</td>
</tr>
<tr>
<td>112到135</td>
<td>F1到F12</td>
</tr>
<tr>
<td>8</td>
<td>BackSpace（退格）</td>
</tr>
<tr>
<td>9</td>
<td>Tab</td>
</tr>
<tr>
<td>13</td>
<td>Enter（回车）</td>
</tr>
<tr>
<td>20</td>
<td>Caps_Lock（大写锁定）</td>
</tr>
<tr>
<td>32</td>
<td>Space（空格键）</td>
</tr>
<tr>
<td>37</td>
<td>Left（左箭头）</td>
</tr>
<tr>
<td>38</td>
<td>Up（上箭头）</td>
</tr>
<tr>
<td>39</td>
<td>Right（右箭头）</td>
</tr>
<tr>
<td>40</td>
<td>Down（下箭头）</td>
</tr>
</tbody></table>
<ul>
<li><p>案例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//页面的任何的位置.按下键盘,获取按键的值</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (e.<span class="property">keyCode</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">81</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下的是Q&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">87</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下的是W&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">69</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下的是E&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">82</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;您按下的是R&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>onmousedown &#x2F; onmouseup  鼠标按下&#x2F;抬起事件</p>
</li>
<li><ul>
<li>当鼠标左键或右键按下或者抬起的时候触发</li>
<li>按下或抬起滚动轮也会触发，滑动滚动轮不能触发</li>
<li>如果鼠标比较高级，有其他按键的情况下，按下或抬起也会触发</li>
<li>案例</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-tag">div</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">background-color</span>: pink;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dv&quot;</span>).<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标按下了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dv&quot;</span>).<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标抬起了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>html基础（二)(html5)</title>
    <url>/2022/07/15/html%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C)(html5)/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.iisp.com%2Fimage%2F20161011%2F20161011180825_78244.jpg&refer=http%3A%2F%2Fimg.iisp.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659877024&t=24bae5fadeb346539de3c527885be3df" alt="img"></p>
<span id="more"></span>

<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="新增元素"><a href="#新增元素" class="headerlink" title="新增元素"></a>新增元素</h2><h4 id="新增的结构元素"><a href="#新增的结构元素" class="headerlink" title="新增的结构元素"></a>新增的结构元素</h4><ul>
<li>&lt;section&gt;元素</li>
</ul>
<p>&lt;section&gt;元素表示页面中的内容区块，如：页眉，页脚，章节等部分</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>区域一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是区域一的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>区域二<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是区域二的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;article&gt;元素</li>
</ul>
<p>&lt;article&gt;元素表示页面中的一块与上下文不相关的独立内容，如：新闻页中诸多文章中的某篇文章</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>两个“万岁”<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>“伟大、光荣、正确的中国共产党万岁！”<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>“伟大、光荣、英雄的中国人民万岁！”<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;aside&gt;元素</li>
</ul>
<p>&lt;aside&gt;表示&lt;article&gt;元素的内容之外的，它的内容应该与附近内容相关</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>神州十二号飞船成功升空<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>飞船抵达中国空间站<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。</span><br><span class="line">    通过使用最先进的快速交会对接自动化技术</span><br><span class="line">    这一切都要归功于从一次次太空飞行中总结的的经验。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;header&gt;元素</li>
</ul>
<p>&lt;header&gt;元素表示页面中的一个内容块或整个页面的标题</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>飞船抵达中国空间站<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。</span><br><span class="line">      通过使用最先进的快速交会对接自动化技术</span><br><span class="line">      这一切都要归功于从一次次太空飞行中总结的的经验。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;footer&gt;元素</li>
</ul>
<p>&lt;footer&gt;元素表示整个页面或页面中一个区域内的脚注，一般包含作者的基本信息</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;copy;</span>环球网<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">p</span>&gt;</span>发表时间：7-12<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;nav&gt;元素</li>
</ul>
<p>&lt;nav&gt;元素通常在内嵌套&lt;a&gt;标签表示页面的导航链接部分</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/html/&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/css/&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/js/&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/jquery/&quot;</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>&lt;video&gt;元素</p>
</li>
<li><ul>
<li>&lt;video&gt;元素用来插入视频</li>
<li>&lt;video&gt;元素仅支持MP4，WebM，Ogg视频格式</li>
<li>元素属性表：</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.runoob.com/tags/att-video-autoplay.html">autoplay</a></td>
<td>autoplay</td>
<td>如果出现该属性，则视频在就绪后马上播放。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-video-controls.html">controls</a></td>
<td>controls</td>
<td>如果出现该属性，则向用户显示控件，比如播放按钮。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-video-height.html">height</a></td>
<td>pixels</td>
<td>设置视频播放器的高度。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-video-loop.html">loop</a></td>
<td>loop</td>
<td>如果出现该属性，则当媒介文件完成播放后再次开始播放。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-video-muted.html">muted</a></td>
<td>muted</td>
<td>如果出现该属性，视频的音频输出为静音。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-video-poster.html">poster</a></td>
<td>URL</td>
<td>规定视频正在下载时显示的图像，直到用户点击播放按钮。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-video-preload.html">preload</a></td>
<td>autometadatanone</td>
<td>如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-video-src.html">src</a></td>
<td>URL</td>
<td>要播放的视频的 URL。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-video-width.html">width</a></td>
<td>pixels</td>
<td>设置视频播放器的宽度。</td>
</tr>
</tbody></table>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">   您的浏览器不支持 HTML5 video 标签。</span><br><span class="line"> <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>&lt;audio&gt;元素</p>
</li>
<li><ul>
<li>&lt;audio&gt;元素用来插入音频</li>
<li>&lt;audio&gt;元素仅支持Ogg和MP3格式</li>
<li>元素属性表</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.runoob.com/tags/att-audio-autoplay.html">autoplay</a></td>
<td>autoplay</td>
<td>如果出现该属性，则音频在就绪后马上播放。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-audio-controls.html">controls</a></td>
<td>controls</td>
<td>如果出现该属性，则向用户显示音频控件（比如播放&#x2F;暂停按钮）。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-audio-loop.html">loop</a></td>
<td>loop</td>
<td>如果出现该属性，则每当音频结束时重新开始播放。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-audio-muted.html">muted</a></td>
<td>muted</td>
<td>如果出现该属性，则音频输出为静音。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-audio-preload.html">preload</a></td>
<td>autometadatanone</td>
<td>规定当网页加载时，音频是否默认被加载以及如何被加载。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-audio-src.html">src</a></td>
<td><em>URL</em></td>
<td>规定音频文件的 URL。</td>
</tr>
</tbody></table>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;music.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;music.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器不支持 audio 元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;mark&gt;元素</li>
</ul>
<p>&lt;mark&gt;元素主要用来在视觉上向用户呈现哪些需要突出显示或高亮显示的文字，一般用在搜索结果中向用户高亮显示搜索关键词</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>神舟十二号航天员乘组圆满完成空间站阶段<span class="tag">&lt;<span class="name">mark</span>&gt;</span>首次出舱<span class="tag">&lt;/<span class="name">mark</span>&gt;</span>活动全部既定任务<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;ruby&gt;元素</li>
</ul>
<p>&lt;ruby&gt;表示中文注音或字符</p>
<ul>
<li>&lt;rt&gt;元素</li>
</ul>
<p>&lt;rt&gt;元素与&lt;ruby&gt;配合使用用来解释或发音</p>
<ul>
<li>&lt;rp&gt;元素</li>
</ul>
<p>&lt;rp&gt;元素与&lt;ruby&gt;一起使用，以定义不支持&lt;ruby&gt;元素的浏览器显示内容，以括号的形式出现如：汉字(Han Zi)</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span><br><span class="line">  汉 <span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>Han<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line">  字 <span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>zi<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;details&gt;元素</li>
</ul>
<p>&lt;details&gt;元素表示用户要求得到的细节信息，与&lt;summary&gt;配合使用，&lt;summary&gt;提供标题或图例，用户点击标题时，会显示户细节信息，&lt;summary&gt;元素应该是&lt;details&gt;元素的第一个元素</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">summary</span>&gt;</span>空间站<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">        空间站（space station）又称太空站、航天站。</span><br><span class="line">      	是一种在近地轨道长时间运行、可供多名航天员巡访、长期工作和生活的载人航天器。</span><br><span class="line">      	空间站分为单模块空间站和多模块空间站两种。</span><br><span class="line">      	单模块空间站可由航天运载器一次发射入轨，多模块空间站则由航天运载器分批将各模块送入轨道，在太空中将各模块组装而成。</span><br><span class="line">      	在空间站中要有人能够生活的一切设施，空间站不具备返回地球的能力。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><h4 id="contentEditable属性"><a href="#contentEditable属性" class="headerlink" title="contentEditable属性"></a>contentEditable属性</h4><p>contentEditable属性由微软开发并被其它浏览器反编译投入引用的一个全局属性，该属性允许用户编辑元素内容，该属性是一个布尔值的属性，可以被指定false或true</p>
<p>该属性默认inherit（继承）状态，属性为true时，元素被指定为允许编辑；属性为false时，元素被指定为不允许编辑状态；未指定值时，则由inherit状态决定，如果父元素是可编辑元素，则该元素也可编辑</p>
<p>在编辑完成后，如果想要保存其中的内容，只能把该元素的innerHTML发送到服务器端进行保存，目前还没有特别的API来保存编辑后的元素内容</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是预编译内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是预编译内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是预编译内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://files.catbox.moe/p2ks7u.png"></p>
<h4 id="designMode属性"><a href="#designMode属性" class="headerlink" title="designMode属性"></a>designMode属性</h4><p>designModel属性用来指定整个页面是否可编辑，当页面可编辑时，页面中任何支持contenteditable属性的元素都变成可编辑状态。该属性只能在JavaScript脚本里被编辑修改，该属性有两个值 “on”或“off”，当属性被指定为“on”时，页面为可编辑状态，为“off”时，页面不可编辑</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>designMode<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">designMode</span>=<span class="string">&quot;on&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是原有内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是原有内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是原有内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://files.catbox.moe/lxs8pj.png"></p>
<h4 id="hidden属性"><a href="#hidden属性" class="headerlink" title="hidden属性"></a>hidden属性</h4><p>在HTML 5中，所有的元素都允许使用一个hidden属性。该属性类似于input元素中的 hidden元素，功能是通知浏览器不渲染该元素。使该元素处干不可见状态。但是元素中的内容还是浏览器创建的，也就是说页面装载后允许使用JavaScript脚本将该属性取消，取消后该元素变为可见状态，同时元素中的内容也即时显示出来。Hidden属性是一个布尔值的属性。当设为true时，元素处于不可见状态;当设为false时，元素处于可见状态</p>
]]></content>
  </entry>
  <entry>
    <title>html基础（二）（表单）</title>
    <url>/2022/07/15/html%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C)(%E8%A1%A8%E5%8D%95)/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.iisp.com%2Fimage%2F20161011%2F20161011180825_78244.jpg&refer=http%3A%2F%2Fimg.iisp.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659877024&t=24bae5fadeb346539de3c527885be3df" alt="img"></p>
<span id="more"></span>

<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>表单是用来显示，收集，提交用户信息，表单在网页中主要负责数据采集功能，一个表单由三个基本部分组成：表单元素、表单域、按钮</p>
<h2 id="表单-1"><a href="#表单-1" class="headerlink" title="表单"></a>表单</h2><p>表单是一个包含表单元素的区域，使用&lt;form&gt;…&lt;&#x2F;form&gt;定义，通过在表单中添加对应的表单元素使得用户可以在网页上输入数据</p>
<p>&lt;form&gt;中含有诸多属性用来规定表单的格式，详见下表</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.runoob.com/tags/att-form-accept-charset.html">accept-charset</a></td>
<td><em>character_set</em></td>
<td>规定服务器可处理的表单数据字符集。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-form-action.html">action</a></td>
<td><em>URL</em></td>
<td>规定当提交表单时向何处发送表单数据。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-form-autocomplete.html">autocomplete</a></td>
<td>onoff</td>
<td>规定是否启用表单的自动完成功能。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-form-enctype.html">enctype</a></td>
<td>application&#x2F;x-www-form-urlencodedmultipart&#x2F;form-datatext&#x2F;plain</td>
<td>规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method&#x3D;”post” 的情况）</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-form-method.html">method</a></td>
<td>getpost</td>
<td>规定用于发送表单数据的 HTTP 方法。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-form-name.html">name</a></td>
<td><em>text</em></td>
<td>规定表单的名称。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-form-novalidate.html">novalidate</a></td>
<td>novalidate</td>
<td>如果使用该属性，则提交表单时不进行验证。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-form-target.html">target</a></td>
<td>_blank_self_parent_top</td>
<td>规定在何处打开 action URL。</td>
</tr>
</tbody></table>
<h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><h4 id="输入标签"><a href="#输入标签" class="headerlink" title="输入标签"></a>输入标签</h4><p>多数情况下使用的表单元素是输入标签&lt;input&gt;</p>
<p>元素内输入类型有标签中的type属性定义，常用的元素类型如下表：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>type&#x3D;”text”</td>
<td>单行文本框，一般用来以明文的方式输入数据，如：用户名</td>
</tr>
<tr>
<td>type&#x3D;”password”</td>
<td>密码框，密码字符不会以明文方式显示，而是以“*”，“·”替代</td>
</tr>
<tr>
<td>type&#x3D;”color”</td>
<td>色盘，可以通过鼠标点击选择一个颜色，其值为十六进制值 如：#ff6700</td>
</tr>
<tr>
<td>type&#x3D;”radio”</td>
<td>单选按钮，通过在标签中添加相同的name属性值，以多选一的效果 如：性别</td>
</tr>
<tr>
<td>type&#x3D;”checkbox”</td>
<td>复选按钮，可以同时选中多个数据  如：爱好</td>
</tr>
<tr>
<td>type&#x3D;”date”</td>
<td>日期类型，规定输入的数据类型必须为日期类型，谷歌内核的浏览器可以唤出浏览器自带的日期的控件选择日期 日期格式：yyyy-MM-dd</td>
</tr>
<tr>
<td>type&#x3D;”time”</td>
<td>时间类型，规定输入的数据必须为时间</td>
</tr>
<tr>
<td>type&#x3D;”month”</td>
<td>月类型，规定输入的数据类型必须为月份</td>
</tr>
<tr>
<td>type&#x3D;”file”</td>
<td>文件类型，点击后可在本地选择文件</td>
</tr>
<tr>
<td>type&#x3D;”number”</td>
<td>数字类型，外观与text文本框相似，但不允许输入数值以外的数据</td>
</tr>
<tr>
<td>type&#x3D;”range”</td>
<td>数字范围选择器，具有max与min属性，使用滑动条的方式制定数值</td>
</tr>
<tr>
<td>type&#x3D;”email”</td>
<td>邮箱类型，外观与文本框相似，其值必须为邮箱格式，浏览器会对其内容做简单的验证</td>
</tr>
<tr>
<td>type&#x3D;”url”</td>
<td>url类型，外观与文本框相似，其中必须为url，浏览器会对其内容做简单验证</td>
</tr>
<tr>
<td>type&#x3D;”hidden”</td>
<td>隐藏域，表单提供一个不在界面显示的文本域</td>
</tr>
</tbody></table>
<h2 id="下拉标签"><a href="#下拉标签" class="headerlink" title="下拉标签"></a>下拉标签</h2><ul>
<li><p>&lt;select&gt;元素为表单控件，用于在表单中接收数据</p>
</li>
<li><ul>
<li>&lt;select&gt;元素可创建单选或多选菜单</li>
<li>&lt;option&gt;标签定义了菜单中的可选项</li>
</ul>
</li>
<li><p>下拉列表支持属性</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.runoob.com/tags/att-select-autofocus.html">autofocus</a></td>
<td>autofocus</td>
<td>规定在页面加载时下拉列表自动获得焦点。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-select-disabled.html">disabled</a></td>
<td>disabled</td>
<td>当该属性为 true 时，会禁用下拉列表。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-select-form.html">form</a></td>
<td><em>form_id</em></td>
<td>定义 select 字段所属的一个或多个表单。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-select-multiple.html">multiple</a></td>
<td>multiple</td>
<td>当该属性为 true 时，可选择多个选项。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-select-name.html">name</a></td>
<td><em>text</em></td>
<td>定义下拉列表的名称。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-select-required.html">required</a></td>
<td>required</td>
<td>规定用户在提交表单前必须选择一个下拉列表中的选项。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-select-size.html">size</a></td>
<td><em>number</em></td>
<td>规定下拉列表中可见选项的数目。</td>
</tr>
</tbody></table>
<h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><ul>
<li>按钮在网页中一般用于提交，重置页面数据，也可以与javascript配置做一些交互响应事件</li>
<li>在HTML中按钮一般使用&lt;input&gt;或&lt;button&gt;来定义</li>
<li>按钮属性</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.runoob.com/tags/att-button-autofocus.html">autofocus</a></td>
<td>autofocus</td>
<td>规定当页面加载时按钮应当自动地获得焦点。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-disabled.html">disabled</a></td>
<td>disabled</td>
<td>规定应该禁用该按钮。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-form.html">form</a></td>
<td><em>form_id</em></td>
<td>规定按钮属于一个或多个表单。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-formaction.html">formaction</a></td>
<td><em>URL</em></td>
<td>规定当提交表单时向何处发送表单数据。覆盖 form 元素的 action 属性。该属性与 type&#x3D;”submit” 配合使用。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-formenctype.html">formenctype</a></td>
<td>application&#x2F;x-www-form-urlencodedmultipart&#x2F;form-datatext&#x2F;plain</td>
<td>规定在向服务器发送表单数据之前如何对其进行编码。覆盖 form 元素的 enctype 属性。该属性与 type&#x3D;”submit” 配合使用。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-formmethod.html">formmethod</a></td>
<td>get，post</td>
<td>规定用于发送表单数据的 HTTP 方法。覆盖 form 元素的 method 属性。该属性与 type&#x3D;”submit” 配合使用。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-formnovalidate.html">formnovalidate</a></td>
<td>formnovalidate</td>
<td>如果使用该属性，则提交表单时不进行验证。覆盖 form 元素的 novalidate 属性。该属性与 type&#x3D;”submit” 配合使用。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-formtarget.html">formtarget</a></td>
<td>_blank_self_parent_top<em>framename</em></td>
<td>规定在何处打开 action URL。覆盖 form 元素的 target 属性。该属性与 type&#x3D;”submit” 配合使用。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-name.html">name</a></td>
<td><em>name</em></td>
<td>规定按钮的名称。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-type.html">type</a></td>
<td>buttonresetsubmit</td>
<td>规定按钮的类型。</td>
</tr>
<tr>
<td><a href="https://www.runoob.com/tags/att-button-value.html">value</a></td>
<td><em>text</em></td>
<td>规定按钮的初始值。可由脚本进行修改。</td>
</tr>
</tbody></table>
<ul>
<li><p>&lt;button&gt;与&lt;input&gt;按钮区别</p>
</li>
<li><ul>
<li>&lt;button&gt;按钮如果不设置type属性，在不同浏览器中可能会提交不同值</li>
<li>&lt;button&gt;按钮是成对出现的，可放置文本，图像等，&lt;input&gt;标签只能通过value属性为其设置文本</li>
<li>需要注意的是虽然&lt;button&gt;按钮可以嵌套其它标签，但不能再去嵌套按钮</li>
</ul>
</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            文本：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            颜色色：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>单选：</span><br><span class="line">            男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">            女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>复选：</span><br><span class="line">            爱好1<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">            爱好2<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">            爱好3<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">            爱好4<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            下拉：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>[请输入...]<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择数据一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择数据二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span>县</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>[请输入...]<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择数据一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>选择数据二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span>村</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            月份：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            数字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            数字范围：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            隐藏：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;input提交按钮&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;input重置按钮&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;input按钮&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>button提交按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>button重置按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>button按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML5-表单增强"><a href="#HTML5-表单增强" class="headerlink" title="HTML5 表单增强"></a>HTML5 表单增强</h2><h4 id="form属性"><a href="#form属性" class="headerlink" title="form属性"></a>form属性</h4><p>在HTML4中，表单内的从属元素必须书写在表单内部，但在HTML5中，可以把它书写在页面的任意地方，然后给该元素指定一个form属性，属性值为该表单的id，这样就可以声明该元素从属于指定的表单</p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;formTest&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">form</span>=<span class="string">&quot;formTest&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码解析：</p>
<ol>
<li>第一个input标签从属form表单，它被书写在form表单内部，所以用不着对它指定form属性</li>
<li>第二个input表单被书写在form之外，但想要它从属form，这时就可以为其添加form属性并指定表单id让它从属form表单</li>
</ol>
<h4 id="formaction属性"><a href="#formaction属性" class="headerlink" title="formaction属性"></a>formaction属性</h4><p>在HTML 4中，一个表单内的所有元素都只能通过表单的action属性统一提交到另一个页面，而在HTML 5中可以给所有的提交按钮，诸如&lt;input type&#x3D;”submit”&gt;、&lt;inputtype&#x3D;”image”&gt;、&lt;button type&#x3D;”submit”&gt;都增加不同的formaction属性，使得点击不同的按钮，可以将表单提交到不同的页面，formaction属性的使用方法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;testform&quot;</span> <span class="attr">action</span>=<span class="string">&quot; serve.jsp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v1&quot;</span> <span class="attr">formaction</span>=<span class="string">&quot;s1.jsp&quot;</span>&gt;</span>提交到s1</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v2&quot;</span> <span class="attr">formaction</span>=<span class="string">&quot;s2.jsp&quot;</span>&gt;</span>提交到s2</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;s3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v3&quot;</span> <span class="attr">formaction</span>=<span class="string">&quot;s3.jsp&quot;</span>&gt;</span>提交到s3</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>= <span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：该属性目前支持的浏览器并不多，慎重使用</strong></p>
<h4 id="list属性"><a href="#list属性" class="headerlink" title="list属性"></a>list属性</h4><p>在HTML 5中，为单行文本框(&lt;input type&#x3D;”text”&gt;)增加了一个list属性，该属性的值为某个datalist元素的id。datalist元素也是HTML 5中新增元素，该元素类似于选择框( select&gt;)，但是当用户想要设定的值不在选择列表之内时，允许其自行输入。该元素本身并不显示，而是当文本框获得焦点时以提示输入的方式显示。为了避免在没有支持该元素的浏览器上出现显示错误，可以用CSS等将它设定为不显示。</p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    text: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot; greeting&quot;</span> <span class="attr">list</span>=<span class="string">&quot;greetings&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;greetings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Good Morning&quot;</span>&gt;</span>Good Morning<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Good Afternoon&quot;</span>&gt;</span>Good Afternoon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="autocomplete属性"><a href="#autocomplete属性" class="headerlink" title="autocomplete属性"></a>autocomplete属性</h4><p>辅助输入所用的自动完成功能，是一个节省输入时间，同时也十分方便的功能。在HTML5之前，因为谁都可以看见输入的值，所以存在安全隐患，但只要使用autocomplete属性，安全性就可以得到很好的控制。.</p>
<p>对于autocomplete属性，可以指定“on”、“off”与“”(不指定）这三种值。不指定时，使用浏览器的默认值(取决于各浏览器的决定)。把该属性设为on时，可以显式指定候补输入的数据列表。使用detalist元素与list属性提供候补输入的数据列表，自动完成时，可以将该datalist元素中的数据作为候补输入的数据在文本框中自动显示。autocomplete属性的使用方法如下所示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    text: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;greeting&quot;</span> <span class="attr">list</span>=<span class="string">&quot;greetings&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;greetings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Good Morning&quot;</span>&gt;</span>Good Morning<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Good Afternoon&quot;</span>&gt;</span>Good Afternoon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="output标签"><a href="#output标签" class="headerlink" title="output标签"></a>output标签</h4><ul>
<li><p>output为H5的新增标签，用来定义不同类型的输出，长和form表单一起使用，用来输出显示计算结果</p>
</li>
<li><p>语法</p>
</li>
<li><p>标签属性</p>
</li>
<li><ul>
<li>for：定义输出域相关的一个或多个元素，以空格隔开；</li>
<li>form：定义输入字段所属的一个或多个表单，以空格隔开；</li>
<li>name：定义对象的唯一名称（表单提交时使用）。</li>
</ul>
</li>
</ul>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">oninput</span>=<span class="string">&quot;o.value=parseInt(a.value)&quot;</span>&gt;</span></span><br><span class="line">        选择数字范围：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">&quot;o&quot;</span> &gt;</span>50<span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例二</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">oninput</span>=<span class="string">&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span> +</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span> =</span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">&quot;x&quot;</span> <span class="attr">for</span>=<span class="string">&quot;a b&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：</p>
<p>oninput为表单事件，表示当对元素输入数据时触发</p>
<p>parseInt为javascript函数，用来解析一个字符串，并返回一个整数</p>
<h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><p>在H5中，新增了大量在提交时对表单与表单内新增元素进行有效性验证的功能</p>
<h5 id="自动验证"><a href="#自动验证" class="headerlink" title="自动验证"></a><strong>自动验证</strong></h5><p>在H5中，新增的一些表单元素本身就带有简单的提交格式验证，如邮箱（email）就有固定的格式“@”，“.”，但普通的表单元素就要通过对元素使用属性的方法，来实现在表单提交时执行自动验证的功能</p>
<p><img src="https://files.catbox.moe/wz7j06.png"></p>
<p>普通表单元素的验证属性</p>
<ol>
<li>required属性</li>
</ol>
<p>HTML 5中新增的required属性可以应用在大多数输入元素上（除了隐藏元素、图片元素按钮上)。在提交时，如果元素中内容为空白，则不允许提交，同时在浏览器中显示信息提示文字，提示用户这个元素中必须输入内容。</p>
<p><img src="https://files.catbox.moe/d3k2br.png"></p>
<ol>
<li>pattern属性</li>
</ol>
<p>之前提到的一些新增的input元素，譬如email、number、url等，要求输入内容符合–定的格式，对input元素使用pattern属性，并且将属性值设为某个格式的正则表达式，在提交时会检查其内容是否符合给定格式。当输入的内容不符合给定格式时，则不允许提交，同时在浏览器中显示信息提示文字，提示输入的内容必须符合给定格式。譬如下面所示，要求输入内容为三个大写字母。</p>
<p><img src="https://files.catbox.moe/nbjzlx.png"></p>
<ol>
<li>min属性与max属性</li>
</ol>
<p>min与max这两个属性是数值类型或日期类型的input元素的专用属性，它们限制了在input元素中输入的数值与日期的范围。</p>
<p><img src="https://files.catbox.moe/7n6qhv.png"></p>
]]></content>
  </entry>
  <entry>
    <title>CSS样式表与选择器</title>
    <url>/2022/07/15/CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%E4%B8%8E%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/35eqd6.png"></p>
<span id="more"></span>

<h1 id="样式表与选择器"><a href="#样式表与选择器" class="headerlink" title="样式表与选择器"></a>样式表与选择器</h1><h2 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h2><p>css 是 web 标准中的表现标准，专门用来对网页标签进行布局和设置样式的一门语言，目前使用css3，css 又名层叠样式表.<br>样式表表示CSS代码的位置，目前CSS样式表分以下三类：</p>
<h3 id="内联样式表"><a href="#内联样式表" class="headerlink" title="内联样式表"></a>内联样式表</h3><p>●顾名思义内联样式写在标签中（在开始标签中添加style&#x3D;””属性，在双引号中添加样式属性，属性和属性之间用分号隔开）<br>●格式<br>&lt;开始标签 style&#x3D;”样式属性:属性值;样式属性:属性值;………”&gt;标签内容&lt;&#x2F;结束标签&gt;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><ul>
<li><p>写在html内部的样式（在html的头文件中嵌套&lt;style&gt;标签，在style标签中通过特有格式添加基本样式）</p>
</li>
<li><p>格式</p>
<p><img src="https://files.catbox.moe/93hfyf.png"></p>
</li>
</ul>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><ul>
<li><p>外部样式表就是在html文件外创建一个后缀为.css的文件，然后html标签中使用link标签将外部.css文件引入到html文件中去使用</p>
</li>
<li><p>格式</p>
</li>
<li><p>创建外部样式表文件</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styleCss.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：当三种样式表出现冲突时，三种样式表的优先级为  <strong>内联样式表&gt;内部样式表&gt;外部样式表</strong></p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>选择器是CSS 中一个重要的内容。使用它可以大幅度提高开发人员书写或修改样式表时的工作效率。</p>
<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>在HTML中，通过各种各样的属性，我们可以给元素增加很多附加信息。例如，通过width属性，我们可以指定div元素的宽度，通过id属性，我们可以将不同的div元素进行区分，并且通过JavaScript来控制这个div元素的内容和状态。</p>
<h5 id="类选择器-class选择器"><a href="#类选择器-class选择器" class="headerlink" title="类选择器(class选择器)"></a><strong>类选择器(class选择器)</strong></h5><ul>
<li>在开始标签中添加class&#x3D;””属性，并命名，在样式表中使用“.选择器名称{……}”可为该元素添加想要添加的样式属性</li>
<li>当然样式表中的样式与标签中的class&#x3D;”选择名称”，可以理解为是标签引用了选择器中的样式，一个标签中可以引用多个类选择器样式，名称和名称之间用空格隔开</li>
<li>格式</li>
</ul>
<table>
<thead>
<tr>
<th>元素</th>
<th>样式表</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;开始标签 class&#x3D;”ClassName”&gt;元素内容&lt;&#x2F;结束标签&gt;</td>
<td>.ClassName{   样式属性:属性值;   样式属性:属性值;   ……}</td>
</tr>
<tr>
<td>&lt;开始标签 class&#x3D;”ClassName  ClassNameTest”&gt;元素内容&lt;&#x2F;结束标签&gt;</td>
<td>.ClassName{   样式属性:属性值;   样式属性:属性值;   ……}.ClassNameTest{   样式属性:属性值;   样式属性:属性值;   ……}</td>
</tr>
</tbody></table>
<p>类选择器样式是可以重复使用的，也就是说一个样式可以由多个元素共同使用，这样可以提供代码的复用性，但是需要注意在做网页结构布局的时候对于结构不要过多的复用代码，保不准后期需要更改结构模块，复用的代码可以是一些不更改结构的样式，如文字，颜色，等</p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.color1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.color2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#3bee17</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo color1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo color2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a><strong>id选择器</strong></h5><ul>
<li>在开始标签中添加id&#x3D;””属性，并命名，在样式表中使用“#选择器名称{……}”可为该元素添加想要添加的样式属性</li>
<li>需要注意的是id选择器是唯一的，不可复用的，它是一个元素的唯一标识</li>
</ul>
<table>
<thead>
<tr>
<th>元素</th>
<th>样式表</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;开始标签 id&#x3D;”ClassName”&gt;元素内容&lt;&#x2F;结束标签&gt;</td>
<td>#ClassName{   样式属性:属性值;   样式属性:属性值;   ……}</td>
</tr>
</tbody></table>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#myElement</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myElement&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a><strong>通配选择器</strong></h5><ul>
<li>[att*&#x3D;val]选择器</li>
</ul>
<p>[att*&#x3D;val]属性选择器的含义是:如果元素用att表示的属性之属性值中包含用val指定的字符的话，则该元素使用这个样式。</p>
<ul>
<li>[att^&#x3D;val]选择器</li>
</ul>
<p>[att^&#x3D;val]属性选择器的含义是:如果元素用att表示的属性之属性值的开头字符为用val指定的字符的话，则该元素使用这个样式。</p>
<ul>
<li>[att$&#x3D;val]选择器</li>
</ul>
<p>[att$&#x3D;val]属性选择器的含义是:如果元素用att表示的属性之属性值的结尾字符为用val指定的字符的话，则该元素使用这个样式。</p>
<p>注：使用该属性时必须在指定匹配字符前加上“\”转义符，不能是纯数字</p>
<p>示例1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/*只要包含e字符，全部添加一下样式*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[class*=e]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element2&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element3&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element4&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*只要d开头，就添加以下样式*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[class^=d]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element2&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element3&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element4&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例3</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*只要-2结尾，就添加以下样式*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[class$=\-2]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element-2&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo-1&quot;</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element-3&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo-2&quot;</span>&gt;</span>这是文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Element-4&quot;</span>&gt;</span>这是元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><ul>
<li>标签选择顾名思义就是直接使用标签名在样式表中去给标签添加样式</li>
<li>注：标签选择器会给所有同名且没有其它选择器的标签添加相同的样式，不建议直接使用，可与结构选择器结合使用</li>
</ul>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#2279ee</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一行字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一行字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>这是一行字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一行字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一行字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一行字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="结构选择器"><a href="#结构选择器" class="headerlink" title="结构选择器"></a>结构选择器</h4><h5 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a><strong>后代选择器</strong></h5><ul>
<li>后代选择器又称包含选择器，后代选择器可以选择作为某元素后代（嵌套关系）的元素</li>
<li>我们可以定义后代选择器来创建一些规则，使这些规则在某些文档结构中起作用，而在另外一些结构中不起作用。</li>
<li>在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符（combinator）。每个空格结合符可以解释为“… 在 … 找到”、“… 作为 … 的一部分”、“… 作为 … 的后代”，但是要求必须从右向左读选择器。</li>
</ul>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.dlOne</span> <span class="selector-tag">dd</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.dlOne</span> <span class="selector-tag">dd</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ff6700</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.dlTwo</span> <span class="selector-tag">dd</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ff50ef</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.dlTwo</span> <span class="selector-tag">dd</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#339fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;dlOne&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/mapImages/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一行字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这是另一行字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;dlTwo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/mapImages/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这还是一行字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这又是另一行字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a><strong>群组选择器</strong></h5><ul>
<li>要为不同的HTML元素定义相同的样式时，可以采用群组声明。</li>
<li>上述规则在选择器中指定了多个元素，元素之间用逗号来分隔。逗号告诉浏览器，规则中包含两个不同的选择器。这样的选择器叫群组选择器。</li>
<li>群组选择器可以减少样式的重复定义。可以把任意数量、任意类型的选择器放在群组中进行声明</li>
</ul>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.demo</span>,<span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>Byte科技<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>棒滴很！！！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="序号子选择器"><a href="#序号子选择器" class="headerlink" title="序号子选择器"></a><strong>序号子选择器</strong></h5><ul>
<li>序号选择器可以指定父元素中顺数或倒数某个子元素的样式</li>
<li>nth-child() 顺数</li>
<li>nth-last-child() 倒数</li>
</ul>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#339fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:nth-last-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#339fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:nth-last-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#d442ff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff800</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><ul>
<li>通用选择器可以选择页面上的所有元素，并对它们应用样式，用 * 来表示。</li>
</ul>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一行字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这还是一行字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>这又是一行字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><ul>
<li>伪类用于定义元素的特殊状态，由CSS提供</li>
<li>E:hover</li>
<li>E:active</li>
<li>E:link</li>
<li>E:visited</li>
<li>E:foucs</li>
</ul>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#339fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#3bee17</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.inputEL</span><span class="selector-pseudo">:focus</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#339fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>这是一行字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;inputEL&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CSS概述及常用样式</title>
    <url>/2022/07/15/CSS%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F1aa47966bb830f680023ffc8b3f29a11.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1660476083&t=6dadfca244396e41c6dc7b8116d30ca7" alt="点击查看图片来源"></p>
<span id="more"></span>

<h1 id="CSS3-概述"><a href="#CSS3-概述" class="headerlink" title="CSS3 概述"></a>CSS3 概述</h1><h2 id="CSS概述"><a href="#CSS概述" class="headerlink" title="CSS概述"></a>CSS概述</h2><h3 id="CSS-是什么"><a href="#CSS-是什么" class="headerlink" title="CSS 是什么"></a>CSS 是什么</h3><p>CSS全称 Cascading Style Sheets层叠样式表，是一种用来表现文件样式的计算机语言。<br>1.CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。<br>2.CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式。<br>3.CSS拥有对网页对象和模型样式编辑的能力。<br>4.在主页制作时采用CSS技术，可以有效地对页面的布局、字体、颜色等效果实现更加精确的控制。</p>
<h3 id="CSS历史"><a href="#CSS历史" class="headerlink" title="CSS历史"></a>CSS历史</h3><p>接下来，我们从总体上看一下CSS的发展历史。<br>CSS 1。<br>         1996年12月，CSS 1(Cascading Style Sheets,level 1)正式推出。在这个版本中，已经包含了font的相关属性、颜色与背景的相关属性、文字的相关属性、box的相关属性等。<br>CSS 2。<br>         1998年5月，CSS 2(Cascading Style Sheets,level 2)正式推出。在这个版本中开始使用样式表结构。<br>CSS 2.1。<br>         2004年2月，CSS 2.1(Cascading Style Sheets,level 2 revision 1)正式推出。它在CSS 2的基础上略微做了改动，删除了许多诸如text-shadow等不被浏览器所支持的属性。<br>现在所使用的CSS基本上是在1998年推出的CSS 2的基础上发展而来的。10年前在Internet刚开始普及的时候，就能够使用样式表来对网页进行视觉效果的统一编辑，确实是一件可喜的事情。但是在这10年间CSS可以说是基本上没有什么很大的变化，一直到2010年终于推出了一个全新的版本———CSS 3。</p>
<h2 id="使用CSS能做什么"><a href="#使用CSS能做什么" class="headerlink" title="使用CSS能做什么"></a>使用CSS能做什么</h2><h3 id="模块与模块化结构"><a href="#模块与模块化结构" class="headerlink" title="模块与模块化结构"></a>模块与模块化结构</h3><p>在CSS中，采用分工协作的模块化结构，如下表在CSS中，采用分工协作的模块化结构，如下表</p>
<table>
<thead>
<tr>
<th>模块名称</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>basic box model</td>
<td>定义各种与盒相关的样式</td>
</tr>
<tr>
<td>Line</td>
<td>定义各种与直线相关的样式</td>
</tr>
<tr>
<td>Lists</td>
<td>定义各种与列表相关的样式</td>
</tr>
<tr>
<td>Hyperlink Presentation</td>
<td>定义各种与超链接相关的样式。訾如锚的显示方式、激活时的视觉效果等</td>
</tr>
<tr>
<td>Presentation Levels</td>
<td>定义页面中元素的不同的样式级别</td>
</tr>
<tr>
<td>Speech</td>
<td>定义各种与语音相关的样式。譬如音量、音速、说话间歇时间等属性</td>
</tr>
<tr>
<td>Background and border</td>
<td>定义各种与背景和边框相关的样式</td>
</tr>
<tr>
<td>Text</td>
<td>定义各种与文字相关的样式</td>
</tr>
<tr>
<td>Color</td>
<td>定义各种与颜色相关的样式</td>
</tr>
<tr>
<td>Font</td>
<td>定义各种与字体相关的样式</td>
</tr>
<tr>
<td>Paged Media</td>
<td>定义各种页眉、页脚、页数等页面元数据的样式</td>
</tr>
<tr>
<td>Cascading and inheritance</td>
<td>定义怎样对属性进行赋值</td>
</tr>
<tr>
<td>Value and Units</td>
<td>将页面上各种各样的值与单位进行统一定义，以供其他模块使用</td>
</tr>
<tr>
<td>Image Values</td>
<td>定义对image元素的赋值方式</td>
</tr>
<tr>
<td>2D Transforms</td>
<td>在页面中实现2维空间上的变形效果</td>
</tr>
<tr>
<td>3D Transforms</td>
<td>在页面中实现3维空间上的变形效果</td>
</tr>
<tr>
<td>Transitions</td>
<td>在页面中实现平滑过渡的视觉效果</td>
</tr>
<tr>
<td>Animations</td>
<td>在页面中实现动画</td>
</tr>
<tr>
<td>CSSOM View</td>
<td>查看管理页面或页面的视觉效果，处理元素的位置信息</td>
</tr>
<tr>
<td>Syntax</td>
<td>定义CSS样式表的基本结构、样式表中的-一些语法细节、浏览器对于样式表的分析规则</td>
</tr>
<tr>
<td>Generated and Replaced Content</td>
<td>定义怎样在元素中插入内容</td>
</tr>
<tr>
<td>Marquee</td>
<td>定义当一些元素的内容太大，超出了指定的元素尺寸时，是否以及怎样显示溢出部分</td>
</tr>
<tr>
<td>Ruby</td>
<td>定义页面中ruby元素（用于显示拼音文字)的样式</td>
</tr>
<tr>
<td>Writing Modes</td>
<td>定义页面中文本数据的布局方式</td>
</tr>
<tr>
<td>Basic User Interface</td>
<td>定义在屏幕、纸张上进行输出时页面的渲染方式</td>
</tr>
<tr>
<td>Namespaces</td>
<td>定义使用命名空间时的语法</td>
</tr>
<tr>
<td>Media Queries</td>
<td>根据媒体类型来实现不同的样式</td>
</tr>
<tr>
<td>‘Reader’Media Type</td>
<td>定义用于屏幕阅读器之类的阅读程序时的样式</td>
</tr>
<tr>
<td>Multi-column Layout</td>
<td>在页面中使用多栏布局方式</td>
</tr>
<tr>
<td>Template Layout</td>
<td>在页面中使用特殊布局方式</td>
</tr>
<tr>
<td>Flexible Box Layout</td>
<td>创建自适应浏览器窗口的流动布局或自适应字体大小的弹性布局</td>
</tr>
<tr>
<td>Grid Position</td>
<td>在页面中使用网格布局方</td>
</tr>
<tr>
<td>Generated Content for Paged Media</td>
<td>在页面中使用印刷时使用的布局方式</td>
</tr>
</tbody></table>
<h1 id="第二章-CSS常用样式"><a href="#第二章-CSS常用样式" class="headerlink" title="第二章 CSS常用样式"></a>第二章 CSS常用样式</h1><h2 id="CSS-常用样式属性"><a href="#CSS-常用样式属性" class="headerlink" title="CSS 常用样式属性"></a>CSS 常用样式属性</h2><h4 id="宽高"><a href="#宽高" class="headerlink" title="宽高"></a>宽高</h4><ul>
<li><ul>
<li>宽width：像素值&#x2F;百分比（上一级标签的百分之多少）</li>
<li>高height：像素值&#x2F;百分比（上一级标签的百分之多少[注：当标签为body下的第一层标签时，高度使用百分比是不生效的]）</li>
</ul>
</li>
</ul>
<h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><ul>
<li><ul>
<li>文字大小</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>font-size：像素值</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>文字颜色</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>color:颜色单词&#x2F;十六进制值&#x2F;rgba值</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>文字对齐方式</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>text-align:居中&#x2F;靠左&#x2F;靠右</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>文字的字体设置</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>font-family:字体</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><ul>
<li><ul>
<li>标准文档流</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>web页面的制作不同于设计软件，它是个流，必须从上而下，先执行渲染显示上边的元素，依次向下渲染显示</li>
<li>我们知道元素分块级和行级元素两类，如果页面完全遵循文档流去开发就会导致很多页面排版不能实现或不能完全实现</li>
<li>通过浮动我们可以让元素脱离标准流，实现块级元素并排等一些效果</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>浮动特点</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>脱离标准流</li>
<li>元素并排（如果容器宽度足够元素则在容器宽度范围内并排，如果宽度不够则容器内元素会依次换行排列）</li>
<li>收缩（如果一个没有设置宽度的元素浮动，那么元素的宽度会自动收缩为内容宽度）</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>注：在学习初期关于浮动要遵循的一个原则：<strong>不要让一个元素单独浮动，要浮一起浮，要么都别浮</strong></li>
<li>浮动属性</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>左浮动    float:left;</li>
<li>右浮动    float:right</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul>
<li><ul>
<li>背景图 background-image:url(“图片地址”)</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>注：</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>在元素添加背景图时其运行时高度必须大于1</li>
<li>背景图处于元素的最底层不会占用元素内容的存储空间</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../images/mapImages/4.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>背景图大小 background-size:宽度  高度；</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>注：</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>为背景图设置大小时需要注意该图的纵横比（容易出现背景变形）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../images/mapImages/1.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>背景重复 background-repeat:no-repeat&#x2F;repeat-x;repeat-y;</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>当图片宽高小于容器宽高时图片默认会铺满整个容器，会导致背景重复</li>
<li>背景重复属性值默认为repeat（重复），也可以设置为</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>no-repeat:不重复</li>
<li>repeat-x：X轴重复</li>
<li>repeat-y：Y轴重复</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;../images/mapImages/1.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*background-repeat: repeat-x;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*background-repeat: repeat-y;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>背景位移 background-position:x轴值  Y轴值；</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><p>当背景图大小小于容器大小的时候，容器中添加背景图后只能展示出部分背景图</p>
</li>
<li><p>通过背景位移，可以移动背景图片让容器中显示背景图中想要展示分部分</p>
</li>
<li><p>注：</p>
<p>​</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://files.catbox.moe/oyodj3.png"></p>
<ul>
<li><ul>
<li>背景色 background-color:颜色单词&#x2F;十六进制值&#x2F;rgba值</li>
</ul>
</li>
<li><ul>
<li><p>背景渐变</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">     <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(<span class="number">#ff0000</span>,<span class="number">#ffffff</span>);</span></span><br><span class="line"><span class="language-css">     &#125;</span></span><br><span class="line"><span class="language-css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
</li>
</ul>
<h4 id="阴影-box-shadow"><a href="#阴影-box-shadow" class="headerlink" title="阴影 box-shadow"></a>阴影 box-shadow</h4><ul>
<li><ul>
<li>语法：</li>
</ul>
</li>
</ul>
<p>box-shadow: h-shadow v-shadow blur spread color inset;</p>
<ul>
<li><ul>
<li>属性值：</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>h-shadow</td>
<td>必需的。水平阴影的位置。允许负值</td>
</tr>
<tr>
<td>v-shadow</td>
<td>必需的。垂直阴影的位置。允许负值</td>
</tr>
<tr>
<td>blur</td>
<td>可选。模糊距离</td>
</tr>
<tr>
<td>spread</td>
<td>可选。阴影的大小</td>
</tr>
<tr>
<td>color</td>
<td>可选。阴影的颜色。在<a href="https://www.runoob.com/cssref/css_colors_legal.aspx">CSS颜色值</a>寻找颜色值的完整列表</td>
</tr>
<tr>
<td>inset</td>
<td>可选。从外层的阴影（开始时）改变阴影内侧阴影</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">50px</span> <span class="number">2px</span> gainsboro;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>:    <span class="number">0px</span> -<span class="number">10px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">#ff0000</span>,   <span class="comment">/*上边阴影  红色*/</span></span></span><br><span class="line"><span class="language-css">            -<span class="number">10px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">#3bee17</span>,   <span class="comment">/*左边阴影  绿色*/</span></span></span><br><span class="line"><span class="language-css">            <span class="number">10px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">#2279ee</span>,    <span class="comment">/*右边阴影  蓝色*/</span></span></span><br><span class="line"><span class="language-css">            <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">#eede15</span>;    <span class="comment">/*下边阴影  黄色*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="圆角-border-radius-圆角值"><a href="#圆角-border-radius-圆角值" class="headerlink" title="圆角 border-[--]radius:圆角值"></a>圆角 border-[<em>-</em>-]radius:圆角值</h4><p>圆形示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>单角示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-bottom-left-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="comment">/*border-bottom-right-radius: 20px;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*border-top-right-radius: 20px;*/</span></span></span><br><span class="line"><span class="language-css">          <span class="comment">/*border-top-left-radius: 20px;*/</span></span></span><br><span class="line"><span class="language-css">          </span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CSS盒子模型及布局</title>
    <url>/2022/07/15/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/35eqd6.png"></p>
<span id="more"></span>

<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><h2 id="盒子模型概述"><a href="#盒子模型概述" class="headerlink" title="盒子模型概述"></a>盒子模型概述</h2><p>盒子模型，顾名思义就是用来装东西的，它装的东西就是HTML元素的内容。<br>我们可以把一个HTML元素看成是一个盒子</p>
<h2 id="盒子构成"><a href="#盒子构成" class="headerlink" title="盒子构成"></a>盒子构成</h2><p>一个盒子由内容，内边距，边框，外边距构成</p>
<p><img src="https://files.catbox.moe/m1boy2.png"></p>
<ul>
<li><p>内容（content）：表示元素的宽高，若元素设置了宽度和高度，则内容空间就位宽高范围，若没有宽高，则内容空间为盒子中实际内容的所占空间</p>
</li>
<li><p>内边距（padding）：表示盒子内容与边框之间的距离</p>
</li>
<li><p>边框（border）：表示盒子的边框，位于内边距和外边距指甲剪</p>
</li>
<li><p>外边距（margin）：表示盒子边框以外的距离</p>
</li>
<li><p>注：</p>
</li>
<li><ul>
<li>盒子的内外边距是透明的</li>
<li>盒子的大小不是我们通过CSS设置的width和height，而是内容宽高+内边距+边框+外边距</li>
</ul>
</li>
</ul>
<h2 id="盒子属性解析"><a href="#盒子属性解析" class="headerlink" title="盒子属性解析"></a>盒子属性解析</h2><h4 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h4><p>就是盒子里的内容距离盒子边框的距离</p>
<ul>
<li><p>作用：</p>
</li>
<li><ul>
<li>可以让内容和盒子的边框有一定的距离</li>
</ul>
</li>
<li><p>属性值</p>
</li>
<li><ul>
<li>padding:Xpx;给盒子的内容四周都加上内边距</li>
<li>padding:Xpx  Xpx;两个值分别上下 ，左右</li>
<li>padding:Xpx Xpx Xpx Xpx;分别表示  上，右，下，左</li>
<li>padding-left&#x2F;right&#x2F;top&#x2F;bottom:Xpx;给内容的某一边加内边距</li>
</ul>
</li>
</ul>
<p>示例一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.PDemo</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="边框（border）"><a href="#边框（border）" class="headerlink" title="边框（border）"></a>边框（border）</h4><p>表示盒子的边界</p>
<ul>
<li><p>作用</p>
</li>
<li><ul>
<li>为盒子四周或某一边添加带有颜色的边框</li>
</ul>
</li>
<li><p>属性</p>
</li>
<li><ul>
<li>border:边框宽度  实线&#x2F;虚线 颜色</li>
<li>border-left&#x2F;right&#x2F;top&#x2F;bottom:边框宽度  实线&#x2F;虚线 颜色</li>
</ul>
</li>
</ul>
<h4 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h4><p>表示盒子距离它周围的距离</p>
<ul>
<li><p>作用：可以用来调整元素与元素之间的间距，也可以用来移动元素（注：微调）</p>
</li>
<li><p>属性：</p>
</li>
<li><ul>
<li>margin:Xpx;给盒子的内容四周都加上外边距</li>
<li>margin:Xpx  Xpx;两个值分别上下 ，左右</li>
<li>margin:Xpx Xpx Xpx Xpx;分别表示  上，右，下，左（外边距它渲染显示的时候也是从左上开始）</li>
<li>margin-left&#x2F;right&#x2F;top&#x2F;bottom:Xpx;使盒子对四周的某一边有距离</li>
</ul>
</li>
<li><p>注：</p>
</li>
<li><ul>
<li>元素在渲染显示的时候左上属性优先</li>
</ul>
</li>
</ul>
<h1 id="第二章-布局"><a href="#第二章-布局" class="headerlink" title="第二章 布局"></a>第二章 布局</h1><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>布局是为了对整个网页进行排版，把网站内容安排在多个列中，用以丰富网页背景，色彩，内容等网页外观，就跟房子装修一样，我们需要把我们的房子装修漂漂亮亮的而且功能实用，总不能把床放在卫生间，把马桶放在燃气灶旁边吧</p>
<p>我么在制作前期需要对UI设计师提供的设计图片进行布局分析，明确那个模块在什么位置，我们需要通过布局将模块创建出来，放在它该有的位置上，然后对模块进行内容填充</p>
<h2 id="入门布局–圣杯布局"><a href="#入门布局–圣杯布局" class="headerlink" title="入门布局–圣杯布局"></a>入门布局–圣杯布局</h2><ul>
<li><p>入门图</p>
<p>​</p>
</li>
</ul>
<p><img src="https://files.catbox.moe/yov4tt.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.top</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.middle</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.middle</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>),<span class="selector-class">.middle</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-last-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#339fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.middle</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">40%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#2279ee</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bottom</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.color1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#339fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--顶部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top color1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--中部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--左--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--右--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--底部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom color1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><h4 id="传统布局与弹性布局"><a href="#传统布局与弹性布局" class="headerlink" title="传统布局与弹性布局"></a>传统布局与弹性布局</h4><ol>
<li>传统布局方法遵循文档流的模式，依赖浮动，相较于一些特殊布局，不容易实现（如：垂直居中效果）</li>
<li>弹性布局诞生于2009年，弹性布局也称之为flex布局</li>
<li>弹性布局可以完整的响应式的实现各种页面布局</li>
</ol>
<h4 id="在使用弹性布局时需要知道的两个概念"><a href="#在使用弹性布局时需要知道的两个概念" class="headerlink" title="在使用弹性布局时需要知道的两个概念"></a>在使用弹性布局时需要知道的两个概念</h4><ol>
<li>容器：需要添加弹性布局的父元素</li>
<li>项目：弹性布局容器中的每一个子元素称之为项目</li>
</ol>
<h4 id="在使用弹性布局时需要了解的两个基本方向"><a href="#在使用弹性布局时需要了解的两个基本方向" class="headerlink" title="在使用弹性布局时需要了解的两个基本方向"></a>在使用弹性布局时需要了解的两个基本方向</h4><ol>
<li>主轴：在弹性布局中，需要通过样式属性去规定水平&#x2F;垂直方向为主轴</li>
<li>交叉轴：与主轴垂直的另一个方向称之为交叉轴</li>
</ol>
<h4 id="弹性布局的使用步骤"><a href="#弹性布局的使用步骤" class="headerlink" title="弹性布局的使用步骤"></a>弹性布局的使用步骤</h4><ol>
<li>给父元素添加display:flex&#x2F;inline-flex来规定该容器为弹性布局显示，而不遵循常规的文档流模式</li>
<li>添加弹性布局的相关属性样式</li>
<li>注：当元素采用了弹性布局后，子元素的浮动会失效</li>
<li>入门</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*规定容器*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配合display:flex使用的12个属性（6个容器属性，6个项目属性）</p>
<h4 id="6个容器属性"><a href="#6个容器属性" class="headerlink" title="6个容器属性"></a>6个容器属性</h4><ol>
<li><ol>
<li><p>flex-direction  改属性决定主轴的方向（表示在容器中项目的排列方向）</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>方向</th>
</tr>
</thead>
<tbody><tr>
<td>row      默认值</td>
<td>主轴为水平方向，从父容器的左部开始渲染显示</td>
</tr>
<tr>
<td>row-reverse</td>
<td>主轴为水平方向，从父容器的右部开始渲染显示</td>
</tr>
<tr>
<td>column</td>
<td>主轴为垂直方向，从父容器的左上部开始渲染显示</td>
</tr>
<tr>
<td>column-reverse</td>
<td>主轴为垂直方向，从父容器的左下部开始渲染显示</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
</ol>
<p>​         b. flex-wrap   项目的排列方式（默认情况下，所有项目都排列在一条轴线上）              </p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>不换行，当容器的宽度不够时，容器中的每个项目将会被挤压</td>
</tr>
<tr>
<td>wrap</td>
<td>换行，按项目的实际宽度执行排列，当容器宽度不够时自动换行，并且第一行在容器的最上方</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>换行，第一行在容器的最下方</td>
</tr>
</tbody></table>
<p>c.    flex-flow:flex-direction  flex-wrap</p>
<p>默认值为  flex-flow:row  wrap</p>
<p>d.    justify-content   定义了项目在主轴方向的对齐方式</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>项目位于主轴的起点</td>
</tr>
<tr>
<td>flex-end</td>
<td>项目位于主轴的终点</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>space-between</td>
<td>两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边没有间隔</td>
</tr>
<tr>
<td>space-around</td>
<td>两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边有一定的间隔</td>
</tr>
</tbody></table>
<p>e.    align-items  交叉轴对齐方式</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>交叉轴起点对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>交叉轴终点对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>baseline</td>
<td>以项目的第一行文字为基线对齐，文字的行高，字体大小会直接影响后边的项目对齐</td>
</tr>
<tr>
<td>stretch</td>
<td>如果项目没有设置高度，则添加该属性后项目会占满整个容器</td>
</tr>
</tbody></table>
<p>f.    align-content 定义多根轴线的对齐方式，如果定义一根轴线则该属性不生效（不推荐出现多根轴线）</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>与交叉轴的起点对齐</td>
</tr>
<tr>
<td>flex-end</td>
<td>与交叉轴的终点对齐</td>
</tr>
<tr>
<td>center</td>
<td>与交叉轴的中点对齐</td>
</tr>
<tr>
<td>space-between</td>
<td>与交叉轴的两端对齐，轴线之间的间隔平均分布，开头和结束项目与容器没间隔</td>
</tr>
<tr>
<td>space-around</td>
<td>与交叉轴的两端对齐，轴线之间的间隔都相等</td>
</tr>
<tr>
<td>stretch</td>
<td>轴线占满整个交叉轴</td>
</tr>
</tbody></table>
<h4 id="6个项目属性"><a href="#6个项目属性" class="headerlink" title="6个项目属性"></a>6个项目属性</h4><ol>
<li><ol>
<li>order 定义项目排列的顺序，数值越小，排列越靠前，默认值为0，当添加了大于0的值后，该项目则不遵循文档流的排列方式</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*规定容器*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*主轴*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-direction: row-reverse;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-direction: column;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-direction: column-reverse;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*排列方式*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-wrap: nowrap;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-wrap: wrap-reverse;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*主轴对齐方式*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*justify-content: flex-start;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*justify-content: flex-end;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*justify-content: space-around;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*多根轴线与交叉轴的对齐方式*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*align-content: center;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.orderStyle</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">order</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.orderStyle1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">order</span>: <span class="number">7</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.orderStyle2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">order</span>: <span class="number">6</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.orderStyle3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">order</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big orderStyle&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;orderStyle1&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;orderStyle2&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;orderStyle3&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b. flex-grow 用来定义项目的放大比例，默认为0，在为0的情况下，即使容器还有空间，项目也不会放大，当值大于零时容器还有空间余量的话则添加了该属性的项目会放大</p>
<p>c. flex-shrink  定义项目是否可压缩，默认值为1，若空间不够，该项目将被缩小，如果其中某一个项目的值被设置为0，则它的空间不会被压缩</p>
<p>d. flex-basis  定义了项目占据主轴的空间（设置项目的宽度，当项目添加了该属性后，width会失效）</p>
<p>e. align-self  设置某个项目在交叉轴上的对齐方式，其参数和align-items一致，当某个项目添加了该属性后，则会覆盖父容器上的align-itmes属性，其默认值为auto（表示继承父容器的align-itmes值）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*规定容器*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*主轴*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-direction: row-reverse;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-direction: column;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-direction: column-reverse;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*排列方式*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-wrap</span>: nowrap;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-wrap: wrap;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*flex-wrap: wrap-reverse;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*主轴对齐方式*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*justify-content: flex-start;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*justify-content: flex-end;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*justify-content: space-around;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.fs</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-basis</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-self</span>: flex-end;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.as</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-self</span>: flex-start;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fs&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;as&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>11<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>f. flex属性，该属性相当于flex-grow，flex-shrink，flex-basis的简写，默认值0,1 auto</p>
]]></content>
  </entry>
  <entry>
    <title>CSS动画</title>
    <url>/2022/07/15/CSS%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/35eqd6.png"></p>
<span id="more"></span>

<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>CSS动画是W3C于2009年发布3D变形动画（标准草案），在年底发布了2D变形动画<br>浏览器支持使用代码形成网页动画，并且有些浏览器在添加时为了更好的兼容性，需要添加浏览器引擎的私有属性<br>1谷歌：-webkit-<br>2火狐：-moz-<br>3IE9：-ms-<br>4其它一些浏览器不需要添加这些私有属性</p>
<h2 id="CSS-2D动画"><a href="#CSS-2D动画" class="headerlink" title="CSS 2D动画"></a>CSS 2D动画</h2><p>●2D动画可以用于元素的旋转，缩放，位移等<br>●基本语法</p>
<table>
<thead>
<tr>
<th>transform:none|transform-function</th>
</tr>
</thead>
<tbody><tr>
<td>none为默认值</td>
</tr>
<tr>
<td>transform-function：变形函数（变形函数可以是一个，也可以是多个函数列表）   函数是以()结尾</td>
</tr>
</tbody></table>
<p>●常见的变形函数<br>○translate():移动元素<br>○scale():元素缩放，可以是任意尺寸发生变形<br>○rotate():旋转元素，取一个度数值，度数的后缀为deg，当度数为正时为顺时针旋转，为负时为逆时针旋转<br>○skew()：元素斜切，取度数值让元素发生形状变化<br>●旋转rotate()<br>○让元素逆时针或顺时针旋转</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">       <span class="comment">/*伪类样式：当鼠标悬停在元素上时触发里面的样式属性*/</span></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>位置移动translate(左值，上值)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.two</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>,<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>放大缩小（scale(宽度放大倍数,高度放大倍数)    当放大时两个值大于1，如果值位于0,1之间时为缩小）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>这是1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>斜切（skew(Y轴角度，X轴角度)），当度数为正值时从左边斜切，为负值时从右边斜切</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">45deg</span>,<span class="number">10deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="简易照片墙"><a href="#简易照片墙" class="headerlink" title="简易照片墙"></a>简易照片墙</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.PBox</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-wrap</span>: nowrap;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.PBox</span> <span class="selector-tag">dl</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">10%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*为了让照片看起来有那么点感觉，这里添加一个阴影*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">10px</span> <span class="number">30px</span> <span class="number">#8c8c8c</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.PBox</span> <span class="selector-tag">dt</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.PBox</span> <span class="selector-tag">dt</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.PBox</span> <span class="selector-tag">dd</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*因为标签有一些默认的属性值，它在标签执行时就自动加载了，</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            我们可以通过来提升自定义属性优先级来覆盖它*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0px</span><span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*定义动画样式，让照片墙看起来不要那么规整*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.trans1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">5deg</span>,<span class="number">2deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.trans2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.9</span>,<span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.trans3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">25deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.trans4</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>) <span class="built_in">scale</span>(<span class="number">1.1</span>,<span class="number">1.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.trans5</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">5deg</span>,<span class="number">2deg</span>) <span class="built_in">scale</span>(<span class="number">0.9</span>,<span class="number">0.9</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--网页版的照片墙，一共两行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;PBox&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单个照片--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;PBox&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单个照片--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans5&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;trans4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是照片名称<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><ul>
<li>过渡是元素从一种样式逐渐改变成另一种样式</li>
<li>语法</li>
</ul>
<p>transition:过渡属性名称 [时间][效果]</p>
<table>
<thead>
<tr>
<th>过渡属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>transition</td>
<td>简写，该属性中包含了所有过渡属性</td>
</tr>
<tr>
<td>transition-property</td>
<td>规定应用过渡的CSS属性名称</td>
</tr>
<tr>
<td>transition-duration</td>
<td>过渡时间，默认为0</td>
</tr>
<tr>
<td>transition-delay</td>
<td>过渡从什么时候开始</td>
</tr>
<tr>
<td>…….</td>
<td>……..</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="comment">/*transform: skew(45deg,10deg);*/</span></span></span><br><span class="line"><span class="language-css">           <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">           <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）-长按（-active）"><a href="#通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）-长按（-active）" class="headerlink" title="通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）"></a>通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//长按案例</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*transform: skew(45deg,10deg);*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>这是1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><ul>
<li>使用Animation功能可以实现更加复杂的动画</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>初始值</th>
</tr>
</thead>
<tbody><tr>
<td>animation</td>
<td>包含所有属性</td>
<td></td>
</tr>
<tr>
<td>animation-name</td>
<td>动画名称</td>
<td>none</td>
</tr>
<tr>
<td>animation-duration</td>
<td>动画时间</td>
<td>0</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>动画播放方式</td>
<td>ease</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>动画播放的次数</td>
<td>1，infinite为重复播放</td>
</tr>
</tbody></table>
<ul>
<li><p>制作动画需要以下两步</p>
</li>
<li><ul>
<li>第一步：需要在样式表中添加动画过程属性</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@-webkit-keyframes name &#123;</span><br><span class="line">    /*动画开始时属性样式*/</span><br><span class="line">    0%&#123;</span><br><span class="line">    /*样式属性：属性值*/</span><br><span class="line">    &#125;</span><br><span class="line">    /*动画结束时属性样式*/</span><br><span class="line">    100%&#123;</span><br><span class="line">    /*样式属性：属性值*/</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes name &#123;</span><br><span class="line">    /*动画开始时属性样式*/</span><br><span class="line">    0%&#123;</span><br><span class="line">    /*样式属性：属性值*/</span><br><span class="line">    &#125;</span><br><span class="line">    /*动画结束时属性样式*/</span><br><span class="line">    100%&#123;</span><br><span class="line">    /*样式属性：属性值*/</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>第二步：将制作好的动画通过animation引入给标签使用</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//图片翻转</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img/IMG_E1640.JPG&quot;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*引用动画*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>:rotateImg <span class="number">10s</span> infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*制作动画执行过程*/</span></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@-webkit-keyframes</span> rotateImg &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*图片起始不动*/</span></span></span><br><span class="line"><span class="language-css">                -webkit-<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">50%</span>&#123;</span></span><br><span class="line"><span class="language-css">                -webkit-<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">                -webkit-<span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">720deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>光盘旋转效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img/IMG_E1640.JPG&quot;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*引用大圆旋转动画*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: box <span class="number">30s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.lb</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img/IMG_1443.JPG&quot;</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-self</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: lb <span class="number">15s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*制作动画：大圆要顺时针旋转，稍慢*/</span></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@-webkit-keyframes</span> box &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">                -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">                -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*制作动画：小圆要逆时针旋转，稍快*/</span></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@-webkit-keyframes</span> lb &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">                -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">                -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3D旋转相册</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background</span>:<span class="number">#06081B</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">perspective</span>:<span class="number">5000px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">perspective</span>:<span class="number">5000px</span>;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateX</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateX</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateX</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">width</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">height</span>:<span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="attribute">margin</span>:<span class="number">300px</span> auto;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">animation</span>:rotate1 <span class="number">10s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">animation</span>:rotate1 <span class="number">10s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">animation</span>:rotate1 <span class="number">10s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;img/IMG_E1640.JPG&quot;</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">width</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">height</span>:<span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">	-webkit-box-reflect:below <span class="number">20px</span> <span class="built_in">-webkit-linear-gradient</span>(top,<span class="built_in">rgba</span>(<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">0</span>),<span class="built_in">rgba</span>(<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">0</span>) <span class="number">30%</span>,<span class="built_in">rgba</span>(<span class="number">250</span>,<span class="number">250</span>,<span class="number">250</span>,<span class="number">0.5</span>));</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img1</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img2</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">36deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">36deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">36deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img3</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">72deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">72deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img4</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">108deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">108deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">108deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img5</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">144deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">144deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">144deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img6</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img7</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">216deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">216deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">216deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img8</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">252deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">252deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">252deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img9</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">288deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">288deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">288deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.img10</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">324deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">324deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">324deg</span>) <span class="built_in">translateZ</span>(<span class="number">300px</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@-moz-keyframes</span> rotate1 &#123;</span></span><br><span class="line"><span class="language-css">	<span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;<span class="keyword">@-webkit-keyframes</span> rotate1 &#123;</span></span><br><span class="line"><span class="language-css">	<span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">	-webkit-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">	-moz-<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1642.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1644.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_E1640.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_1444.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_1440.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_1439.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_1430.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img7&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_1427.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_1429.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img9&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/IMG_1443.JPG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>定位(position)</p>
</li>
<li><ul>
<li>属性</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>absolute：绝对定位   会让元素脱离文档流，会参照第一个父元素进行定位</li>
<li>fiexd：规定位置，将元素固定在某个位置不动，不管网页怎么拖动，该元素始终不动</li>
<li>relative：相对定位，相对于正常位置进行定位</li>
<li>inherit：继承，规定添加了该属性的元素继承它父元素的定位属性</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>注：添加了定位后，对于标签位置移动时不使用margin，而使用left,right,top,bottom</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.rows</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cols</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ee3fb3</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#50eecd</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.lb</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#17ff0a</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rows&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cols c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cols c2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rows&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cols c2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cols c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.b1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#50eecd</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.b2</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#41ee4e</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.b3</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#edee4f</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.b4</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ee3b13</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.b5</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#c25eee</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.fixedDemo</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#17ff0a</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fixedDemo&quot;</span>&gt;</span>若干国粹<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Java语言概述</title>
    <url>/2022/07/16/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h1><h2 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h2><h3 id="Java发展简史"><a href="#Java发展简史" class="headerlink" title="Java发展简史"></a>Java发展简史</h3><p>Java是由Sun公司于1995年5月推出的)ava程序设计语言和)ava平台的总称，Java语言是可以编写跨平台，分布式应用软件的面向对象的程序设计语言。</p>
<p>1998年12月Sun公司发布了Java历史上最重要的一个JDK版本：JDK1.2,JSP&#x2F;Servlet等规范，并且将Java一分为三。      J2ME:主要用于移动设备和信息家电等设备的编程      J2SE:Java技术的核心和技术      J2EE:Java技术中应用最广泛的部分</p>
<h3 id="Java程序运行的机制"><a href="#Java程序运行的机制" class="headerlink" title="Java程序运行的机制"></a>Java程序运行的机制</h3><p>C语言在编写完程序后要经过编译以后才能运行，Java也是如此，Java程序要想运行，也需要经过编译的阶段，但是和C语言不同的是Java编译过后，并不会生成特定的平台机器码，而是一种与平台无关的字节码（.class件），然而这种文件并不能直接执行，而是运行在Java虚拟机中，由Java虚拟机来解释执行。也就是说如果要运行一个Java程序，必须经历以下3个阶段。</p>
<p><img src="https://files.catbox.moe/cf44z5.png" alt="img"></p>
<p>其中Java源代码编译成字节码的过程由Java编译器完成，生成的是平台无关的字节码。这些字节码并不依赖于特定的平台，只面向Java虚拟机(Java Virtual Mechine,简称JVM,不同平台的JVM是不同的，但是他们都遵循共同的JVM规范。这也是Java跨平台的核心部分，只要为对应平台实现了对应的虚拟机，编译后的字节码就可以在不同的平台上运行。总结起来Java跨平台实现的核心原理包括以下两点：</p>
<p>1.Java源代码在运行之前会先根据JVM规范生成平台无关的字节码文件，也就是class文件，字节码文件不依赖于任何平台。</p>
<p>2.Java为不同平台实现了对应的虚拟机，JVM在加载字节码文件后由WM生成对应平台的计算机指令。</p>
<h3 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h3><p>1.简单性：Java在开发时借鉴了C语言的许多语法，并目屏弃了C中不好的设计，如头文件、指针、结构体、多继到等等，并目新增了垃极回收机制使得程序员无需关注内存的分配与释放，把更多的精力放在业务本身。</p>
<p>2.面向对象：面向对象是一种编程思想，相对于面向过程来说，具备一定的优越性，简单来说这种思想将重点放在数据和对象的接口上。打个比方，一个建筑师关注的应该是建筑本身，而不是这栋建筑使用的是什么工具和流程制造的。</p>
<p>3.分布式：Java提供了JSP&#x2F;Servleti规范以后，使得Java应用程序能够通过URL打开和访问网络上的对象。</p>
<p>4.安全性：由于Java具有分布式的特点，Java在安全方面投入了很大的精力，够防范各种攻击。</p>
<p>5.多线程：随着互联网的发展，开发者越来越关注并发性，例如天猫双十一活动每秒的请求量数以百万计算，这不但考验服务器硬件，也考验看服务器编程语言的性能，Java提供的多线程以及并发偏程，很大程度上解决了局并发存在的问题。</p>
<p>6.可移植：正是因为Java提出的跨平台策略使得Java的可移植性具备了操作空间，我们知道Java对于不同的平台开发了对应的JVM,而程序运行前由Java编译器将源代码编译成了平台无关的字节码文件，因此不管是在什么平台开发的源程序，编译后都可以运行在不同平台上的JVM中。</p>
<h2 id="Java下载与安装"><a href="#Java下载与安装" class="headerlink" title="Java下载与安装"></a>Java下载与安装</h2><p>JDK下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<h3 id="Java安装目录简介"><a href="#Java安装目录简介" class="headerlink" title="Java安装目录简介"></a>Java安装目录简介</h3><p>·bin:该目录下主要存放DK的各种工具命令.</p>
<p>·conf:该目录下主要存放JDK的相关配置文件。</p>
<p>·include:该目录下主要存放了一些平台的头文件，</p>
<p>·jmods:该目录下主要存放了JDK的各种模块。</p>
<p>·Iega:该目录下主要存放了JDK各模块的授权文档。</p>
<p>·lib:该目录下主要存放了JDK工具的一些补充jar包和源代码。</p>
<h3 id="Java环境变量配置"><a href="#Java环境变量配置" class="headerlink" title="Java环境变量配置"></a>Java环境变量配置</h3><p>开发一个应用需要经历两个步骤：</p>
<p>1.编写源代码</p>
<p>2.将编写好的源代码进行编译，编译成平台无关的class文件这两个命令对应的就是JDK安装目录中bin目录下的两个应用程序：java.exe,javac.exe,现在如果要去开发一个应用程序，并使得其能正常运行，我们还需要配置环境变量。</p>
<p>配置环境变量的步骤如下：</p>
<p>1.配置JAVA_HOME</p>
<p>在系统环境变量中新建变量名：JAVA_HOME(不区分大小写)，变量值便是jDK的安装路径</p>
<p>2.配置Path</p>
<p>和配置JAVA_HOME一样，新建环境变量PTAH，变量值是JDK安装目录下得bin目录。如果系统变量中已经存在PATH，不要删除PATH中的值，在已有内容的后面添加“；”继续配置Java即可.</p>
<p>3.配置CLASSPATH</p>
<p>在配置好JAVA_HOME和PATH以后，继续配置CLASSPATH，变量值为JDK安装路面下得lib目录。需要注意的是，从JDK 1.5以后，CLASSPATH是可以不配置的。</p>
<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="记事本编写HelloWorld"><a href="#记事本编写HelloWorld" class="headerlink" title="记事本编写HelloWorld"></a>记事本编写HelloWorld</h3><ol>
<li>在D盘根目录新建一个记事本，命名为hello</li>
<li>在记事本输入以下代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>保存后关闭文件，并修改文件的拓展名为.java</li>
<li>打开cmd，进入D盘，hello所在位置</li>
<li>输入命令对源文件进行编译：javac Hello.java</li>
<li>输入命令运行Java：java Hello</li>
</ol>
<p><strong>注意：此处的命令并不区分大小写，当使用javac编译完程序后使用java命令运行程序，此时我们只写文件名即可，并不需要写扩展名</strong>按照以上步骤操作以后你会看到窗口中打印了Hello World,自此，我们已经开发了自己的第一个Java程序，下面我们对上述代码进行简单的解释：</p>
<p>1.class:是java中的关键字，用于声明一个类，Hello表示是类名</p>
<p>2.public static是修饰符</p>
<p>3.void表示方法没有返回值</p>
<p>4.main表示方法名，main方法也是程序的入口</p>
<p>5.System.out.println表示在控制台打印，其中System首字母大写</p>
<h3 id="Java源文件命名规则"><a href="#Java源文件命名规则" class="headerlink" title="Java源文件命名规则"></a>Java源文件命名规则</h3><p>Java源文件的命名需要遵守以下规则:</p>
<p>1.文件的扩展名或后缀名必须是java</p>
<p>2.文件名必须和类中pulic修饰的类名称相同</p>
<h3 id="对Java的认识"><a href="#对Java的认识" class="headerlink" title="对Java的认识"></a>对Java的认识</h3><p>Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。</p>
<h3 id="Java的平台无关性是怎么实现的"><a href="#Java的平台无关性是怎么实现的" class="headerlink" title="Java的平台无关性是怎么实现的"></a>Java的平台无关性是怎么实现的</h3><p>1.什么是平台无关性</p>
<p>平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行（Write Once ,Run Anywhere）。</p>
<p>也就是说，用Java创建的可执行二进制程序，能够不加改变的运行于多个平台。</p>
<p>平台无关性好处</p>
<p>作为一门平台无关性语言，无论是在自身发展，还是对开发者的友好度上都是很突出的。</p>
<p>因为其平台无关性，所以Java程序可以运行在各种各样的设备上，尤其是一些嵌入式设备，如打印机、扫描仪、传真机等。随着5G时代的来临，也会有更多的终端接入网络，相信平台无关性的Java也能做出一些贡献。</p>
<p>对于Java开发者来说，Java减少了开发和部署到多个平台的成本和时间。真正的做到一次编译，到处运行。2.平台无关性的实现</p>
<p>对于Java的平台无关性的支持，就像对安全性和网络移动性的支持一样，是分布在整个Java体系结构中的。其中扮演者重要的角色的有Java语言规范、Class文件、Java虚拟机（JVM）等。</p>
<p><strong>Java到底是是如何运行起来的</strong></p>
<p>在计算机世界中，计算机只认识0和1，所以，真正被计算机执行的其实是由0和1组成的二进制文件。日常开发使用的C、C++、Java、Python等都属于高级语言，而非二进制语言。所以，想要让计算机认识我们写出来的Java代码，那就需要把他”翻译”成由0和1组成的二进制文件。这个过程就叫做编译。负责这一过程的处理的工具叫做编译器。</p>
<p>在Java平台中，想要把Java文件，编译成二进制文件，需要经过两步编译，前端编译和后端编译：</p>
<p>前端编译主要指与源语言有关但与目标机无关的部分。Java中，我们所熟知的javac的编译就是前端编译。除了这种以外，我们使用的很多IDE，如eclipse，idea等，都内置了前端编译器。主要功能就是把.java代码转换成.class代码。这里提到的.class代码，其实就是Class文件。</p>
<p>后端编译主要是将中间代码再翻译成机器语言。Java中，这一步骤就是Java虚拟机来执行的。</p>
<p><strong>Java虚拟机</strong></p>
<p>所谓平台无关性，就是说要能够做到可以在多个平台上都能无缝对接。但是，对于不同的平台，硬件和操作系统肯定都是不一样的。</p>
<p>对于不同的硬件和操作系统，最主要的区别就是指令不同。比如同样执行a+b，A操作系统对应的二进制指令可能是10001000，而B操作系统对应的指令可能是11101110。那么，想要做到跨平台，最重要的就是可以根据对应的硬件和操作系统生成对应的二进制指令。</p>
<p>而这一工作，主要由我们的Java虚拟机完成。虽然Java语言是平台无关的，但是JVM确实平台有关的，不同的操作系统上面要安装对应的JVM。Java之所以可以做到跨平台，是因为Java虚拟机充当了桥梁。他扮演了运行时Java程序与其下的硬件和操作系统之间的缓冲角色。</p>
<p><strong>字节码</strong></p>
<p>各种不同的平台的虚拟机都使用统一的程序存储格式——字节码（ByteCode）是构成平台无关性的另一个基石。Java虚拟机只与由自己码组成的Class文件进行交互。</p>
<p>我们说Java语言可以Write Once ,Run Anywhere。这里的Write其实指的就是生成Class文件的过程。</p>
<p>因为Java Class文件可以在任何平台创建，也可以被任何平台的Java虚拟机装载并执行，所以才有了Java的平台无关性。</p>
<p><strong>Java语言规范</strong></p>
<p>已经有了统一的Class文件，以及可以在不同平台上将Class文件翻译成对应的二进制文件的Java虚拟机，Java就可以彻底实现跨平台了吗？</p>
<p>其实并不是的，Java语言在跨平台方面也是做了一些努力的，这些努力被定义在Java语言规范中。</p>
<p>比如，Java中基本数据类型的值域和行为都是由其自己定义的。而C&#x2F;C++中，基本数据类型是由它的占位宽度决定的，占位宽度则是由所在平台决定的。所以，在不同的平台中，对于同一个C++程序的编译结果会出现不同的行为。</p>
<p>举一个简单的例子，对于int类型，在Java中，int占4个字节，这是固定的。</p>
<p>但是在C++中却不是固定的了。在16位计算机上，int类型的长度可能为两字节；在32位计算机上，可能为4字节；当64位计算机流行起来后，int类型的长度可能会达到8字节。</p>
<p>通过保证基本数据类型在所有平台的一致性，Java语言为平台无关性提供强了有力的支持。</p>
<p><strong>Java语言规范</strong></p>
<p>通过规定Java语言中基本数据类型的取值范围和行为</p>
<p><strong>Class文件</strong></p>
<p>所有Java文件要编译成统一的Class文件</p>
<p><strong>Java虚拟机</strong></p>
<p>通过Java虚拟机将Class文件转成对应平台的二进制文件等</p>
<p>Java的平台无关性是建立在Java虚拟机的平台有关性基础之上的，是因为Java虚拟机屏蔽了底层操作系统和硬件的差异。</p>
]]></content>
  </entry>
  <entry>
    <title>Java控制流程和数组</title>
    <url>/2022/07/19/Java%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h1><p>三类程序结构：顺序结构、分支结构、循环结构</p>
<p>分支结构：用于实现根据条件来选择性执行某一段代码，因此分支结构也被叫做选择结构。<br>循环结构：则是用于实现根据循环条件重复执行某段代码。<br>Java提供了if和switch两种分支语句，还有while,do while和for三种盾环语句。</p>
<p>JDK5还提供了增强for盾环，foreach循环。以更简洁的书写方式遍历集合、数组。</p>
<h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>顺序结构：代码都是自上而下，依次执行，不会出现跳行执行、逆向执行等情况。</p>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>java提供了两种常见的分支结构：if语句和switch语句，其中if语句使用布尔表达式或者布尔值作为分支结构条件来进行分支控制。</p>
<h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><p>if语句使用布尔表达式或者布尔值作为分支条件来进行分支控制，语句有以下三种形式。<br>单分支结构(一个if)、双分支结构（if..else）、多分支结构（if、else if）</p>
<h3 id="switch条件语句"><a href="#switch条件语句" class="headerlink" title="switch条件语句"></a>switch条件语句</h3><p>switch语句有一个控制表达式和多个case标签组成，和if语句不同的是，switch语句后面的控制表达式的数据类型只能是byte、short、char、int四种类型，从Java7以后添加了枚举类型和String类型<br>switch语句通常需要在case标签后紧跟一个代码块，case标签作为这个代码块的标识，switch语句的语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> condition1:</span><br><span class="line">        &#123;</span><br><span class="line">        	statement(s)    </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">case</span> condition2:</span><br><span class="line">        &#123;</span><br><span class="line">        	statement(s)    </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">     <span class="keyword">case</span> condition2:</span><br><span class="line">        &#123;</span><br><span class="line">        	statement(s)    </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     ....</span><br><span class="line">      <span class="keyword">case</span> condition N:</span><br><span class="line">        &#123;</span><br><span class="line">        	statement(s)    </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:&#123;</span><br><span class="line">        statement (s)</span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch分支语句的执行是先对expression求值，然后依次匹配case，如果没有与之匹配的，则执行default</p>
<h3 id="分支嵌套"><a href="#分支嵌套" class="headerlink" title="分支嵌套"></a>分支嵌套</h3><p>如果把一个分支结构放进另一个分支结构中，这种情况叫做分支嵌套，分支嵌套可以是if中嵌套switch,switch中嵌套if,也可以是if互相嵌套或者switch自身嵌套。例如，计算一个年份是否是闰年。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入年份：&quot;</span>);</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		<span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(year%<span class="number">100</span>==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>) &#123;</span><br><span class="line">					System.out.println(year+<span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(year+<span class="string">&quot;不是闰年&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(year+<span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(year+<span class="string">&quot;不是闰年&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环结构是指在满足某个循环条件的情况下，反复执行同一段代码，直到不满足循环条件为止。被循环执行的代码叫做循环体。当反复执行循环体时，要在适当的时机修改循环条件，从而结束循环，否则循环会一直进行下去，形成死盾环。一个恰当的盾坏结构应该包含以下4个组成部分：<br>1.初始化语句：一个或多个语句，这些语句用来完成一些初始化工作，在循环开始之前执行<br>2.循环条件：循环条件是一个布尔表达式，该表达式决定是否执行循环体<br>3.循环体：这部分是循环的主题，如果循环条件允许，该代码块将被反复执行，如果这个代码块只有一条语句，则代码块的花括号可以管略。<br>4.迭代语句：这部分在一次循环体执行结束后执行，在循环条件求值前执行，通常用于控制循环条件中的变量，使得循环在合适的时候结束。</p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>([init_statment];[test_exression];[iteration_statement])&#123;</span><br><span class="line">    statement;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化语句只在循环条件开始前执行依次，对于for循环而言，循环条件总比循环体要多执行一次，因为最后一次执行循环条件返回false，将不再执行循环体。</p>
<p><strong>注意：除非特殊情况尽量不要在循环体内修改循环变量的值。</strong></p>
<p>for循环圆括号中只有两个分号是必须的，初始化语句、循环条件、迭代语句部分都是可以省略的，如果省略了循环条件，则这个循环条件默认为true，将产生死循环。例如下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EndlessForLoop</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;-----endless-----&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[init_statement]</span><br><span class="line"><span class="keyword">while</span>(test_expression)&#123;</span><br><span class="line">	statement;</span><br><span class="line">    [iteration_statment]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>while循环每次执，行循环体，之前，先对test_expression循环条件求值，如果循环条件为true,则执行循环体部分。从上述伪代码中来看，iteration_statment位于循环体的最后，因此只有当循环体成功执行完成时，while循环才会执行iteration_statmenti语句。</p>
<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><p>do while循环与while循环的区别在于：while循环是先判断循环条件，如果条件为真则执行循环体；而do while循环则新执行循环体，然后才判断循环条件，如果循环条件为真，则执行下一次循环，否则终止循环。do while循环语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[init_statement]</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	statement;</span><br><span class="line">    [iteration_statment]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(test_expression);</span><br></pre></td></tr></table></figure>

<p><strong>注意：do while循环的循环条件必须有一个分号，该分号代表该循环结构结束。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (++i&gt;<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;循环条件至少执行1次&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(i);</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;<span class="keyword">while</span>(<span class="literal">false</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(k);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>++i&#x3D;1执行后的值为1，此时该表达式结果为false,不执行循环体，而do while循环中循环条件直接是false,但是此时仍l旧执行了循环体，k的值成为了1。</p>
<h2 id="控制循环结构"><a href="#控制循环结构" class="headerlink" title="控制循环结构"></a>控制循环结构</h2><p>Java提供了continue和break控制循环结构</p>
<h2 id="使用break结束循环"><a href="#使用break结束循环" class="headerlink" title="使用break结束循环"></a>使用break结束循环</h2><p>break：用于完全结束一个循环，跳出循环体，不管哪种循环，一旦循环体遇到break，系统将完全结束该循环，开始执行循环结构以后的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">7</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>当i&#x3D;7时，直接跳出循环</p>
<h2 id="使用continue跳过此次循环"><a href="#使用continue跳过此次循环" class="headerlink" title="使用continue跳过此次循环"></a>使用continue跳过此次循环</h2><p>continue的功和break有点类似，区别是continue只是跳出此次循环，继续执行剩下的循环，并不是完全终止循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">7</span>) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><p>如果把一个循环放进另一个循环体内，那么就可以形成循环嵌套，循环嵌套可以是上述3种循环的任意嵌套，例如：for循环和while循环的相互嵌套，while循环和do while循环的相互嵌套，也可以是while循环和do while循环的相互嵌套。</p>
<p>当程序遇到循环嵌套是，如果外层循环的循环条件允许，则开始执行外层循环的循环体，而内层循环将被外层循环的循环体来执行，只是内层循环需要反复执行自己的循环体而已。当内层循环执行结束，且完成循环的循环体执行结束时，在再次计算外层循环的循环条件，决定是否再次执行外层循环的循环体。</p>
<p>示例：打印等腰三角形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">5</span>-i; k &gt; <span class="number">0</span>; k-- ) &#123;</span><br><span class="line">				System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; (<span class="number">2</span>*i) - <span class="number">1</span>; j++) &#123;</span><br><span class="line">				System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>示例：冒泡排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;趟比较:&quot;</span>);</span><br><span class="line">        	</span><br><span class="line">        	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> -i; j++) &#123;</span><br><span class="line">        		<span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        			<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        			temp = arr[j];</span><br><span class="line">        			arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">        			arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        		&#125;</span><br><span class="line">        		System.out.print(<span class="string">&quot;第&quot;</span>+(j+<span class="number">1</span>)+<span class="string">&quot;次比较:&quot;</span>);</span><br><span class="line">        		System.out.println(Arrays.toString(arr));</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>示例：二分查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>&#125;;</span><br><span class="line">		<span class="type">int</span> <span class="variable">cc</span> <span class="operator">=</span> Demo11.binarySearch(a, <span class="number">3</span>);</span><br><span class="line">		System.out.println(cc);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] srcArray, <span class="type">int</span> des)</span> &#123;</span><br><span class="line">	    <span class="comment">//定义初始最小、最大索引</span></span><br><span class="line">	    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> srcArray.length - <span class="number">1</span>;<span class="comment">//5</span></span><br><span class="line">	    <span class="comment">//确保不会出现重复查找，越界</span></span><br><span class="line">	    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">	        <span class="comment">//计算出中间索引值</span></span><br><span class="line">	        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (end + start)&gt;&gt;&gt;<span class="number">1</span> ;<span class="comment">//防止溢出//3</span></span><br><span class="line">	        <span class="keyword">if</span> (des == srcArray[middle]) &#123;</span><br><span class="line">	            <span class="keyword">return</span> middle;</span><br><span class="line">	        <span class="comment">//判断下限</span></span><br><span class="line">	        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (des &lt; srcArray[middle]) &#123;</span><br><span class="line">	            end = middle - <span class="number">1</span>;</span><br><span class="line">	        <span class="comment">//判断上限</span></span><br><span class="line">	        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	            start = middle + <span class="number">1</span>;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="comment">//若没有，则返回-1</span></span><br><span class="line">	    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//类是对象的模板，对象是类的实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环嵌套中的break"><a href="#循环嵌套中的break" class="headerlink" title="循环嵌套中的break"></a>循环嵌套中的break</h3><p>break语句仅结束其所在的循环，例如在双层循环嵌套中，只结束内层循环，而不能结束外层盾环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(j==<span class="number">2</span>) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;内存循环：&quot;</span>+j);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;外存循环：&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>运行上述代码，我们可以发现break只是结束了内层自己所在的循环，外层循环并没有被结束，仍旧在继续循环。那么，如何让break结束外层循环呢，此时就要在break后面紧跟一个标签了，这个标签用于表示一个外层盾环。Java中的标签就是一个紧跟着冒号的标识符，与其他语言不同的是，Java中的标签只有放在循环语句前才有作用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		outer:</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">			<span class="comment">//内层循环</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(j==<span class="number">1</span>) &#123;</span><br><span class="line">					<span class="comment">//跳出outer所标识的循环</span></span><br><span class="line">					<span class="keyword">break</span> outer;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;i的值为：&quot;</span>+i+<span class="string">&quot;,j的值为：&quot;</span>+j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>程序从外层循环进入内层循环，当j等于1时，程序遇到一个break outer语言，该语句将会导致结束outer标签指定的循环，不是break所在的循环，而是结束break循环的外层循环。</p>
<p>需要注意的是，break后的标签必须是一个有效的标签，这个标签必须在break语句所在的循环之前定义，或者在所在循环的外层循环之前定义。当然，如果把这个标签放在break语句所在的循环之前定义，也就失去了标签的意义，因为break默认就是结束其所在的循环。</p>
<h3 id="循环嵌套中使用continue"><a href="#循环嵌套中使用continue" class="headerlink" title="循环嵌套中使用continue"></a>循环嵌套中使用continue</h3><p>将上例中break换成continue，此处continue的作用不变，只是在多层循环中，continue会忽略当前循环，直接到外层循环继续进行循环</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><strong>数组就是：具有相同数据类型且按照一定次序排列的一组数据的集合。</strong></p>
<p>在数组的概念中需要注意以下几点：<br>1.具有相同的数据类型，也就是说存放在一个数组的元素必须数据类型相同，不能把不同类型的元素放进同一个数组。<br>2.按照一定次序排列，数组中的元素是有序的，这句话包含两层含义，第一：元素是有顺序的。也可以理解为每个数组元素都有一个编号，这个编号是连续的（我们通常把这个编号叫做数组的下标或者索引）；第二：元素存放的顺序<br>和取出的顺序是一致的，也就是说存放元素的顺序是10,20,30,40。那么取出的顺序也是10,20,30,40。<br>3.一组数据，一组数据是指元素的个数可以是0个，也可以是1个，也可以是多个，Java中允许数组中有0个元素，也就是我们所说的空数组。</p>
<h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h2><p>Java的数据类型可以分为两大类：基本类型和引用类型，其中基本类型有8个，引用类型则包括：对象，数组，接口。因此数组也是一种数据类型。数组的定义方式有两种语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type[] arrayName;</span><br><span class="line">type arrayName[];</span><br></pre></td></tr></table></figure>

<p>int类型是一个基本类型，而int[]则是一个引用类型。</p>
<p>数组初始化一旦完成，数组在内存中所占的空间将被固定下来，长度就不会改变，若长度改变，则一定</p>
<p>数组是一种引用类型的变量，当仅仅是定义了数组后，仅仅是定义了一个引用变量，这个变量还未指向任何有效内存，此时整个数组还不能使用，只有对数组初始化后才能使用。</p>
<h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>Java中数组必须先初始化，然后才可以使用。所谓初始化，就是为数组的元素分配内存空间，并为每个元素赋初始值。<br>数组的初始化有两种方式：<br>1.静态初始化：初始化时由程序员指定每个元素的初始值。由系统觉定数组的长度<br>2.动态初始化：初始化是程序员指定数组长度，由系统为元素分配初始值。<br>静态初始化语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arrayName = <span class="keyword">new</span> <span class="title class_">type</span>[]&#123;e1,e2,e3&#125;</span><br><span class="line">arrayName = &#123;e1,e2,e3&#125;</span><br></pre></td></tr></table></figure>

<p>动态初始化只指定数组的长度，由系统为每个元素指定初始值。动态初始化的语法格式如下：<br>arrayName new type[length];<br>在上面的语法中，需要指定一个int类型的length参数，该参数指定了数组的长度，也就是可以容纳数组元素的个数，与静态初始化类型，此处的<br>type必须与定义数组时使用的type类型相同。动态初始化语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] ary  = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>]; </span><br></pre></td></tr></table></figure>

<p>执行动态初始化时，开发者只需指定数组的长度，即为每个元素指定所需的内存空间，系统将负责为这些数组元素分配初始值。指定初始值时，系统按如下规则分配初始值：<br>·数组元素的类型是基本类型中的整型(byte,short,int,Iong),则数组元素的初始值为0；<br>·数组元素的类型是基本类型中的浮点型(float,double),则数组元素的值是0.0；<br>·数组元素的类型是基本类型中的字符型(char),则数组元素的值是’\u0000’:<br>·数组元素的类型是基本类型中的布尔型(boolean),则数组元素的默认值是false。<br>·数组元素的类型是基本类型中的引用类型，则数组元素的默认值是null。</p>
<h2 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个整型数组，并对其动态初始化，此时数组中的元素都是默认值</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">5</span>];</span><br><span class="line"><span class="comment">//对数组的第二个元素进行赋值</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>遇到数组索引时，需要考虑java.lang.ArraryIndexOutOfBoundsException(数组越界异常)。</p>
<h3 id="for循环遍历数组"><a href="#for循环遍历数组" class="headerlink" title="for循环遍历数组"></a>for循环遍历数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">			a[i] = i+<span class="number">100</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">			System.out.println(a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="foreach遍历数组"><a href="#foreach遍历数组" class="headerlink" title="foreach遍历数组"></a>foreach遍历数组</h3><p>Java5以后，Java提供了更简洁遍历数组的方式：foreach循环。使用foreach遍历数组和集合元素时，无需获得数组和集合长度，无需根据索引来访问数组元素。</p>
<p>foreach我们可以理解为增强for循环，不需要开发者根据索引去数组中取值，系统会自动从数组a中取到每一个元素，并赋值给i，只需要打印i即可，这种方式也有效的避免了数组下标越界异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//定义一个整型数组，并对其静态初始化</span></span><br><span class="line">		<span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">		<span class="comment">//使用foreach遍历</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : a) &#123;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="深入数组"><a href="#深入数组" class="headerlink" title="深入数组"></a>深入数组</h2><h3 id="内存中的数组"><a href="#内存中的数组" class="headerlink" title="内存中的数组"></a>内存中的数组</h3><p>数组引用变量只是一个引用，这个引用变量可以指向任何有效内存，只有当该引用指向有效内存后，才可以通过该数组变量访问数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> [] a;</span><br></pre></td></tr></table></figure>

<p>此时只是定义了一个数组类型的变量，该变量没有指向任何有效内存，如果此时访问数组元素时，将会引发空指针异常。</p>
<p>与所有引用变量相同的是，引用变量是访问真实对象的根本方式，也就是说，如果希望在程序中访问数组对象本身，只能通过数组的引用变量来访问。</p>
<p>实际的数组对象被存储在堆内存中，如果引用该数组对象的数组引用变量是一个局部变量，那么它将被存储在栈内存中。数组在内存中的示意图如下图所示：</p>
<p><img src="https://files.catbox.moe/inscuk.png"></p>
<h3 id="数组的长度不能被改变"><a href="#数组的长度不能被改变" class="headerlink" title="数组的长度不能被改变"></a>数组的长度不能被改变</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">		<span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">		a = b;</span><br><span class="line">		System.out.println(a.length);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>运行上述代码，发现数组a的长度发生了变化</p>
<p>当代码执行完第10行时，此时数组a和数组b的内存示意图如下：</p>
<p><img src="https://files.catbox.moe/4tv5yo.png"></p>
<p>当代码执行第11行时，此时内存中发生如下变化：</p>
<p><img src="https://files.catbox.moe/pm1dc7.png"></p>
<p>从图示中可以看出，此时a并不指向原来的内存空间，而是和b一样指向了相同的内存空间，而原来a指向的内存还在内存中，也就是说变的仅仅是变量a指向的内存空间，而不是数组长度，a原来指向的数组长度还是4，并没有发生变化</p>
<p><strong>数组一旦被初始化后长度不可变，如果发生了变化，一定是指向了新的数组。</strong></p>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>Java语言里提供了多维数组的支持，但是实际上并不存在多维数组，例如二维数组，完全可以认为是数组类型的数组：因为Java语言里的数组类型是引用类型，因此数组变量其实是一个引用，这个引用指向真实数组的内存。数组元素的类型也可以是引用，如果数组元素的引用再次指向真实的数组内存，此时就产生了多维数组，换句话说，多维数组本质都是一维数组。我们可以把数组当成一种数据类型，可以理解为数组类型的数组，二维数组的语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type[] [] a = <span class="keyword">new</span> <span class="title class_">type</span>[length1][length2]</span><br></pre></td></tr></table></figure>

<p>下面通过实例来定义二维数组，并对其进行遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//此处可以理解为定义了一个3行4列的矩阵</span></span><br><span class="line">		<span class="comment">//也可以理解为外层的数组长度为3，即包含了3个数组</span></span><br><span class="line">		<span class="comment">//内存数组中每个数组有4个元素</span></span><br><span class="line">		<span class="type">int</span>[] [] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">				a[i][j] = i*j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Arrays.deepToString(a));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>通过上述代码我们可以理解为数组a是一个二维数组，也就是说数组a是长度为3的数组，而数组a中又存放了3个长度为4的数组，为每个元素赋值，<strong>deepToString</strong>则是Arrays工具类为我们提供了打印多维数组的方法。Arrays工具类会在下一小节讲解。</p>
<h2 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h2><p>Java提供了Arrays.工具类，里面包，含了一些方法，可以直接操作数组。<br>·int binarySearch(long[] a,long key):使用二分查找法查询key元素值在数组a中出现的索引，如果a数组不包含key元素，则返回负数，调用此方法时要求数组中的元素已经按升序排列。<br>T[] copyOf(T[] original,int newLength):该方法会把original数组复制成一个新数组，其中length:是新数组的长度，如果length.小于original数组的长度，则新数组就是原数组的前面length个元素，如果lenght大于original数组的长度，则新数组的前面元素就是原数组的所有元素，后面补充默认值，根据数组类型确定<br>·copyOfRange(T[] original,int from,int to):这个方法与前面的类以，但是这个方法只复制原数组form索引到to索引l的元素。<br>·boolean equals(type[] a,tyte[] a2):如果数组a和a2长度相等，并且a和a2每个元素也相等则返回true,否则返回false.。<br>·void fill((long[]a,I):该方法会把a数组的所有元素都赋值为val<br>·void sort(type[] a):该方法对a数组进行排序<br>·String toString(type[] a):该方法将一个数组转换成字符串，该方法按顺序吧多个元素连接在一起，元素之间用逗号隔开。<br><strong>实例一：复制数组1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">		<span class="comment">//如果length小于a数组长度，则只复制前n个元素</span></span><br><span class="line">		<span class="type">int</span>[] b = Arrays.copyOf(a, <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : b) &#123;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果length大于数组a的长度，多余元素则以默认值填充</span></span><br><span class="line">		<span class="type">int</span>[] c = Arrays.copyOf(a, <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : c) &#123;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实例二：复制数组2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">6</span>&#125;;</span><br><span class="line">		<span class="type">int</span>[] b = Arrays.copyOfRange(a, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : b) &#123;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>复制的元素时包含了form和to索引处的元素。需要注意的是，如果该方法的第三个参数超出了原数组长度，此时并不会抛出异常，会将原数组中所有的元素进行复制，空余的位置以默认值。</p>
]]></content>
  </entry>
  <entry>
    <title>Java数据类型和运算符</title>
    <url>/2022/07/19/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="Java数据类型和运算符"><a href="#Java数据类型和运算符" class="headerlink" title="Java数据类型和运算符"></a>Java数据类型和运算符</h1><p>Java是一门强类型语言，所谓的强类型语言，可以理解为包含以下2层含义：<br>1.所有的变量都必须先声明，后使用<br>2.变量的类型一旦确定，那么变量的值必须和数据类型相匹配<br>变量:可以理解为程序运行时内存中用于保存数据的一个存储区域，该存储区域有自己的名称、类型、和值。强类型语言可以在编译过程中发现源代码的错误，从而保证程序更加健壮。</p>
<h2 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h2><p>Java中将变量名和方法名以及类名统称为标识符，标识符命名规则如下：</p>
<p>1.标识符只由字母、数字、下划线(_)、和美元符号($)组成，但是不能以数字开头<br>2.标识符不能是Java的关键字和保留字、但是可以包含关键字和保留字<br>3.标识符不能包含空格以及其他特殊符号</p>
<h2 id="标识符命名方式"><a href="#标识符命名方式" class="headerlink" title="标识符命名方式"></a>标识符命名方式</h2><p>在Java中标识符的命名一般遵循以下两种命名方式：<br>1.Pascal命名法：所有单词的首字母均大写，例如StudentName,TeacherAge,这种命名法通常用于类名。<br>2.Camel命名法：第一个单词的首字母小写，其余单词首字母均大写。例如：productName,produceCount。这种命名法通常用于变量名及方法名。</p>
<h2 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h2><p>Java中数据类型可以分为两大类：基本类型和引用类型。其中基本类型又可以分为4类，分别是：整型、浮点型、布尔型和字符型</p>
<h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p><strong>整型通常包含以下4种：</strong><br>  byte: 一个byte类型整数在内存中占8位(bit)即1个字节，可以表示的数值范围为：-128一127<br>  short: 一个short类型整数在内存中占16位即2个字节，可以表示的数值范围为-2^15一一2^15-1<br>  int: 一个int类型整数在内存中占32位4字节，可以表示的数值范围为-2^31一2^31-1<br>  long: 一个long类型整数在内存中占64位8字节，可以表示的数值范围-2^63一一2^63-1</p>
<p>如果直接将一个较小的整数值(byte或者short类型的表示范围内)赋值给一个byte类型或者short变量，系统会自动把这个整数值当成byte或者short类型处理，因为在Java中定义一个整型变量。编译器会默认是int类型</p>
<p>如果使用一个巨大的整数值（超出了int类型能表示的范围），Java不会自动把这个整数当成long类型处理，如果希望编译器把这个正式当做long类型处理，应该在数值后添加”l”或者”L”.</p>
<h4 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h4><p>在Java中声明一个变量必须先指定数据类型（Java11之前），并对其进行初始化</p>
<h4 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h4><p>声明一个变量时，目的就是为了在变量中保存数据，并使用该数据。因此，当变量定义完毕后，需要对其进行初始化，所谓初始化，就是在为变量开辟的内容空间中保存一份数据。</p>
<p><img src="https://files.catbox.moe/tta4pz.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个byte类型的变量</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">//变量值超出了byte表示范围，编译器会报错</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="comment">//定义一个short类型变量</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">//定义一个整型的变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="comment">//定义一个long类型的变量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">2000L</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2000l</span>;</span><br></pre></td></tr></table></figure>

<p>Java中整数值有4种表示方式：十进制、二进制、十六进制、八进制，其中二进制的整数以0b或者0B开头；八进制的整数以0开头；十六进制的整数以0X或者0x开头，其中10-15分别以a-表示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0b1011</span>;</span><br><span class="line"><span class="comment">//八进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0111</span>;</span><br><span class="line"><span class="comment">//十六进制</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0x111</span></span><br></pre></td></tr></table></figure>

<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>Java中浮点型有两类：float和double.。Java的浮点型有固定的表示范围，Java的浮点数遵循1EEE754标准，采用二进制数据的科学计数法来表示浮点数，对于float类型，第1位是符号位，接下来的8位表示指数，在接下来的23位表示尾数；对于double类型的值，第1位也是符号位，接下来的11位表示指数，再接下来的52位表示尾数。</p>
<p>Java中浮点型有两种表示形式：<br>十进制：这种形式就是简单的浮点数，如：3.14,7.1等浮点型必须包含一个小数点，否则会被当成int类型处理<br>科学计数法：例如5.12e2(即5.12x102)<br>Java语言中浮点型默认的都是double类型的，如果要让Java把一个浮点数当故float类型处理，应该在这个浮点型后面添加后缀f或者F</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个浮点型</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">5.12</span>;</span><br><span class="line"><span class="comment">//定义一个float类型,此时编译器会报错，因为Java默认将浮点型都当做double类型，</span></span><br><span class="line"><span class="comment">//因此如果要声明一个float类型,应该添加F后缀</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">5.12</span>;<span class="comment">//编译错误</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">5.12F</span>;</span><br></pre></td></tr></table></figure>

<p>Java还提供了三个特殊的浮点数：正无穷大、负无穷大和非数，用于表示益出和出错。正无穷大用POSITIVE _INFINITY表示；负无穷大用NEGATIVE_INFINITY表示，非数通过NAN表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">//用正浮点数除以0得到正无穷大</span></span><br><span class="line">System.out.print(d1/<span class="number">0</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> -<span class="number">0.1</span>;</span><br><span class="line"><span class="comment">//用负浮点数除以0得到负无穷大</span></span><br><span class="line">System.out.print(d2/<span class="number">0</span>);</span><br><span class="line"><span class="comment">//对负数开方得到NAN</span></span><br><span class="line">System.out.println(Math.sqrt(-<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p><strong>注意：所有的正无穷大都是相等的，所有的负无穷大都是相等的，但是NAN与任何数值都不相等，甚至和NAN都不相等。另外，只有浮点数除以0才可以得到正无穷大或者负无穷大，如果一个整数除以0,则会抛出一个异常(算数异常：ArithmeticException: &#x2F; by zero)</strong></p>
<h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>字符型通常用于表示单个字符，字符型值必须要用单引号括起来，Java语言使用16位的Unicode字符集作为编码方式，而Unicode字符集支特世界上所有书面语言的字符，包括中文字符因此Java程序支持各种语言的字符。</p>
<p>字符型值有3种表示形式<br>·通过单个字符来指定字符型值：例如A’,’9等<br>·通过转义字符表示特殊字符型值，如’\n’，”\t’等：<br>·直接使用Unicode值来表示字符型格式为’\uxxxx’,其中xxxx表示一个十六进制的整数<br>Java中常用转义字符如下表：</p>
<p><img src="https://files.catbox.moe/jnhlb2.png"></p>
<p>字符型值也可以使用十六进制的编码方式表示，范围是u0000一一\uFFFF,一共可以表示65535个字符，其中前256个字符和ASCII码中字符一致。并且char类型也可以作为整型值使用</p>
<h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>布尔型只有boolean类型，用于表示逻辑真和假，在Java中布尔型的值只有true或者false,且不能用0或者非0表示。和其他数据类型也不能相互转换.<br>Java规范中并没有强制指定布尔型变量所占用的内存，即使布尔型变量只要1位就可保存，但是大部分计算机在分配内存时所允许的最小内存单元是字节，因此布尔类型实际上占用了8位</p>
<h2 id="基本类型转换"><a href="#基本类型转换" class="headerlink" title="基本类型转换"></a>基本类型转换</h2><p>在java应用中，经常需要不同数据类型之间进行相互转换，布尔型和其他类型不能相互转换，但是在剩余7种类型之间可以相互转换，转换方式有两种：自动类型转换和强制类型转换</p>
<h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>Java中当把一个表示范围小的数值或变量赋值给另一个表示范围大的变量时，系统将自动进行转换，反之则需要强制转换。</p>
<p><img src="https://files.catbox.moe/hqqiet.png"></p>
<p>箭头左边的数值类型可以自动转换为箭头右边的数值类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeCast1</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">		<span class="comment">//将byte类型变量a的值赋值给int类型变量b</span></span><br><span class="line">		<span class="comment">//此时将自动转换类型</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">		<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">		<span class="comment">//将int类型变量c的值赋值给float类型变量d</span></span><br><span class="line">		<span class="type">float</span> <span class="variable">d</span> <span class="operator">=</span> c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>表示范围大的值或变量赋值给表示范围小的变量时，需要进行强制转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeCast2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//double类中转int类型</span></span><br><span class="line">		<span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5.12</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>)a;</span><br><span class="line">		<span class="comment">//int类型转short类型</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">		<span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> (<span class="type">short</span>) c;</span><br><span class="line">		System.out.println(b);</span><br><span class="line">		<span class="comment">//int类型转char类型</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line">		<span class="type">char</span> <span class="variable">f</span> <span class="operator">=</span> (<span class="type">char</span>) e;</span><br><span class="line">		System.out.println(f);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例中我们发现当我们把浮点型转成整型时，发生了精度丢失，只保留了整数位，舍弃了小数位，因此当操作此种类型转换时一定要注意精度丢失的问题。并且当我们把int类型转成char类型打印时发现打印了a,因为java使用了Unicode:字符集，并且前256位兼容了ASCII码，而97正是字符a。</p>
<h3 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h3><p>当一个算术表达式中包含多个基本类型的值时，整个算术表达式的数据类型将发生自动提升，java自动提升规则如下：<br>所有的byte、short、和char类型将被提升到int类型<br>整个算术表达式的数据类型自动提升到表达式中最高等级操作数相同的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个byte类型变量并+2</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1</span>；</span><br><span class="line">s = s+<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>编译上述代码时会发现编译无法通过，这是因为变量s是short类型，2则是int类型，此时表达式中包含了多个数据类型，那么该表达式结果的数据类型则会发生自动提升，提升为最高等级操作数数据类型，也就是int,此时将一个int类型的值赋值给short类型的变量，需要进行类型强制转换，上述代码中并未强制转换，因此会编译错误，如果对s+2强制转换为int类型，则会编译通过并正常运行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义double类型变量</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">5.02</span>;</span><br><span class="line"><span class="comment">//定义整型变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">//定义byte类型变量</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">s</span> <span class="operator">=</span> d+i+b;</span><br></pre></td></tr></table></figure>

<p>在上例代码表达式中包含double类型、int类型、byte类型，根据Java类型自动提升的规则，我们知道表达最终的运算结果为等级最高的数据类型，也就是double类型，因此我们最后保存结果时定义了double类型的变量。</p>
<p>Java中的基本数据类型以及每种类型所占用的字节数和取值范围：</p>
<p><img src="https://files.catbox.moe/dmtwd1.png"></p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>编程语言主要的功能之一就是进行或简单或复杂的运算，在运算过程中有操作数，同样也需要运算符的参与，运算符其实就是一种特殊的符号，用于表述数据的运算，赋值和比较等。<br>Java中运算符可以分为以下几类：<br>·算术运算符（加、减、乘、除、取余、自增自减）</p>
<p>·%：取余运算符，求余是指使用第一个操作数除以第二个操作数，得到一个整除的结果后剩下的就是余数。需要注意的是求余运算，本质上也是一个除法运算，如果求余运算的两个操作数都是整型，则第二个操作数不能为0，<br>否则会引发程序异常。如果求余运算的两个操作数中有1个或者2个都是浮点数，则第二个操作数可以是0或者0.0，结果是NAN。0或者0.0对零以外的任何数求余都会得到0或者0.0.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>%<span class="number">3</span>;</span><br><span class="line">		System.out.println(c);</span><br><span class="line">		System.out.println(<span class="string">&quot;5对0.0取余：&quot;</span>+<span class="number">5.0</span>%<span class="number">0.0</span>);<span class="comment">//NAN</span></span><br><span class="line">		System.out.println(<span class="string">&quot;0对5.0取余：&quot;</span>+<span class="number">0</span>%<span class="number">5.0</span>);<span class="comment">//0.0</span></span><br><span class="line">		System.out.println(<span class="string">&quot;0对0.0求余：&quot;</span>+<span class="number">0</span>%<span class="number">0.0</span>);<span class="comment">//NAN</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>·赋值运算符 （&#x3D;）<br>·比较运算符（&gt;、 &lt;、 &gt;&#x3D;、 &lt;&#x3D;、&#x3D;&#x3D;）<br>·逻辑运算符<br>·位运算符<br>·类型相关运算符</p>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>Java中位运算符有7个：<br>&amp;:按位与。当两位同时为1时才返回1（同1为1）。<br>|:按位或。只要有一位为1时即返回1（有1则1）。<br>~:按位非。单目运算符，将操作数每一位（包括符号位）1变0,0变1（符号位一起取反加一）<br>^:按位异或。当两位相同时返回0，不同时返回1。（相同为0，不同为1）<br>&lt;&lt;:左移运算符(左移为乘)</p>
<p>·&gt;&gt;:右移运算符</p>
<p>·&gt;&gt;&gt;:无符号右移运算符<br>一般来说，位运算只操作整数类型的变量或值。</p>
<p><img src="https://files.catbox.moe/vskyk4.png"></p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><strong>逻辑运算符用于操作两个布尔型的变量或者常量，主要有以下6个。</strong></p>
<p>·&amp;&amp;:与，左右两个操作数都是true才会返回true,否则返回false,需要注意的是如果左右两边是表达式，如果第一个表达式就返回false,则第二个表达式并不进行运算。</p>
<p>·&amp;:不短路与，作用于&amp;&amp;相同，但是无论第一个表达式的结果是true还是false,第二个表达式都会进行运算。</p>
<p>·||:或，两个操作数只要有一个为true,就可以返回true,否则返回false,同样，如果第一个表达式返回值为true,则第二个表达式不进行运算</p>
<p>·|:不短路或，作用于相同，但是无论第一个表达式结果如何，第二个表达式都会进行运算。</p>
<p>·!:非，只需要一个操作数，如果操作数为true,则返回false,如果操作数为false,则返回true。</p>
<p>·^:异或，当两个操作数不同时返回为true,如果两个操作数相同的返回false。</p>
<h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><p>三目运算符只有一个：？：，三目运算符语法格式如下：<br>(expression) ? if-true-statement ： if-false-statement;<br>运算规则如下：<br>1.计算表达式expression的值<br>2.如果表达式返回true,则返回if-true-statement的值<br>3.如果表达式返回false,则返回if-false-statement的值</p>
<h4 id="赋值扩展运算符"><a href="#赋值扩展运算符" class="headerlink" title="赋值扩展运算符"></a>赋值扩展运算符</h4><p>赋值运算符可以同算术运算符、位移运算符结合，对赋值运算符进行扩展，扩展后的赋值运算符如下：<br>·+&#x3D;:对于x+&#x3D;y,等价于x&#x3D;x+y。<br>·-&#x3D;:对于x-&#x3D;y,等价于x&#x3D;x-y。<br>·*&#x3D;:对于x*&#x3D;y,等价于x&#x3D;x*y。</p>
<p>&#x2F;&#x3D;、%&#x3D;、&amp;&#x3D;、|&#x3D;、^&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&#x3D;、&gt;&gt;&gt;&#x3D;（无符号右移赋值操作）</p>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>运算符有不同的优先级，所谓优先级就是在表达式中运算的先后顺序，Java语言中大部分运算符都是从左向右结合的，只有个别运算符从右向走结合，例如：单目运算符、赋值运算符、三目运算符，下表将列出所有运算符的优先级：</p>
<p><img src="https://files.catbox.moe/xv3qg6.png"></p>
]]></content>
  </entry>
  <entry>
    <title>Java面向对象(基础)</title>
    <url>/2022/07/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E5%9F%BA%E7%A1%80)/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="面向对象（基础篇）"><a href="#面向对象（基础篇）" class="headerlink" title="面向对象（基础篇）"></a>面向对象（基础篇）</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>类：可以被理解为一种自定义的数据类型，可以使用类定义变量，所有使用类定义的变量都是引用类型。类是一系列具有相同行为和属性的对象的集合，用于描述客观世界中一类对象的共同特征。</p>
<p>对象：是具体的，是类的实例，类是对象的模板，对象是类的实例</p>
<h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>面向对象的程序设计中有两个重要的概念：类（class）和对象（Object，也叫做实例）。其中类是对一批对象的抽象，可以把类理解成某个群体，对象则是具体的存在。</p>
<p><strong>Java中定义类的简单语法如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] class 类名&#123;</span><br><span class="line"> 	<span class="number">0</span>个或者多个构造器</span><br><span class="line">    <span class="number">0</span>个或者多个成员变量</span><br><span class="line">    <span class="number">0</span>个或者多个方法</span><br><span class="line">    <span class="comment">//另外，类中还可以包含内部类，内部枚举等等    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于一个类来说，最常见的可以包含：构造器、成员变量和方法，并且这个组成部分都可以包含0个或者多个。一般来说这3个组成部分至少会包含1个组成部分，如果3部分都不包含实际上定义了一个空类，这样做没有任何意义。</p>
<p><strong>定义成员变量语法如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] 数据类型 成员变量 [=默认值]</span><br></pre></td></tr></table></figure>

<p><strong>修饰符：</strong>修饰符可以省略，也可以是public、protected、private、static、.final、transient,其中public、protected、private.只能选一个，可以与final、static组合来修饰成员变量<br><strong>类型：</strong>类型可以是Java允许的任意类型，可以是基本类型、也可以是引用类型<br><strong>成员变量名：</strong>成员变量名只要是一个合法的标识符即可，成员变量的命名一般使用camel命名法，第一个单词首字母小写，其余单词的首字母均大写，单词间不用任何分隔符，并且要做到见名知意，尽量避免用单个字母命名<br><strong>默认值：</strong>成员变量可以指定默认值，也可以不指定，当不指定时在创建对象时，Java会提供默认值，其中整型默认值为0，浮点型默认值为0.0,布尔型默认值为false,字符型默认值为’\u0000’。</p>
<p><strong>定义成员方法语法如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] 方法返回值类型 方法名(形参列表)&#123;</span><br><span class="line"> 	<span class="comment">//方法体   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法返回值类型：</strong>返回值类型可以是v允许的任意数据类型、包括基本类型和引用类型；如果声明了返回值类型、则方法体中必须有一个有效的return语句，该语句返回一个变量或者表达式，这个变量或表达式的类型必须与声明的类型匹配，此外，如果一个方法没有返回值，则返回值类型用void代替，表明该方法没有返回值。<br><strong>方法名：</strong>方法名的命名规则同成员变量的命名规则基本一致。<br><strong>形参列表：</strong>形参用于定义该方法可以接受的参数，形参列表可以由0个或者多个参数组成，参数之间用逗号隔开。一旦方法定义时定义了形参列表，则调用该方法时必须传入对应类型的参数值。即谁调用，谁传参。</p>
<p><strong>构造体(构造方法)的定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] 方法名(形参列表)&#123;</span><br><span class="line"> 	方法体   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造器则是一种特殊的方法，其作用是用于创建对象，Java语言通过new关键字来调用构造方法，从而返回该类的实例。构造器是一个类创建对象的基本方法，如果一个类没有构造器，这个类也就无法创建实例了。因此Java语言提供了一个功能：<strong>如果开发者没有为类编写构造器，编译器会为该类提供一个默认无参数的构造器，一旦开发者提供了构造器，则编译器不在提供构造器。</strong></p>
<p><strong>需要注意的是构造器是一种特殊的方法，其方法名和类名相同，但没有方法返回值，也不用void修饰。</strong></p>
<p><strong>修饰符：</strong>修饰符可以省略，也可以是public、protected、private其中之一，如果构造器的修饰符为private,则不能通过new调用，也就是说当一个类的构造器被private修饰，该类则不能通过new来创建对象<br><strong>方法名：</strong>必须与类名相同<br><strong>形参列表：</strong>和方法中的形参格式完全相同</p>
<p><strong>陷阱:给定一个方法名称和类名相同，但是有返回值或者使用了void修饰，要求你判断是否是构造方法。有void的方法就不是构造方法！！！</strong></p>
<h2 id="创建对象和使用对象"><a href="#创建对象和使用对象" class="headerlink" title="创建对象和使用对象"></a>创建对象和使用对象</h2><p>创建对象最根本的途径是调用构造器，Java中通过new关键字来调用构造器创建对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个Student类型的对象，也可以说是定义了一个Student类型的变量</span></span><br><span class="line">Student s;</span><br><span class="line"><span class="comment">//通过new关键字调用构造方法，返回Student对象</span></span><br><span class="line"><span class="comment">//将返回的对象赋值给变量s</span></span><br><span class="line">s = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//简写为</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure>

<p>创建好对象后，可以对对象进行如下操作：</p>
<p>1、访问对象的实例变量</p>
<p>2、调用对象的方法</p>
<h2 id="基本类型和引用类型"><a href="#基本类型和引用类型" class="headerlink" title="基本类型和引用类型"></a>基本类型和引用类型</h2><p>基本类型：int i &#x3D; 10; 执行该代码时，其在内存中的结构如下图所示：</p>
<p><img src="https://files.catbox.moe/1biox2.png"></p>
<p>引用类型：Student s &#x3D; new Student(); 执行该代码时，其在内存的示意图如下所示：</p>
<p><img src="https://files.catbox.moe/3eo9gj.png"></p>
<p>从上图中我们可以看出，Studenty对象包含两个实例变量，而变量是需要内存来存储的，当创建Student对象时，必然要有对应的内存来存储对象的实例变量，Student对象由多块内存组成，不同的内存分别存储着Student对象的不同成员变量，当把Student对象赋值给一个引用变量时，<br>Java会将对象的地址保存在变量中，也就是保存在栈中，也就是说<strong>变量中仅仅保存的是一个引用或者说地址，而不是真实的对象</strong>，由该变量中的引用指向该对象。对象的成员变量数据实际存放在堆中，<br>当访问对象的成员变量和方法时，实际上访问的是变量所指向的对象的成员变量和方法。<br>综上所述，可以简单的理解为基本类型在栈中保存的是变量真实的值，而引用类型保存的并不是对象而是一个地址或者说引用，这就是基本类型和引用类型的根本区别，这也就是说我们通常判断基本类型相等时，用双等号即可，而判断引用类型则不能用双等号。</p>
<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>Java提供了一个this关键字，this关建字可以指代当前对象，根据this出现的位置不同，this作为当前对象的默认引用有两种使用方式<br>1.构造器中使用this可以调用其他构造器<br>2.方法中使用this可以方问其他方法或者实例变量，通常this可以省咯。<br>this关键字最大的作用就是让类中一个方法，访问该类里的另一个方法或实例变量<br>this关键字最大的作用就是上类中的方法访问类中的另一个方法或者实例变量，假设定义了一个Animal类，这个Animal对象的run()方法需要调用它的jump方法，就可以使用this关键字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">	String name;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//在run方法中调用jump</span></span><br><span class="line">		<span class="built_in">this</span>.jump();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>在Java中一个成员直接调用另一个成员时，this可以省略。也就是说上述的代码可以修改为如下形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//在run方法中调用jump</span></span><br><span class="line">		jump();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>这是Java中规定，当在构造方法中调用其它构造方法时，不需要些构造方法的名字，因为所有构造方法的名称都是一样的，唯一不同的就是参数列表，JVM会通过this后传入的参数列表来确定究竟调用哪一个构造方法.<strong>需要注意的是，this调用构造方法只能在构造方法中使用，不能写在实例方法中，并且要放在构造方法中代码的第一行。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">	<span class="comment">//实例变量</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="comment">//提供无参的构造方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>(<span class="string">&quot;猫咪&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//提供有参的构造方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>(<span class="string">&quot;猫咪&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：this不能出现在类方法中，因为类方法在类加载后，创建对象前就已经准备完毕，此时还没有对象，也就不存在this</strong></p>
<h2 id="方法详解"><a href="#方法详解" class="headerlink" title="方法详解"></a>方法详解</h2><p>方法是类或对象的行为特征的抽象，方法是类或对象最重要的组成部分。但从功能上来看，方法完全类似于传统结构化程序设计里的函数。值得指出的是，Java 里的方法不能独立存在，所有的方法都必须定义在类里。方法在逻辑上要么属于类，要么属于对象。</p>
<h3 id="实例方法和类方法"><a href="#实例方法和类方法" class="headerlink" title="实例方法和类方法"></a>实例方法和类方法</h3><p>·被static修饰的方法叫做类方法，方法属于类，调用时不依赖于对象，通过类名.方法名即可调用。<br>·不被static修饰的方法叫做实例方法，方法属于对象，调用时依赖对象，必须先创建对象才能调用，因此其调用方式是对象名.方法名</p>
<p>**这里可能产生一个问题;同一个类里不同方法之间相互调用时，不就可以直接调用吗?**这里需要指出; 同一个类的一个方法调用另外一个方法时，如果被调方法是普通方法，则默认使用 this 作为调用者;如果被调方法是静态方法，则默认使用类作为调用者。也就是说，表面上看起来某些方法可以被独立执行，但实际上还是使用 this 或者类来作为调用者。</p>
<p>·永远不要把方法当成独立存在的实体，正如现实世界由类和对象组成，而方法只能作为类和对象的附属，Java语言里的方法也是一样。Java语言里方法的所属性主要体现在如下几个方面。方法不独立定义，方法只能在类体里定义。<br>·从逻辑意义上来看，方法要么属于该类本身，要么属于该类的一个对象。<br>·永远不能独立执行方法，执行方法必须使用类或对象作为调用者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="comment">//定义一个类方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeMoney</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义一个实例方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法的参数传递"><a href="#方法的参数传递" class="headerlink" title="方法的参数传递"></a>方法的参数传递</h3><p>前面已经介绍了Java里的方法是不能独立存在的，调用方法也必须使用类或对象作为主调者。如果声明方法时包含了形参声明，则调用方法时必须给这些形参指定参数值，调用方法时实际传给形参的参数值也被称为实参。那么，Java的实参值是如何传入方法的呢？这是由java方法的参数传递机制来控制的，Java方法的参数传递方式只有一种值传递。所谓值传递，就是将实际参数值的副本（复制品）传入方法内，而参数本身不会受到任何影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwapDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">		swap(a, b);</span><br><span class="line">		System.out.println(<span class="string">&quot;main=====a:&quot;</span>+a);<span class="comment">//5</span></span><br><span class="line">		System.out.println(<span class="string">&quot;main=====b:&quot;</span>+b);<span class="comment">//3</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义方法交换两个变量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">		a = a^b;</span><br><span class="line">		b = a^b;</span><br><span class="line">		a = a^b;</span><br><span class="line">		System.out.println(<span class="string">&quot;swap=====a:&quot;</span>+a);<span class="comment">//3</span></span><br><span class="line">		System.out.println(<span class="string">&quot;swap=====b:&quot;</span>+b);<span class="comment">//5</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>从结果可以看出在swap方法中交换了变量a和变量b的值，但是在main方法中变量a和变量b的值并没有发生变化，这是因为在方法传递参数时传递的是实参的副本，也就是说在main方法中调用swap方法传递参数时，会将变量保存在钱内存中的真实值复制一份传递给swap方法，这样并不影响原来变量的值。</p>
<p><strong>以上情况是基本类型的，那么引用类型的又是怎样的呢，现在我们定义一个Teacher类，类中只包含一个int类型的age变量。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Teacher</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">		t1.age = <span class="number">18</span>;</span><br><span class="line">		change(t1);</span><br><span class="line">		System.out.println(<span class="string">&quot;main=====t:&quot;</span>+t1.age);<span class="comment">//20</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Teacher t2)</span> &#123;</span><br><span class="line">		t2.age = <span class="number">20</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;change=====t:&quot;</span>+t2.age);<span class="comment">//20</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当代码执行到12行时，此时调用了change()方法，并传入了t1对象，此时并不是将对象直接传递，传递的是t1中保存的引用或地址。</p>
<p><img src="https://files.catbox.moe/lbzdgw.png"></p>
<p>在change方法中修改了对象的年龄，也就是说在change方法中修改的也是t1指向的对象，所以当在main方法中打印对象的年龄时，t1的年龄也变成了20。所以在Java中不存在引用传递，<strong>所谓的引用传递本质上都是值传递</strong></p>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>JDK 1.5 以后Java允许定义形参个数可变的参数，从而允许为方法指定数量不确定的参数，如果在定义方法时，最后一个参数的类型后添加三点，则表明该形参可以接收多个参数指，多个参数值被当做数组传入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Varargs</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//可变参数可以单独传递</span></span><br><span class="line">		test(<span class="number">100</span>, <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">		String[] strs = &#123;<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;赵敏&quot;</span>,<span class="string">&quot;张三丰&quot;</span>&#125;;</span><br><span class="line">		<span class="comment">//可变参数可以传入数组</span></span><br><span class="line">		test(<span class="number">200</span>, strs);</span><br><span class="line">		<span class="comment">//也可以不传递</span></span><br><span class="line">		test(<span class="number">300</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a,String...names)</span> &#123;</span><br><span class="line">		System.out.println(a);</span><br><span class="line">		<span class="keyword">if</span>(names!=<span class="literal">null</span>&amp;&amp;names.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">				System.out.println(name);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>null和空的区别，int[] a;不初始化数组，则它为null；int[] a &#x3D; {};初始化数组,但不为它赋值，则为空。</p>
<p>例如有一张白纸，上面不写东西则为空；没有白纸，则为null</p>
<p>从上面的示例可以看出，当一个方法中有可变参数时，参数可以分开传递，也可以放入数组，然后将数组传递给可变参数，也可以不传递，因此，我们在使用可变参数时，首先要判断可变参数是否为null，其次因为可变参数的本质是数组，因此还需要判断数组中是否存在元素。<br>注意的是：可<strong>变参数只能处于参数列表的最后一个参数，一个方法中只能包含一个可变参数，可变参数的本质就是一个数组。</strong></p>
<h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>在Java中允许同一个类中定义多个同名的方法，但是要保证参数列表不同，也就是说同一个类中包含了两个或者两个以上方法名相同，但是参数列表不同，则被称为方法重载。这里需要注意的是方法重载与访问修饰符无关、方法返回值无关、方法抛出异常无关，只与方法的参数列表有关。<br>那么什么叫做参数列表不同呢，参数列表不同需要注意以下几点：<br>1.个数不同<br>2.数据类型不同<br>例如下面的两个方法就不构成方法重载，因为两个方法方法名相同，但是参数数据类型相同，都是一个double类型和一个int类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalcArea</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">(<span class="type">int</span> width,<span class="type">double</span> height)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> width*height;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">area</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="type">int</span>)width*height;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么，当我们调用方法时，如果区分究竟调用的是哪个方法呢，如果你还记得我们使用this调用构造方法时，这个问题就会迎刃而解，当我们调用重载的方法时，也是通过传入的参数由JVM决定调用哪个方法。这个过程叫做<strong>重载解析</strong>。</p>
<h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><p>在 Java 语言中，根据定义变量位置的不同，可以将变量分成两大类; 成员变量和局部变量。成员变量和局部变量的运行机制存在较大差异</p>
<h3 id="成员变量和局部变量是什么"><a href="#成员变量和局部变量是什么" class="headerlink" title="成员变量和局部变量是什么"></a>成员变量和局部变量是什么</h3><p>成员变量指的是在类里定义的变量，也就是前面所介绍的filed;局部变量指的是在方法里定义的变量。</p>
<p><img src="https://files.catbox.moe/rsluwt.png"></p>
<p>成员变量被分为类变量和实例变量两种，定义成员变量设有static修饰的就是实例变量，有static修饰的就是类变量。其中类变量从该类的准备阶段起开始存在，直到系统完全销毁这个类，类变量的作用域与这个类的生存范围相同：而实例变量则从该类的实例被创建起开始存在，直到系统完全销毁这个实例，实例变量的作用域与对应实例的生存范围相同。</p>
<p><strong>一个类在使用之前要经过类加载、类验证、类准备、类解析、类初始化等几个阶段。</strong></p>
<p>正是基于这个原因，可以把类变量和实例变量统称为成员变量，其中类变量可以里解为类成员变量，它作为类本身的一个成员，与类本身共存亡实例变量侧可理解为实例成员变量，它作为实例的一个成员，与实例共存亡。只要类存在，程序就可以访问该类的类变量。在程序中访问类<br><strong>变量通过如下语法：类.类变量、实例.实例变量、实例.类变量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//创建两个对象</span></span><br><span class="line">		<span class="type">School</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">School</span>();</span><br><span class="line">		<span class="type">School</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">School</span>();</span><br><span class="line">		<span class="comment">//修改s1对象的number</span></span><br><span class="line">		s1.number = <span class="number">1000</span>;</span><br><span class="line">		<span class="comment">//因为static修饰的是所有对象共有的</span></span><br><span class="line">		<span class="comment">//所以s1的number也是1000</span></span><br><span class="line">		System.out.println(s2.number);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>从上例的实例可以看出当修改s1的number属性时，s2的number属性也发生了变化，这是因为，static修饰的变量属于对象所属的类，被所有对象所共享。但是我们并不推荐使用对象来访问类变量，类变量应该通过类名访问。</p>
<p>局部变量根据定义形左式的不同，又可以被分为如下三种。<br><strong>形参：</strong>在定义方法签名时定义的变量，形参的作用域在整个方法内有效。<br><strong>方法局部变量：</strong>在方法体内定义的局部变量，它的作用域是从定义该变量的地方生效，到该方法结束时失效。<br><strong>代码块局部变量：</strong>在代码块中定义的局部变量，这个局部变量的作用域从定义该变量的地方生效，到该代码块结束时失效。与成员变量不同的是，局部变量除形参之外，都必须显式初始化。也就是说，必须先给方法局部变量和代码块局部变量指定初始值，否则不可以访问它们。</p>
<p>在同一个类里，成员变量的作用范围是整个类内有效。一个类里不能定义两个同名的成员变量，即使一个是类变量，一个是实例变量也不行；一个方法里不能定义两个同名的方法局部变量，方法局部变量与形参也不同名：同一个方法中不同代码块内的代码块局部变量可以同名：如果先定义代码块局部变量，后定义方法局部变量，前面定义的代码块局部变量与后面定义的方法局部变量也可以同名。Java允许局部变量和成员变量同名，如果方法里的局部变量和成员变量同名，局部变量会覆盖成员变量，如果需要在这个方法里引用被覆盖的成员变量，则可使用this(对于实例变量)或类名（对于类变量）作为调用者来限定问成员变量</p>
<h3 id="成员变量初始化机制"><a href="#成员变量初始化机制" class="headerlink" title="成员变量初始化机制"></a>成员变量初始化机制</h3><p>当系统加载类或创建该类的实例时，系统自动为成员变量分配内存空间，并在分配内存空间后，自动为成员变量指定初始值，下面我们通过图示来学习。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"> 	<span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    System.out.print(s.age);</span><br><span class="line">    s.age = <span class="number">18</span>;</span><br><span class="line">    System.out.print(s.age);       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当代码执行到第3行，我们发现打印了0<br>当代码执行到第2行时，JVM在堆中分配了一块内存区域，这块内存区域中保存这实例变量āge,并为其赋默认值。此时内存结构如下：</p>
<p><img src="https://files.catbox.moe/52mn1j.png"></p>
<p>当执行第4行代码时，JVM将堆内存中age的值修改为18.</p>
<h3 id="局部变量的初始化机制"><a href="#局部变量的初始化机制" class="headerlink" title="局部变量的初始化机制"></a>局部变量的初始化机制</h3><p>局部变量定义后，必须经过显式初始化后才能使用，系统不会为局部变量执行初始化。这意味着定义局部变量后，系统并未为这个变量分配内存空间，直到等到程序为这个变量赋初始值时，系统才会为局部变量分配内存，并将初始值保存到这块内存中。<br>与成员变量不同，局部变量不属于任何类或实例，因此它总是保存在其所在方法的浅内存中。如果局部变量是基本类型的变量，则直接把这个变量的值保存在该变量对应的内存中，如果局部变量是一个引用类型的变量，则这个变量里存放的是地址，通过该地址引用到该变量实际引用的对<br>象或数组。栈内存中的变量无需系统垃圾回收，往往随方法或代码块的运行结束而结束。因此，局部变量的作用域是从初始化该变量开始，直到该方法或该代码块运行完成而结束。因为局部变量只保存基本类型的值或者对象的引用，因此局部变量所占的内存区通常比较小。</p>
<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>在前面的内容中我们可以总结出static用于修饰方法和示例变量，使用static修饰的方法叫做类方法，使用static修饰的变量叫放类变量,static还可以修饰代码块，无论是类变量还是类方法，都属于类，而不属于对象，是所有对象共享的。<br>类变量属于整个类，当系统第一次准备使用该类时，系统会为该类变量分配内存空间，类变量开始生效，直到该类被卸载，该类的类变量所占有的内存才被系统的垃圾回收机制回收。类变量生存范围几乎等同于该类的生存范围。当类初始化完成后，类变量也被初始化完成。类变量既可通<br>过类来访问，也可通过类的对象来访问。但通过类的对象来访问类变量时，实际上并不是访问该对象所拥有的变量，因为当系统创建该类的对象时，系统不会再为类变量分配内存，也不会再次对类变量进行初始化，也就是说，对象根本不拥有对应类的类变量。通过对象访问类变量只是一<br>种假象，通过对象访问的依然是该类的类变量，可以这样理解：当通过对象来访问类变量时，系统会在底层转换为通过该类来访问类变量。<br>由于对象实际上并不特有类变量，类变量是由该类持有的，同一个类的所有对象问类变量时，实际上方间的都是孩类所特有的变量。因此，从程序运行表面来看，即可看到同一类的所有实例的类变量共享同一块内存区。<br>类方法也是类成员的一种，类方法也是属于类的，通常直接使用类作为调用者来调用类方法，但也可以使用对象来调用类方法。与类变量类似，使使用对象来调用类方法，其效果也与用类来调用类方法完全一样。</p>
]]></content>
  </entry>
  <entry>
    <title>Java面向对象(高级)</title>
    <url>/2022/07/21/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>Java 也支持面向对象的三大特征∶封装、继承和多态，Java 提供了 private、protected 和 public 三个访问控制修饰符来实现良好的封装，提供了extends 关键字来让子类继承父类，子类继承父类就可以继承到父类的成员变量和方法，如果访问控制允许，子类实例可以直接调用父类里定义的方法。继承是实现类复用的重要手段，除此之外，也可通过组合关系来实现这种复用，从某种程度上来看，继承和组合具有相同的功能。使用继承关系来实现复用时，子类对象可以直接赋给父类变量，这个变量具有多态性，编程更加灵活;而利用组合关系来实现复用时，则不具备这种灵活性。<br> 构造器用于对类实例进行初始化操作，构造器支持重载，如果多个重载的构造器里包含了相同的初始化代码，则可以把这些初始化代码放置在普通初始化块里完成。初始化块总在构造器执行之前被调用。除此之外，Java 还提供了一种静态初始化块，静态初始化块用于初始化类，在类初始化阶段被执行。如果继承树里的某一个类需要被初始化时，系统将会同时初始化该类的所有父类。</p>
<h3 id="理解封装"><a href="#理解封装" class="headerlink" title="理解封装"></a>理解封装</h3><p>封装（encapsulation)是面向对象的三大特征之一，它的含义是指将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类提供的方法来实现对内部信息的操作和访问。</p>
<p>对一个类或者对象实现良好的封装，可以实现以下目的：</p>
<ol>
<li>隐藏类的实现细节，例如我们定义一个学生类，并创建了对象，对象的年龄是不能随意修改和访问的。例如我们使用的Arrays工具类中的sort()方法，我们并不需要关注方法内实现的细节，我们只需要知道该方法可以对数组进行排序即可</li>
<li>让使用者只能通过预定的方法来访问数据，从而可以在该方法中加入控制逻辑，限制对成员变量的不合理访问。</li>
<li>便于修改，提高代码的可维护性</li>
</ol>
<p><strong>为实现良好的封装，需要从两个方面考虑：</strong></p>
<ul>
<li><p>将对象的成员变量和实现细节隐藏在对象内部，不允许外部直接访问</p>
</li>
<li><p>把方法暴露出来，让方法来控制对这些成员变量进行安全的访问和操作</p>
<p>​</p>
</li>
</ul>
<h3 id="使用访问控制符"><a href="#使用访问控制符" class="headerlink" title="使用访问控制符"></a>使用访问控制符</h3><p>ava提供了3个访问控制符，private，protected和public，分别代表了3种级别的访问控制权限，另外有一个缺省的访问修饰符，因此Java提供了4个访问控制级别。Java的访问控制级别有小到大，如下图所示：</p>
<p><img src="https://files.catbox.moe/lmknma.png"></p>
<p><strong>当不使用任何访问控制符来修饰类或者类成员是，系统默认使用该访问控制级别</strong></p>
<ul>
<li>private（当前类访问权限）∶ 如果类里的一个成员（包括成员变量、方法和构造器等）使用 private 访问控制符来修饰，则这个成员只能在当前类的内部被访问。很显然，这个访问控制符用于修饰成员变量最合适，使用它来修饰成员变量就可以把成员变量隐藏在该类的内部。</li>
<li>default（包访问权限）∶如果类里的一个成员（包括成员变量、方法和构造器等）或者一个外部 类不使用任何访问控制符修饰，就称它是包访问权限的，default 访问控制的成员或外部类可以被相同包下的其他类访问。</li>
<li>protected（子类访问权限）∶如果一个成员（包括成员变量、方法和构造器等）使用protected 访 问控制符修饰，那么这个成员既可以被同一个包中的其他类访问，也可以被不同包中的子类访问。在通常情况下，如果使用 protected 来修饰一个方法，通常是希望其子类来重写这个方法。</li>
<li>public （公共访问权限）∶ 这是一个最宽松的访问控制级别，如果一个成员（包括成员变量、方 法和构造器等）或者一个外部类使用 public 访问控制符修饰，那么这个成员或外部类就可以被所有类访问，不管访问类和被访问类是否处于同一个包中，是否具有父子继承关系。</li>
</ul>
<p>可以用下表来概括上述内容：</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>公共的</td>
</tr>
<tr>
<td>protected</td>
<td>同包，子类</td>
</tr>
<tr>
<td>default</td>
<td>同包</td>
</tr>
<tr>
<td>private</td>
<td>类内</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>修饰符&#x2F;范围</th>
<th>类内</th>
<th>同包子类</th>
<th>同包非子类</th>
<th>非同包子类</th>
<th>非同包非子类</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>default</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p>对于外部类而言，它也可以使用访问控制符修饰，但外部类只能有两种访问控制级别;public 和默认，外部类不能使用 private 和 protected 修饰，因为外部类没有处于任何类的内部，<strong>也就没有其所在类的内部、所在类的子类两个范围</strong>，因此 private 和 protected 访问控制符对外部类没有意义。 外部类可以使用 public 和包访问控制权限，使用 public 修饰的外部类可以被所有类使用，如声明变量、创建实例; 不使用任何访问控制符修饰的外部类只能被同一个包中的其他类使用。 </p>
<p><strong>1.不能用private:</strong><br>对于一个外部类，用private修饰是没有意义的。因为如果使用private修饰外部类，其它类就不能访问的这个类，那么这个类就不能创建实<br>例，这个类的属性和方法就不能被外界访问，所以没有意义。</p>
<p><strong>2.不能用protected:</strong><br>protected;是用来修饰类中的属性和方法的，不是用来修饰类的。假如定义一个A类用protected修饰，再在与A类不可包的另一个保重定义一个B类，B类如果要继承A类，前提是B类能够访问到A类。仔细想想就会发现这是冲突的。（你要成为A类的子类，你的先访问到A类，但你要访问到A类，那你先得成为A类的子类。因为protected修饰的类就是给子类访问的)这个逻辑明显是冲突的。<br>所以不仅是外部类，普通类也不能用protected修饰。<br>这时肯定有人会说：把B类放在A类同一个包下，那B类不就可以访问到A类了呜？<br>但是：如果你把B类放在和A类同一个包下，那和用default修饰A类有什么区别，既然和default没有区别，那干麻还要用protected修饰A类，<br>而且protected本身可以跳出同一个包访问的意义也不存在了，所以用protected修饰类是没有意义的。</p>
<p><strong>关于访问控制符的使用，存在如下几条基本原则。</strong></p>
<ul>
<li>类里的绝大部分成员变量都应该使用 private 修饰，只有一些 static 修饰的、类似全局变量的成 员变量，才可能考虑使用public 修饰。除此之外，有些方法只用于辅助实现该类的其他方法，这些方法被称为工具方法，工具方法也应该使用private 修饰。</li>
<li>如果某个类主要用做其他类的父类，该类里包含的大部分方法可能仅希望被其子类重写，而不 想被外界直接调用，则应该使用protected 修饰这些方法。</li>
<li>希望暴露出来给其他类自由调用的方法应该使用public 修饰。因此，类的构造器通过使用 public 修饰，从而允许在其他地方创建该类的实例。因为外部类通常都希望被其他类自由使用，所以大部分外部类都使用 public 修饰。</li>
</ul>
<h3 id="package、import和import-static"><a href="#package、import和import-static" class="headerlink" title="package、import和import static"></a>package、import和import static</h3><p>所谓的包从操作系统层面来看就是一个文件夹，如果从项目开发的角度来看，就是用于管理代码的目录，一个项目可能会由多个人进行开发，那么类名相同也就不可避免，那么如何确保我们写的类不被其他开发者覆盖呢，那么我们就可以用包加以区分。</p>
<p>简而言之，Java中的包就是为了管理Java类，以及控制权限的目录。<br>如果需要使用不同包中的其他类是，我们需要在类名前加包名。例如如下写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cn.bytecollege.<span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cn</span>.bytecollege.Student();</span><br></pre></td></tr></table></figure>

<p>这种写法在语法上是完全合法的。但是这是一件很麻烦的事情。为了简化编程，Java引入了import关键字，import可以导入指定包层次下某个类或者全部类，import语句应该出现在package语句后、类定义之前，一个Java源文件只能包含一个package语句，但可以包含多个import语句，多个import语句用于导入多个包层次下的类。</p>
<h3 id="深入构造器"><a href="#深入构造器" class="headerlink" title="深入构造器"></a>深入构造器</h3><p>构造器是一个特殊的方法，所以也叫构造方法，这个特殊的方法用于创建对象时执行初始化。构造方法是创建对象的基本方式，因此，Java类必须包含一个或者以上的构造器。</p>
<h4 id="构造器的作用"><a href="#构造器的作用" class="headerlink" title="构造器的作用"></a>构造器的作用</h4><p>构造器最大的用处就是在创建对象时执行初始化。</p>
<p>当创建一个对象时，系统为这个对象的实例变量进行默认初始化，这种默认的初始化把所有基本类型的实例变量设为 0（对数值型实例变量）或 false（对布尔型实例变量），把所有引用类型的实例变量设为 null。 如果想改变这种默认的初始化，想让系统创建对象时就为该对象的实例变量显式指定初始值，就可以通过构造器来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 提供一个自定义构造方法用于初始化实例变量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;周芷若&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		System.out.println(s.name);</span><br><span class="line">		System.out.println(s.age);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行上面的程序，可以看到输出的name值是周芷若，年龄是18，这就是构造方法的作用——为实例变量初始化值</p>
<p>构造器是创建 Java 对象的重要途径，通过 new 关键字调用构造器时，构造器也确实返回了该类的对象，<strong>但这个对象并不是完全由构造器负责创建的</strong>。<strong>实际上，当程序员调用构造器时，系统会先为该对象分配内存空间，并为这个对象执行默认初始化，这个对象已经产生了</strong>——这些操作在构造器执行之前就都完成了。也就是说，<strong>当系统开始执行构造器的执行体之前，系统已经创建了一个对象，只是这个对象还不能被外部程序访问，只能在该构造器中通过 this 来引用</strong>。当构造器的执行体执行结束来后，这个对象作为构造器的返回值被返回，通常还会赋给另一个引用类型的变量，从而让外部程序可以访问该对象。</p>
<p>因为构造器主要用于被其他方法调用，用以返回该类的实例，因而通常把构造器设置成public 访问权限，从而允许系统中任何位置的类来创建该类的对象。除非在一些极端的情况下，业务需要限制创建该类的对象，可以把构造器设置成其他访问权限，例如设置为 protected，主要用于被其子类调用;把其设置为private，阻止其他类创建该类的实例。</p>
<h4 id="构造器重载"><a href="#构造器重载" class="headerlink" title="构造器重载"></a>构造器重载</h4><p>同一个类里具有多个构造器，多个构造器的形参列表不同，即被称为构造器重载。</p>
<p>因为构造器必须与类名相同，所以同一个类的所有构造器名肯定相同。为了让系统能区分不同的构造器，多个构造器的参数列表必须不同。构造方法名称相同，参数列表不同，系统通过new调用构造方法时，根据传入的参数列表来决定调用哪个构造方法。</p>
<h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>继承也是面向对象的三大特征之一，是实现代码复用的重要手段之一，<strong>Java的继承具有单继承的特点，也就是所每个类有且只能有一个父类。</strong></p>
<h3 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h3><p>所谓继承就是在已有类的基础上构建一个新类，使用extends关键字来实现，从而达到代码复用的目的，其中已有类也叫做父类、基类或者超类，新扩展的的类叫做子类或者派生类。</p>
<p>Java使用extends作为继承的关键字，其实extends翻译为扩展更为合适，而不是继承，因为翻译做继承的话，很容易和我们理解意义上的继承混淆。并且子类更多的是作为父类的扩展，也就是说父类中更多的描述的是共性，也就是大家都具有的特性，而子类中不但有共性，也可能有特性。</p>
<p>定义父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(name+<span class="string">&quot;=====&quot;</span>+age);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>定义子类，该子类继承Father，并且类本身中不定义任何内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">		son.age = <span class="number">18</span>;</span><br><span class="line">		son.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">		son.printInfo();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试类，我们发现打印了张三&#x3D;&#x3D;&#x3D;18岁，我们发现Son中没有定义任何内容，但是我们依然可以访问到实例变量name和age，这说明子类Son从父类继承了这两个属性，并且我们调用了son对象的printInfo()方法，这说明子类不但继承了父类的实例变量，也继承了父类的实例方法。</p>
<p>Java中采用了单继承，也就是说一个类有且只能有一个直接父类，多个间接父类，例如：类A继承了类B，类B又继承了类C，类C又继承了类D，那么类A的直接的直接父类是类B，间接父类则有类C和类D。</p>
<p>此外，需要注意的是，如果一个Java类没有显式的指定直接父类，那么这个类默认隐式的extends了java.lang.Object类。</p>
<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>子类扩展了父类，那么就获得了父类中定义的可访问的成员变量和方法。并且子类在父类的基础上可以对父类进行扩展，增加自己的状态或者行为。子类扩展了父类，当父类方法不能满足子类需要时，子类就可以重写父类方法，也叫做方法覆盖。</p>
<p>所谓方法重写就是，子类扩展父类以后，为满足自身需要，对父类行为或者方法进行覆盖，<br>子类包含与父类同名方法的现象叫做方法重写。这里需要注意以下几点：</p>
<ol>
<li>方法重写只存在于继承关系中</li>
<li>方法重写子类方法名和父类方法名相同，并且参数列表和父类方法参数列表完全相同</li>
<li>子类方法返回值类型与父类方法返回值类型一致，或者子类方法返回值类型是父类方法返回值类型的子类</li>
<li>子类方法抛出的异常要小于父类方法抛出的异常。</li>
<li>子类方法的访问权限要大于等于父类方法访问权限</li>
</ol>
<p>简单归纳为方法重写中的注意事项为“两小一大两相同”，其中两小指的是子类方法返回值和抛出异常小于父类方法返回值和抛出异常。一大则是指子类方法访问权限大于等于父类访问权限。两相同则是指方法名和参数列表相同。<br>此外，需要注意的是，如果父类方法具有 private 访问权限，则该方法对其子类是隐藏的，因此其子类无法访问该方法，也就是无法重写该方法。如果子类中定义了一个与父类 private 方法具有相同的方法名、相同的形参列表、相同的返回值类型的方法，依然不是重写，只是在子类中重新定义了一个新方法。</p>
<p><strong>方法重写和方法重载的区别：</strong><br>（1）方法重载（Overload）方法重写（Override）<br>（2）方法重载发生在同一个类里面，方法重写只发生在继承里面。<br>（3）方法重载和返回值类型无关，方法重写子类方法的返回值类型要和父类方法返回值的类型一致，或者是父类返回值的子类。<br>（4）方法重载和抛出异常无关，方法重写子类方法抛出异常小于等于父类方法抛出异常<br>（5）方法重载和修饰符的权限无关，方法重写子类方法的访问权限大于等于父类方法的访问权限<br>（6）方法重载参数列表要参数个数不同或类型顺序不同，方法重写的参数列表要与父类的参数列表一致。</p>
<p>首先我们定义一个父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		System.out.println(name+<span class="string">&quot;====run&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>定义子类，并重写父类方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sparrow</span> <span class="keyword">extends</span> <span class="title class_">Bird</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		System.out.println(name+<span class="string">&quot;是一只麻雀，不能快速的跑，但是我可以跳&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义了Bird类，并在类中定义了run方法，因为鸟类都具有跑这个行为，但是麻雀准确意义上不能称之为跑，所以重写了父类的方法，并且严格遵循了重写方法的规则。需要注意的是在代码第8行，有一行@Override，这叫做注解，当发生方法重写时，添加在方法上方。<br><strong>注意：父类构造方法不能被继承，因此也不能被重写。可以重写的一定是从父类继承的可访问的方法。</strong></p>
<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>super可以指代父类对象，用于访问从父类继承得到的实例变量或者方法，同时也可以访问父类的构造方法。super和this一样，都不出现在类方法中，如果出现在构造方法中，必须放在第一行，因此super()和this()调用构造方法时，不能同时出现。</p>
<ul>
<li>super访问父类属性</li>
</ul>
<p>首先，我们定义父类，父类中包含了name和age两个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着我们定义子类，在子类中不定义任何实例变量，定义个print()方法，方法中使用super访问限定父类实例变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义实例方法使用super访问父类实例变量</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="built_in">super</span>.age);</span><br><span class="line">		System.out.println(<span class="built_in">super</span>.name);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>定义测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">		son.age = <span class="number">18</span>;</span><br><span class="line">		son.name =<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">		son.print();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>测试类中我们创建了Son对象，并为其从父类继承来的属性赋值，代码12行调用son对象print方法后，在方法内部，我们使用super访问了父类的属性，并成功打印。<br>在上面的示例中，Son中没有定义任何实例变量，Son中所有的实例变量实际上都是从父类继承过来的，那么如果Son中如果定义了实例变量，并且和父类中实例变量同名，那么又会发生什么呢？那么，下面我们修改上述示例：<br>定义父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(name+<span class="string">&quot;====&quot;</span>+age);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>在父类中定义实例变量name和age，并定义inof，打印自身的name和age。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;打印name:&quot;</span>+name);</span><br><span class="line">		System.out.println(<span class="string">&quot;访问父类name:&quot;</span>+<span class="built_in">super</span>.name);</span><br><span class="line">		System.out.println(<span class="string">&quot;访问父类age:&quot;</span>+<span class="built_in">super</span>.age);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>定义子类，并在子类中定义和父类相同的name实例变量，在print()方法中分别打印自身定义的name实例变量和父类的两个实例变量。<br>编写测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">		son.age = <span class="number">18</span>;</span><br><span class="line">		son.name =<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">		son.print();</span><br><span class="line">		son.info();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试类，结果如下：</p>
<p><img src="https://files.catbox.moe/uclhit.png"></p>
<p>根据结果我们可以看出，如果子类和父类具有同名的实例变量，那么在子类实例方法中访问该成员变量时，无需显式的添加super，访问的就是自身的实例变量。也就是说如果在某个方法中访问某个成员变量，但是没有显式的指定调用者，则编译器查找顺序如下：</p>
<ol>
<li><p>查找该方法中是否含有该局部变量</p>
</li>
<li><p>查找当前类中是否包含该实例变量</p>
</li>
<li><p>查找直接父类中是否包含该变量，依次向上追溯所有父类，如果直到Object类还是没有找到，则编译错误</p>
<p>​</p>
</li>
</ol>
<p>我们在子类中定义了和父类同名的实例变量，当我们创建对象后，为name属性赋值，此时JVM查找到类本身中具有name属性，因此直接为子类对象name属性赋值，而age值此时子类对象中并不存在，因此只能为从父类继承的属性赋值，当调用print()时，print()方法是在Son中定义的，在该方法中第一行因为没有使用super，所有访问的是自身的name属性，因此打印张三，第二行访问父类属性时，因为将张三赋值给了子类的name属性，父类的属性并没有赋值，因此只有默认值，所以为null。紧接着我们访问了父类的age属性，因为age属性子类自身没有定义，所以只能访问父类的，并且明确限定了super，如果不加super，那么打印的也是18，在父类中访问自身的属性时，就会打印null和18，其实当上述代码运行时，实际上会为Son对象分配两块内存，一块用于存储在子类中定义的变量，一块用于存在从父类继承过来得到的实例变量。</p>
<ul>
<li>super访问父类实例方法</li>
</ul>
<p>访问父类的实例方法和访问实例变量类似，下面通过示例来学习，使用super调用父类实例方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行了Father2的info&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son2</span> <span class="keyword">extends</span> <span class="title class_">Father2</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 子类实例方法中调用父类方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;调用Son2 test方法&quot;</span>);</span><br><span class="line">		<span class="built_in">super</span>.info();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>定义测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Son2</span> <span class="variable">son2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son2</span>();</span><br><span class="line">		son2.test();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>运行上述代码我们发现当我们调用test方法时，test方法中使用super调用了父类对象的info方法，并成功执行</p>
<ul>
<li>super访问父类构造方法</li>
</ul>
<p>我们知道子类不能继承父类的构造器，但是子类的构造方法中可以调用父类的构造方法。下面我们定义Base类和Sub类，并在Sub类中调用父类Base的构造器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义父类，并提供无参构造</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行了Base的构造方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> cn.bytecollege.extend;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义子类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		System.out.println(<span class="string">&quot;执行了Sub()构造方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Sub</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="https://files.catbox.moe/rw3hei.png"></p>
<p>从代码中可以看出使用super()调用了父类构造方法，和this一样super调用构造方法，也必须放在代码的第一行。需要注意的是子类不管是否显示的使用super调用父类构造方法，JVM总会在创建子类对象时调用父类构造器，即使把上述代码中Sub类中第9行代码删了，仍旧会出现上述效果。子类调用父类构造方法分以下几种情况。</p>
<ul>
<li>子类构造器执行体的第一行使用 super 显式调用父类构造器，系统将根据 super 调用里传入的实 参列表调用父类对应的构造器。</li>
<li>子类构造器执行体的第一行代码使用 this 显式调用本类中重载的构造器，系统将根据 this 调用 传入的实参列表调用本类中的另一个构造器。执行本类中另一个构造器时即会调用父类构造器。</li>
<li>子类构造器执行体中既没有 super 调用，也没有 this 调用，系统将会在执行子类构造器之前，隐 式调用父类无参数的构造器。</li>
</ul>
<p>换句话说就是<strong>创建子类对象时会先创建父类对象</strong></p>
<p>下面，我们通过示例来学习，我们定义3个类，A继承B，B继承C</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;创建了A对象&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">C</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;创建了B对象&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">C</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;创建了C对象&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如图：</p>
<p><img src="https://files.catbox.moe/famycf.png"></p>
<p>通过上例中的代码我们可以看出两点：</p>
<ol>
<li>即使不显式的使用super，程序在创建对象时，也会先调用父类构造方法，这是因为编译器会为我们在每个构造方法内第一行添加super();</li>
<li>创建子类对象时一定会先创建父类对象。创建任何对象总是从该类所在继承树最顶项层类的构造器开始执行，然后依次向下执行，最后才执行本类的构造器。如果某个父类通过 this 调用了同类中重载的构造器，就会依次执行此父类的多个构造器。</li>
</ol>
<h3 id="super关键字和this关键字的区别"><a href="#super关键字和this关键字的区别" class="headerlink" title="super关键字和this关键字的区别"></a>super关键字和this关键字的区别</h3><p>1.属性的区别：<br>this访问本类中的属性，如果本类没有此属性则从父类中续继查找。super访问父类中的属性。</p>
<p>2.方法的以别：<br>tihs访问本类中的方法，如果本类没有此方法则从父类中继续查找。super访问父类中的方法。</p>
<p>3.构造的区别：<br>this调用本类构造，必须放在构造方法的首行。super调用父类构造，必须放在子类构造方法首行。</p>
<p>4.其他区别：<br>this表示当前对象。sper不能表示当前对象<br>A、this.变量和super.变量<br>this.变量 调 用的当前对象的变量；<br>super.变量 直接调用的是父类中的变量。<br>B、this(参数)和super(参数)方法<br>this（参数)调用（转发）的是当前类中的构造器；<br>super(参数)用于确认要使用父类中的哪一个构造器。</p>
<h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><h4 id="Object类的方法"><a href="#Object类的方法" class="headerlink" title="Object类的方法"></a>Object类的方法</h4><p>Object是所有类的父类，当一个类没有使用extends关键字显式的指定父类，则该类继承Object类，因为所有类都是Object的子类，任何Java对象都可以调用Object类的方法。Object提供了以下几个方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>getClass()</td>
<td>获得当前对象的类对象</td>
</tr>
<tr>
<td>hashCode()</td>
<td>返回当前对象的hashCode()</td>
</tr>
<tr>
<td>equals()</td>
<td>判断两个对象是否相等</td>
</tr>
<tr>
<td>clone()</td>
<td>克隆并返回当前对象副本</td>
</tr>
<tr>
<td>toString()</td>
<td>打印该对象</td>
</tr>
<tr>
<td>notify()</td>
<td>线程唤醒</td>
</tr>
<tr>
<td>notifyAll()</td>
<td>线程唤醒</td>
</tr>
<tr>
<td>wait()</td>
<td>线程等待</td>
</tr>
<tr>
<td>finalize()</td>
<td>通知垃圾回收器回收，该方法不确实实际执行时间，不推荐使用</td>
</tr>
</tbody></table>
<h4 id="重写equals-方法"><a href="#重写equals-方法" class="headerlink" title="重写equals()方法"></a>重写equals()方法</h4><p>在上一小节我们知道Object类是所有Java类的父类，也就是说所有Java类都继承了Object类的可访问的方法，这其中就包括equals()方法，equals方法是用于判断两个对象是否相等。首先我们来看一下Object中equals方法的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>从源码中我们可以看到Object中equals()，方法代码很简单，其中this表示当前对象，也就是说谁调用equals方法，this就是谁，obj则是指要和当前对象比对的对象，源码中只是简单的判断this是否等于obj，也就是说判断当前对象和传入对象是否是同一引用，那么这里又产生了新的概念，“同一引用”，下面我们通过示例来学习同一引用<br>定义Student类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> s1;</span><br><span class="line">		System.out.println(s1.equals(s2));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时运行程序会发现打印true，在代码16行，我们创建了Student对象并将对象的引用赋值给了变量s1，在代码17行，我们又将s1中的引用赋值给了s2，此时变量s1和s2中都保存的是同一引用或者地址，调用equals方法时返回了true，那么我们现在再从内存的角度理解同一引用：<br>当代码执行到16行是，此时内存中示意图如下：</p>
<p><img src="https://files.catbox.moe/20a187.png"></p>
<p>当代码执行到底17行是，定义了变量s2，并将s1的值赋值给了s2，也就是说将栈内存中的s1中保存的值复制了一份放到了s2中，此时内存示意图如下：</p>
<p><img src="https://files.catbox.moe/ff8th8.png"></p>
<p>时s1和s2就是同一引用，因为他们指向了堆内存中的同一块内存区域，那么调用equals方法后，判断栈内存中值是否相等，换句话说就是判断自己是否和自己相等的，结果是肯定的。<br>但是在实际情况中只有在少数情况下才会出现两个对象指向同一引用的情况，那么该怎么判断两个对象相等呢，例如s1和s2所有的属性都相等，我们就认为这两个对象相等，此时Object类提供的equals()方法是不能满足我们的需要的，这就需要重写equals()方法。<br>通常重写equals()方法需要满足以下几个条件：</p>
<ul>
<li>自反性∶ 对任意 x，x.equals（x）一定返回 true。</li>
<li>对称性∶ 对任意x和 y，如果 y.equals（x）返回 true，则x.equals（y）也返回 true。</li>
<li>传递性∶ 对任意x，y，z，如果x.equals（y）返回 ture，y.equals（z）返回 true，则x.equals（z）一定返回 true。</li>
<li>一致性∶ 对任意x和 y，如果对象中用于等价比较的信息没有改变，那么无论调用 x.equals（y） 多少次，返回的结果应该保持一致，要么一直是 true，要么一直是 false。</li>
<li>对任何不是 null 的x，x.equals（null）一定返回 false。</li>
</ul>
<p>下面，我们根据上述规则重写Student的equals()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">		<span class="comment">//1.判断是否是同一引用，如果是则直接返回true</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.判断obj是否为null，如果是则返回false</span></span><br><span class="line">		<span class="keyword">if</span>(obj == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//3.判断是否是同一类型</span></span><br><span class="line">		<span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Student) ) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//4.转换为同一类型对象</span></span><br><span class="line">		<span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">		<span class="comment">//5.判断所有实例变量是否相等</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">this</span>.name.equals(s.name)&amp;&amp;<span class="built_in">this</span>.age==s.age) &#123;<span class="comment">//这里的equals是比较String对象的</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据重写的步骤，我们可以将重写 equals()方法归纳为以下5：</p>
<ol>
<li>判断是否是同一引用，如果是则直接返回true</li>
<li>判断obj是否为null，如果是则返回false</li>
<li>判断是否是同一类型</li>
<li>转换为同一类型对象</li>
<li>判断所有实例变量是否相等</li>
</ol>
<p>下面，我们编写测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EuqalsTest</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(s1.equals(s2));</span><br><span class="line">		System.out.println(s1.equals(s3));</span><br><span class="line">		System.out.println(s2.equals(s3));<span class="comment">//这里的equals是比较Object对象的</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="x3D-x3D-和equals的区别"><a href="#x3D-x3D-和equals的区别" class="headerlink" title="&#x3D;&#x3D;和equals的区别"></a>&#x3D;&#x3D;和equals的区别</h4><p>我们在判断两个基本类型是否相等时，通常使用双等号，但是判断两个对象相等，使用&#x3D;&#x3D;就比较有局限性了，因为使用双等号只能判断两个变量指向同一引用的情况，而我们在日常开发中通常两个对象的所有实例变量相等，即可认为两个对象相等。从内存的角度来说，&#x3D;&#x3D;用于判断变量栈内存中保存的内容是否相等，而equals则是判断对象在堆内存中的内容是否相等。简而言之，基本类型相等的判断使用&#x3D;&#x3D;，而判断两个对象是否相等，则需要重写equals方法来判断。</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h3><p>继承、方法重写、父类引用指向子类对象，对象调用同一个方法时，展现出不同的行为特性</p>
<p>Java引用变量有两个类型：编译时类型和运行时类型。编译时类型有声明该变量时使用的类型决定，运行时类型由实际赋值给该变量的对象决定。如果两种类型不一致，就会出现多态性（也就是父类引用指向了子类对象）。</p>
<p>定义父类，父类中定义了实例变量和两个实例方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.poly;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">base</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;父类的普通方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;父类被子类覆盖的方法&quot;</span>);</span><br><span class="line">	&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>定义子类，子类中定义了实例变量，两个实例方法，其中一个方法重写了父类方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.poly;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;子类中的普通方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;子类覆盖了父类中的方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>定义测试类，在测试类创建3个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.poly;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//创建父类对象，编译时类型和运行时类型一致</span></span><br><span class="line">		<span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line">		System.out.println(base.a);</span><br><span class="line">		base.base();</span><br><span class="line">		base.test();</span><br><span class="line">		<span class="comment">//创建子类对象，编译时类型和运行时类型一致</span></span><br><span class="line">		<span class="type">Sub</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">		System.out.println(sub.a);</span><br><span class="line">		sub.sub();</span><br><span class="line">		sub.test();</span><br><span class="line">		<span class="comment">//编译时类型和运行时类型不一致，多态发生</span></span><br><span class="line">		<span class="type">Base</span> <span class="variable">ploy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">		System.out.println(ploy.a);</span><br><span class="line">		ploy.base();</span><br><span class="line">		ploy.test();</span><br><span class="line">	&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的程序中，显示创建了3个对象，前面两个对象base和sub，编译时类型和运行时类型完全相同，因此不会出现多态，他们调用成员变量和成员方法是结果正常，第三个poly比较特殊，他的编译时类型是Base，运行时类型则是Sub，当调用改对象的test()方法时，实际上执行的是子类中覆盖后的test()方法，这就可能出现多态了。</p>
<p>当把一个子类对象直接赋值给父类引用变量时，就同上面的代码一样，当运行时调用该变量的方法时，其方法行为总是表现出子类方法的行为特征，而不是父类方法的行为特征，这就是相同类型的变量、调用同一个方法是呈现出多种不同的行为特征，这就是多态。</p>
<p>与方法不同的是，<strong>对象的实例变量不具备多态性</strong>。比如上面的ploy引用变量，程序中输出实例变量时，输出的了父类的实例变量。</p>
<h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p>instanceof 运算符的作用是判断对象是否是某个类型，第一个操作数通常是一个引用类型的变量，后面的操作数通常是一个类，或者是其子类等等，如果是则返回true，如果不是则返回false。</p>
<p>在使用 instanceof 运算符时需要注意; instanceof 运算符前面操作数的编译时类型要么与后面的类相同，要么与后面的类具有父子继承关系，否则会引起编译错误。下面程序示范了instanceof运算符的用法。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.instance;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义Person类型</span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;<span class="keyword">package</span> cn.bytecollege.instance;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义Student类</span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;&#125;<span class="keyword">package</span> cn.bytecollege.instance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//定义Student类型对象</span></span><br><span class="line">		<span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">		<span class="comment">//s 是Student类型的对象，因此返回true</span></span><br><span class="line">		System.out.println(s <span class="keyword">instanceof</span> Student);</span><br><span class="line">		<span class="comment">//父类引用指向子类对象</span></span><br><span class="line">		<span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">		<span class="comment">//因为Student和Person存在继承关系，所以p可以看做是Person类型</span></span><br><span class="line">		<span class="comment">//返回true</span></span><br><span class="line">		System.out.println(p <span class="keyword">instanceof</span> Person);</span><br><span class="line">		<span class="comment">//因为运行时类型就是Student类型，所以返回true</span></span><br><span class="line">		System.out.println(p <span class="keyword">instanceof</span> Student);</span><br><span class="line">        <span class="comment">//p不是String类型，编译出错</span></span><br><span class="line">        System.out.println(p <span class="keyword">instanceof</span> String);</span><br><span class="line">	&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="向上转型和向下转型"><a href="#向上转型和向下转型" class="headerlink" title="向上转型和向下转型"></a>向上转型和向下转型</h3><p>在前面重写equals方法时，我们在第4步做了一个转型操作，从代码中我们可以看出，我们将Object类型的对象转成了Student类型的对象，我们知道Object是所有Java类的父类，也就是说Student是Object的子类，这种将父类对象转型成子类的操作就叫做向下转型，类似我们在基本类型的表示大范围的数据类型转成表示小范围的数据类型，需要强制转换。反之，我们也可以将子类对象转换成父类型，这种操作在Java中我们称之为向下转型。需要注意的是：引用类型之间的转换只能在具有继承关系的两个类型之间进行，如果是两个没有任何继承关系的类型，则无法进行类型转换，否则编译时就会出现错误。如果试图把一个父类实例转换成子类类型，则这个对象必须实际上是子类实例才行（即编译时类型为父类类却，而运行时类型是子类类型），否则将在运行时引发 ClassCastException 异常。 </p>
<p>下面，我们通过示例来学习向上转型和向下转型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.instance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CastDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">		<span class="comment">//子类对象转成父类，向上转型，自动转换</span></span><br><span class="line">		<span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> s;</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		<span class="comment">//父类对象转子类，向下转型，强制转换</span></span><br><span class="line">		<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> (Student) p;</span><br><span class="line">		<span class="comment">//String和Person没有任何关系，转换时会编译出错</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> p2;</span><br><span class="line">	&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h2><p>我们知道构造方法可以对对象进行状态的初始化，和构造方法具有相同功能的是初始化块。</p>
<h3 id="初始化块-1"><a href="#初始化块-1" class="headerlink" title="初始化块"></a>初始化块</h3><p>一个类中可以存在多个初始化块，相同类型的初始化块按照书写的先后顺序执行，其语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符]&#123;</span><br><span class="line"> 	<span class="comment">//代码块   &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.init;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="comment">//定义初始化块</span></span><br><span class="line">	&#123;	</span><br><span class="line">		System.out.println(<span class="string">&quot;执行了第1个初始化块&quot;</span>);</span><br><span class="line">		<span class="comment">//初始化中也可以对实例变量初始化</span></span><br><span class="line">		name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行了构造方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义初始化块</span></span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行了第2个初始化块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">		System.out.println(<span class="string">&quot;main方法中访问name属性：&quot;</span>+student.name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<p><img src="https://files.catbox.moe/iva301.png"></p>
<p>从上面的结果可以看出，当创建Java对象时，系统总是先调用类中定义的初始化块，如果一个类中定义了2个普通的初始化块，前面定义的初始化块先执行，后面定义的初始化块后执行。</p>
<p>虽然 Java 允许一个类里定义 2个普通初始化块，但这没有任何意义。因为初始化块是在创建 Java对象时隐式执行的，而且它们总是全部执行，因此完全可以把多个普通初始化块合并成一个初始化块，从而可以让程序更加简洁，可读性更强。</p>
<p>从上面的示例中我们可以看出，实例变量也可以在初始化块中进行初始化，也就是说从某种程度上来说，初始化块是构造器的补充，但是初始化块不能替代构造方法。因为初始化块是一段固定执行的代码，他不能接受任何参数。如果有一段初始化处理代码对所有对象完全相同，且无需接受任何参数，就可以把这段初始化代码提取到初始化块中。如果从反编译的角度来看，初始化块中的代码在运行时会合并进构造器中。</p>
<p>从结果中我们可以看出在构造方法中多了几行指令，因此我们可以得出结论，初始化块中的代码最终也会合并进构造方法中执行。</p>
<h3 id="静态初始化块"><a href="#静态初始化块" class="headerlink" title="静态初始化块"></a>静态初始化块</h3><p>如果定义初始化块使用了static修饰，则这个初始化块就变成了静态初始化块，也被称为类初始化块（普通初始化块负责对对象进行初始化，类初始化块则负责对类进行初始化）。静态初始化块是类相关的，系统将在类初始化阶段执行静态初始化块，而不是在创建对象时才执行，因此静态初始化块比普通初始化块先执行。并且类初始化块通常用于对类变量进行初始化处理，静态初始化块不能对实例变量进行初始化。<br>与普通初始化块类似的是，系统在类初始化阶段执行静态初始化块时，不仅会执行本类的静态初始化块，而且还会一直上溯到 java.lang.Object 类（如果它包含静态初始化块），先执行java.lang.Object 类的静态初始化块（如果有），然后执行其父类的静态初始化块，最后才执行该类的静态初始化块，经过这个过程，才完成了该类的初始化过程。只有当类初始化完成后，才可以在系统中使用这个类，包括访问这个类的类方法、类变量或者用这个类来创建实例。<br><strong>注意：静态初始化块也被称为类初始化块，同样静态成员不能访问非静态成员，因此静态初始化块不能访问实例变量和实例方法。</strong></p>
<p>下面，我们通过示例来学习静态初始化块：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.init;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">	<span class="comment">//静态初始化块</span></span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Base静态块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Base初始化块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Base构造方法&quot;</span>);</span><br><span class="line">	&#125;&#125;<span class="keyword">package</span> cn.bytecollege.init;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Sub静态块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Sub初始化块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Sub构造方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;<span class="keyword">package</span> cn.bytecollege.init;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Sub</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">	&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/4fff8x.png"></p>
<p>从结果我们可以看出，我们创建Sub对象时，先追溯到父类，执行了父类的静态块代码，然后执行了子类的静态块代码，然后执行了父类的初始化块中的代码和构造方法，最后才到子类中执行了子类的初始化代码块和构造方法。</p>
<p>总结一下，我们可以归纳出静态代码块和初始化块的顺序</p>
<p><img src="https://files.catbox.moe/vibzie.png"></p>
<h3 id="初始化块中的陷阱"><a href="#初始化块中的陷阱" class="headerlink" title="初始化块中的陷阱"></a>初始化块中的陷阱</h3><p>需要注意的是在类运行过程中，一定是类成员先初始化，查看下面的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.init;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">Sub</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">	<span class="comment">//静态初始化块</span></span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Base静态块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Base初始化块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Base构造方法&quot;</span>);</span><br><span class="line">	&#125;&#125;<span class="keyword">package</span> cn.bytecollege.init;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Sub静态块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Sub初始化块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Sub构造方法&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;<span class="keyword">package</span> cn.bytecollege.init;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Sub</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">	&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/k94i5w.png"></p>
<p>这个结果你可能会有疑惑，但是你始终记得static修饰的成员先初始化就能得到答案，当程序运行时，我们创建了sub对象，此时，因为static修饰的会先运行，代码第4行我们创建了sub对象，创建子类对象时会先创建父类对象，因此会先创建父类对象，创建完父类对象后再创建子类对象，然后继续根据我们上一小节总结的顺序进行执行。</p>
<h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><p>final关键字可以用于修饰类，变量和方法，用于表示不可变的意思。</p>
<p>final修饰变量时，表示该变量一旦获得初始值以后，就不能被不能被重新赋值，final既可以修饰成员变量，也可以修饰局部变量、形参。</p>
<h3 id="final-修饰成员变量"><a href="#final-修饰成员变量" class="headerlink" title="final 修饰成员变量"></a>final 修饰成员变量</h3><p>成员变量是随类初始化或对象初始化而初始化的。当类初始化时，系统会为该类的类变量分配内存，并分配默认值∶当创建对象时，系统会为该对象的实例变量分配内存，并分配默认值。也就是说，当执行静态初始化块时可以对类变量赋初始值; <strong>当执行普通初始化块、构造器时可对实例变量赋初始值</strong>。因此，成员变量的初始值可以在定义该变量时指定默认值，也可以在初始化块、构造器中指定初始值。 对于 final 修饰的成员变量而言，一旦有了初始值，就不能被重新赋值，如果既没有在定义成员变量时指定初始值，也没有在初始化块、构造器中为成员变量指定初始值，那么这些成员变量的值将一直是系统默认分配的 0、”\u0000’、false 或 null，这些成员变量也就完全失去了存在的意义。因此 Java 语法规定∶ final 修饰的成员变量必须由程序员显式地指定初始值。 归纳起来，final 修饰的类变量、实例变量能指定初始值的地方如下。</p>
<ul>
<li>类变量:必须在静态初始化块中指定初始值或声明该类变量时指定初始值，而且只能在两个地 方的其中之一指定。</li>
<li>实例变量∶ 必须在非静态初始化块、声明该实例变量或构造器中指定初始值，而且只能在三个 地方的其中之一指定。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecolleg.fin;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Final1</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> age;</span><br><span class="line">	String gender;</span><br><span class="line">	<span class="keyword">final</span> String name;</span><br><span class="line">	<span class="comment">//静态块中初始化类变量</span></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		age = <span class="number">18</span>;</span><br><span class="line">		<span class="comment">//静态块中不能初始化实例变量//		gender = &quot;男&quot;;</span></span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//初始化块中可以初始化final修饰的变量</span></span><br><span class="line">		gender = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">		name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>与普通成员变量不同的是，****final</strong> <strong>成员变量（包括实例变量和类变量）必须由程序员显式初始化</strong></p>
<h3 id="final-修饰局部变量"><a href="#final-修饰局部变量" class="headerlink" title="final 修饰局部变量"></a>final 修饰局部变量</h3><p>系统不会对局部变量进行初始化，局部变量必须由程序员显式初始化。因此使用 final 修饰局部变量时，既可以在定义时指定默认值，也可以不指定默认值。 如果 final 修饰的局部变量在定义时没有指定默认值，则可以在后面代码中对该 final 变量赋初始值，但只能一次，不能重复赋值;如果 final 修饰的局部变量在定义时已经指定默认值，则后面代码中不能再对该变量赋值。下面程序示范了 final 修饰局部变量、形参的情形。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecolleg.fin;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Final2</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> a)</span> &#123;</span><br><span class="line">		<span class="comment">//方法中不能对final修饰的形参赋值//		a = 100;</span></span><br><span class="line">		System.out.println(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		test(<span class="number">300</span>);</span><br><span class="line">	&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="final修饰方法"><a href="#final修饰方法" class="headerlink" title="final修饰方法"></a>final修饰方法</h3><p>final 修饰的方法不可被重写，如果出于某些原因，不希望子类重写父类的某个方法，则可以使用 final 修饰该方法。 Java 提供的 Object 类里就有一个 final方法∶ getClassO），因为 Java不希望任何类重写这个方法，所以使用 final把这个方法密封起来。但对于该类提供的 toString()和 equals()方法，都允许子类重写，因此没有使用 final 修饰它们。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.init;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;&#125;<span class="keyword">package</span> cn.bytecollege.init;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">	<span class="comment">//编译出错，final修饰的方法不能被重写</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="final-修饰类"><a href="#final-修饰类" class="headerlink" title="final 修饰类"></a>final 修饰类</h3><p>inal修饰的类不能有子类，也就是说final修饰的类不能被继承，当子类继承父类时，父类的有些方法可能被重写，属性可以被访问，如果不希望出现上述情况，可以使用final修饰类，这样讲阻止子类继承。</p>
<h3 id="不可变类"><a href="#不可变类" class="headerlink" title="不可变类"></a>不可变类</h3><p>不可变（immutable）类的意思是创建该类的实例后，该实例的实例变量是不可改变的。Java 提供的 8 个包装类和 java.lang.String 类都是不可变类，当创建它们的实例后，其实例的实例变量不可改变。<br>如果需要创建自定义的不可变类，可遵守如下规则。</p>
<ul>
<li>使用 private 和 final 修饰符来修饰该类的成员变量。</li>
<li>提供带参数构造器，用于根据传入参数来初始化类里的成员变量。</li>
<li>仅为该类的成员变量提供getter 方法，不要为该类的成员变量提供 setter 方法，因为普通方法无 法修改 final 修饰的成员变量。</li>
</ul>
<h2 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h2><p>在软件开发中，软件的可维护性和代码的可复用性是一个开发者必须所思考的内容，为了增加软件的可扩展性和灵活性，开发者应该尽可能的根据以下这6条原则开发程序。</p>
<h3 id="单一职责原则-Single-Responsibility-Principle"><a href="#单一职责原则-Single-Responsibility-Principle" class="headerlink" title="单一职责原则(Single Responsibility Principle)"></a>单一职责原则(Single Responsibility Principle)</h3><p>单一职责简要来说就是对于一个类而言，应该只专注做一件事情。单一职责元素是一种对对象的理想期望，对象不应该承担太多的职责。这样就可以保证对象的高内聚，以及细粒度，方便对对象的重用。如果一个对象承担了太多的职责，当客户端需要该对象的某个职责时，就不得不把所有的职责都包含进来，从而造成代码冗余。</p>
<h3 id="里式替换原则-Liskov-Substitution-Principle"><a href="#里式替换原则-Liskov-Substitution-Principle" class="headerlink" title="里式替换原则(Liskov Substitution Principle)"></a>里式替换原则(Liskov Substitution Principle)</h3><p>在面向对象的语言中，继承是一种非常优秀的机制，继承主要有2下几个优点：</p>
<ul>
<li>代码复用，减少子类的工作量，每个子类都拥有父类的方法和属性</li>
<li>提高代码的可重用性及可扩展性</li>
</ul>
<p>同样，继承也存在若干缺点，主要体现在以下几个方面：</p>
<ul>
<li>继承是入侵式的，只要继承就必须拥有父类的方法和属性</li>
<li>增强了耦合性，当父类的常量、变量、方法修改时，必须考虑子类的修改，这有可能造成大量的代码需要重构</li>
</ul>
<p>里式替换原则可以简单的概况为所有引用基类的地方必须能透明的使用其子类，换句话说，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或者异常。但是反过来则不行，子类能出现的地方，父类一不定能出现，这一点要尤为注意。</p>
<h3 id="依赖倒置原则-Dependence-Inversion-Principle"><a href="#依赖倒置原则-Dependence-Inversion-Principle" class="headerlink" title="依赖倒置原则(Dependence Inversion Principle)"></a>依赖倒置原则(Dependence Inversion Principle)</h3><p>依赖倒置原则是指：高层模块不应该依赖底层模块，两者都依赖其抽象，并且抽象不应该依赖细节，而应该是细节依赖于抽象。<br>在Java语言中，抽象就是指接口或抽象类，两者都是不能直接被实例化的；细节就是具体的实现类，实现类实现了接口或继承了抽象类，其特点是可以直接被实例化。依赖倒置原则在Java语言中的表现是：</p>
<ul>
<li>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生；</li>
<li>接口或抽象类不依赖于实现类；</li>
<li>实现类依赖于接口或抽象类。</li>
</ul>
<p>依赖倒置原则更加精确的定义就是“面向接口编程”——OOD（Object-OrientedDesign）的精髓之一。依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性。依赖倒置原则是JavaBean、EJB等组件设计模型背后的基本原则。</p>
<h3 id="接口隔离原则-Interface-Segregation-Principle"><a href="#接口隔离原则-Interface-Segregation-Principle" class="headerlink" title="接口隔离原则(Interface Segregation Principle)"></a>接口隔离原则(Interface Segregation Principle)</h3><p>接口隔离原则的具体含义如下。</p>
<ul>
<li>一个类对另外一个类的依赖性应当是建立在最小的接口上的。</li>
<li>一个接口代表一个角色，不应当将不同的角色都交给一个接口。没有关系的接口合并在一起，形成一个臃肿的大接口，这是对角色和接口的污染。因此使用多个专门的接口比使用单一的总接口要好。</li>
<li>不应该强迫客户依赖于它们不用的方法。接口属于客户，不属于它所在的类层次结构，即不要强迫客户使用它们不用的方法，否则这些客户就会面临由于这些不使用的方法的改变所带来的改变。</li>
</ul>
<h3 id="迪米特法则-Law-of-Demeter"><a href="#迪米特法则-Law-of-Demeter" class="headerlink" title="迪米特法则(Law of Demeter)"></a>迪米特法则(Law of Demeter)</h3><p>迪米特法则又叫最少知识原则（Least Knowledge Principle，LKP），意思是一个对象应当对其他对象尽可能少的了解。迪米特法则最初是用来作为面向对象的系统设计风格的一种法则，在1987年由Ian Holland在美国东北大学为一个叫迪米特的项目设计提出的，因此叫做迪米特法则。<br>按照迪米特法则，如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用；如果一个类需要调用另一个类的某一个方法，可以通过第三者转发这个调用。</p>
<h3 id="开闭原则-Open-Closed-Principle"><a href="#开闭原则-Open-Closed-Principle" class="headerlink" title="开闭原则(Open-Closed Principle)"></a>开闭原则(Open-Closed Principle)</h3><p>开闭原则是指一个软件实体应当对扩展开放，对修改关闭。<br>这个原则说的是，在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展，即应当可以在不必修改源代码的情况下改变这个模块的行为。在面向对象的编程中，开闭原则是最基础的原则，起到总的指导作用，其他原则（单一职责、里氏替换、依赖倒置、接口隔离、迪米特法则）都是开闭原则的具体形态，即其他原则都是开闭原则的手段和工具。开闭原则的重要性可以通过以下几个方面来体现。</p>
<ul>
<li><p><strong>开闭原则提高复用性</strong>。在面向对象的设计中，所有的逻辑都是从原子逻辑组合而来的，而不是在一个类中独立实现一个业务逻辑，代码粒度越小，被复用的可能性就越大，避免相同的逻辑重复增加。开闭原则的设计保证系统是一个在高层次上实现了复用的系统。</p>
</li>
<li><p><strong>开闭原则提高可维护性</strong>。一个软件投产后，维护人员的工作不仅仅是对数据进行维护，还可能对程序进行扩展，就是扩展一个类，而不是修改一个类。开闭原则对已有软件模块，特别是最重要的抽象层模块要求不能再修改，这就使变化中的软件系统有一定的稳定性和延续性，便于系统的维护。</p>
</li>
<li><p><strong>开闭原则提高灵活性</strong>。所有的软件系统都有一个共同的性质，即对系统的需求都会随时间的推移而发生变化。在软件系统面临新的需求时，系统的设计必须是稳定的。开闭原则可以通过扩展已有的软件系统，提供新的行为，能快速应对变化，以满足对软件新的需求，使变化中的软件系统有一定的适应性和灵活性。</p>
</li>
<li><p><strong>开闭原则易于测试</strong>。测试是软件开发过程中必不可少的一个环节。测试代码不仅要保证逻辑的正确性，还要保证苛刻条件（高压力、异常、错误）下不产生“有毒代码”（Poisonous Code），因此当有变化提出时，原有健壮的代码要尽量不修改，而是通过扩展来实现。否则，就需要把原有的测试过程回笼一遍，需要进行单元测试、功能测试、集成测试，甚至是验收测试。开闭原则的使用，保证软件是通过扩展来实现业务逻辑的变化，而不是修改。因此，对于新增加的类，只需新增相应的测试类，编写对应的测试方法，只要保证新增的类是正确的就可以了。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java抽象类和接口</title>
    <url>/2022/07/26/Java%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>我们学习了面向对象以及面向对象的特征，我们知道父类一般描述的是一类事物的共性，也就是说父类就是对基类的初步抽象，但是有的时候我们可能只知道子类具有行为，但是不能确切的知道这些子类如何实现这些方法，例如，我们都知道绝大多数鸟都会飞，但是每种鸟飞的高度和速度都不同，这样父类也就不能准确的描述子类飞行这个行为。即便是父类定义了方法，不同的鸟根据实际情况也会重写这个方法，那么这个方法的定义也就显得多余。<br>你可能会想到，能不能只定义方法头，而不提供方法的具体实现，让这个类的子类去自己实现呢？在Java中，这种行为是允许的，这就是我们我们本章节学习的抽象类和接口。</p>
<h2 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h2><p>抽象类就是使用abstract修饰的类。抽象方法就是使用abstract修饰的方法。抽象类中可以包含抽象方法，也可以不包含。<br>抽象类和抽象方法的规则如下：</p>
<ul>
<li>抽象类必须使用 abstract 修饰符来修饰，抽象方法也必须使用 abstract 修饰符来修饰，抽象方法 不能有方法体。</li>
<li>抽象类不能被实例化，无法使用 new 关键字来调用抽象类的构造器创建抽象类的实例。即使抽 象类里不包含抽象方法，这个抽象类也不能创建实例。</li>
<li>抽象类可以包含成员变量、方法（普通方法和抽象方法都可以）、构造器、初始化块、内部类（接 口、枚举）5种成分。抽象类的构造器不能用于创建实例，主要是用于被其子类调用。</li>
<li>含有抽象方法的类（包括直接定义了一个抽象方法;或继承了一个抽象父类，但没有完全实现 父类包含的抽象方法;或实现了一个接口，但没有完全实现接口包含的抽象方法三种情况）只能被定义成抽象类。</li>
</ul>
<p>定义抽象类只需在普通类上增加 abstract 修饰符即可。甚至一个普通类（没有包含抽象方法的类）增加 abstract 修饰符后也将变成抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCalc</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 普通类中可以定义的内容，抽象类中都可以定义</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String type;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义抽象方法，具体实现由子类实现</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">(<span class="type">double</span>...args)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，定义了一个抽象类，抽象类的命名一般用Abstract作为前缀，在非抽象类中定义的内容在抽象类中同样可以定义，并且抽象类中还可以定义抽象方法，在代码16行，定义了一个抽象方法，从示例中可以看出，抽象方法使用了abstract修饰，并且抽象方法只有方法头，没有方法体。参数列表后直接以“;”结束。<br>下面定义子类并重写父类的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AreaCalc</span> <span class="keyword">extends</span> <span class="title class_">AbstractCalc</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 计算圆面积</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">(<span class="type">double</span>... args)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(args!=<span class="literal">null</span>&amp;&amp;args.length&gt;<span class="number">0</span>&amp;&amp;args.length==<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> Math.PI*Math.pow(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例中继承了抽象类AbstractCalc，并重写了父类的抽象方法，因为父类方法使用了可变参数，而计算圆面积时，只需要传入半径即可，因此先判断可变参数是否为null以及长度是否为0，并且只有1个参数时，就可以确定是在计算圆面积。需要注意的是：</p>
<ul>
<li>子类继承抽象类必须重写父类的抽象方法（普通实例方法可以不重写），如果不重写父类的抽象方法，那么自己也必须是一个抽象类。</li>
<li>abstract只能修饰类和方法，不能修饰成员变量和局部变量、构造器等，没有抽象变量和抽象构造方法。</li>
<li>抽象类也是单继承的，不管是普通类继承抽象类还是抽象类继承抽象类，都是单继承的。</li>
</ul>
<p>除此之外，当使用 static 修饰一个方法时，表明这个方法属于该类本身，即通过类就可调用该方法，但如果该方法被定义成抽象方法，则将导致通过该类来调用该方法时出现错误（调用了一个没有方法体的方法肯定会引起错误）。因此static 和 abstract 不能同时修饰某个方法，即没有所谓的类抽象方法。</p>
<p>abstract 关键字修饰的方法必须被其子类重写才有意义，否则这个方法将永远不会有方法体，因此 abstract 方法不能定义为 private 访问权限，即 private和abstract 不能同时修饰方法。</p>
<p>从前面的示例程序可以看出，抽象类不能创建实例，只能当成父类来被继承。从语义的角度来看，抽象类是从多个具体类中抽象出来的父类，它具有更高层次的抽象。·从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为其子类的模板，从而避免了子类设计的随意性。 抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会大致保留抽象类的行为方式。 如果编写一个抽象父类，父类提供了多个子类的通用方法，并把一个或多个方法留给其子类实现，这就是一种模板模式，模板模式也是十分常见且简单的设计模式之一。例如前面介绍的 Shape、Circle和Triangle 三个类，已经使用了模板模式。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>抽象类是从多个类中抽象出来的模板，如果将这种抽象更彻底一些，可以抽象出更加简洁和精炼的类——接口。<br>在日常生活中，我们经常可以听到某某接口，例如：USB接口、打印机接口等，你可能会将Java中的接口和上述的这些接口等同，其实这是不准确的，在Java中的接口更倾向于描述行为规范，也就等价于描述的一些规定。例如经常听到一句话叫做一流公司做标准，这里的标准就可以理解为Java中的接口，不同的工厂生产的产品遵守这个标准和规范产品才能在市场上流通。因此，Java中的接口可以理解为定义了一种规范，接口定义了某一批类所要遵守的规范，接口并不关心类的内部状态数据，也不关注这些方法里的实现细节，它只规定子类里必须提供某些方法。<br>由此可见，接口是从多个相似的类<strong>中抽象出来的规范</strong>，接口不提供任何实现。</p>
<h3 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h3><p>定义接口使用关键字interface，接口的定义语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] interface 接口名 extends 父接口<span class="number">1</span>,父接口<span class="number">2</span>,父接口<span class="number">3.</span>..&#123;</span><br><span class="line"> 	  <span class="number">0</span>个或者多个常量定义...</span><br><span class="line">      <span class="number">0</span>个或者多个抽象方法定义...</span><br><span class="line">      <span class="number">0</span>个或者多个内部类、接口、枚举</span><br><span class="line">      <span class="number">0</span>个多个私有的方法、默认方法或者类方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于上面语法说明如下：</p>
<ul>
<li>修饰符可以是 public 或者省略，如果省略了public 访问控制符，则默认采用包权限访问控制符， 即只有在相同包结构下才可以访问该接口。</li>
<li>接口名应与类名采用相同的命名规则，即如果仅从语法角度来看，接口名只要是合法的标识符 即可;如果要遵守 Java 可读性规范，则接口名应由多个有意义的单词连缀而成，每个单词首字母大写，单词与单词之间无须任何分隔符。接口名通常能够使用形容词。</li>
<li>一个接口可以有多个直接父接口，但接口只能继承接口，不能继承类。</li>
</ul>
<p>由于接口定义的是一种规范，因此接口里不能包含构造器和初始化块定义。接口里可以包含成员变量（只能是静态常量）、方法（只能是抽象实例方法、类方法、默认方法或私有方法）、内部类（包括内部接口、枚举）定义。<br> 对比接口和类的定义方式，不难发现接口的成员比类里的成员少了两种（构造器和初始化块）而且接口里的成员变量只能是静态常量，接口里的方法只能是抽象方法、类方法、默认方法或私有方法。<br> 前面已经说过了，接口里定义的是多个类共同的公共行为规范，因此接口里的常量、方法、内部类和内部枚举都是 public 访问权限。定义接口成员时，可以省略访问控制修饰符，如果指定访问控制修饰符，则只能使用 public 访问控制修饰符。<br> Java9为接口增加了一种新的私有方法，其实私有方法的主要作用就是作为工具方法，为接口中的默认方法或类方法提供支持。私有方法可以拥有方法体，但私有方法不能使用 default 修饰。私有方法可以使用 static 修饰，也就是说，私有方法既可是类方法，也可是实例方法。 <br>对于接口里定义的静态常量而言，它们是接口相关的，因此系统会自动为这些成员变量增加 static和 final 两个修饰符。也就是说，在接口中定义成员变量时，不管是否使用 public static final修饰符，接口里的成员变量总是使用这三个修饰符来修饰。而且接口里没有构造器和初始化块，因此接口里定义的成员变量只能在定义时指定默认值。<br>接口中定义的变量都是常量，默认的修饰符就是public static final ,因此即使不加，在编译时编译器也会自动添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_SIZE</span> <span class="operator">=</span> <span class="number">50</span></span><br></pre></td></tr></table></figure>

<p>接口里定义的方法只能是抽象方法、类方法、默认方法或私有方法，因此如果不是定义默认方法、类方法或私有方法，系统将自动为普通方法增加 abstract 修饰符;定义接口里的普通方法时不管是否使用 public abstract 修饰符，接口里的普通方法总是使用public abstract 来修饰。接口里的普通方法不能有方法实现（方法体）; 但类方法、默认方法、私有方法都必须有方法实现（方法体）。<br>下面，通过示例来学习接口的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBird</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 常量的命名一般使用大写，多个单词</span></span><br><span class="line"><span class="comment">	 * 用_连接</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">MAX_AGE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义抽象方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义类方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;鸟类吃食物&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义默认方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;鸟类睡觉&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">alive</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;鸟类存活了100年&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是子类继承了接口只有抽象方法是需要强制重写的，否则子类就需要使用abstract修饰。<br>Java 8 允许在接口中定义默认方法，默认方法必须使用 default 修饰，该方法不能使用 static 修饰，无论程序是否指定，默认方法总是使用 public 修饰——如果开发者没有指定 public，系统会自动为默认方法添加 public 修饰符。由于默认方法并没有 static 修饰，因此不能直接使用接口来调用默认方法，需要使用接口的实现类的实例来调用这些默认方法。<br>Java8允许在接口中定义类方法，类方法必须使用 static 修饰，该方法不能使用 default 修饰，无论程序是否指定，类方法总是使用 public 修饰——如果开发者没有指定 public，系统会自动为类方法添加 public 修饰符。类方法可以直接使用接口来调用。<br> Java9增加了带方法体的私有方法。<br>下面定义一个接口的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sparrow</span> <span class="keyword">implements</span> <span class="title class_">IBird</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//默认方法可以不重写</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		IBird.<span class="built_in">super</span>.sleep();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上例中我们可以得出接口中的抽象方法子类必须重写，否则就需要用abstract修饰，默认方法则可以选择性重写，而私有方法则不需要重写。</p>
<p>静态方法可以被继承，但是，不能被覆盖，即重写。如果父类中定义的静态方法在子类中被重新定义，那么在父类中定义的静态方法将被隐藏。可以使用语法：父类名.静态方法调用隐藏的静态方法。 如果父类中含有一个静态方法，且在子类中也含有一个返回类型、方法名、参数列表均与之相同的静态方法，那么该子类实际上只是将父类中的该同名方法进行了隐藏，而非重写。换句话说，父类和子类中含有的其实是两个没有关系的方法，它们的行为也并不具有多态性 因此，通过一个指向子类对象的父类引用变量来调用父子同名的静态方法时，只会调用父类的静态方法。</p>
<p>Java中的静态方法不能被子类重写</p>
<p>特点：静态方法属于类的方法，也属于对象的方法，但是静态方法随类的存在。</p>
<p>结论：Java中的静态方法不能被子类重写，实际上，子类的静态方法隐藏了父类的静态方法，因此父类的子类的静态方法同时存在，只不过父类通过类名（或对象名）调用的是父类的静态方法，子类通过类名（或对象名）调用的是子类的</p>
<p>结论：</p>
<p>（1）静态方法不支持多态。（final，private 方法也如此）</p>
<p>（2）静态方法可通过类名直接调用，也可通过类的实例化对象调用，因此Father 的实例化对象f1调用的是父类（不是子类）的静态方法。</p>
<p>（3）静态方法的绑定时期为代码的编译器期，也叫前期绑定。非静态的方法属于程序的执行期绑定，也就运行期绑定。</p>
<h3 id="接口和抽象类的区别1"><a href="#接口和抽象类的区别1" class="headerlink" title="接口和抽象类的区别1"></a>接口和抽象类的区别1</h3><p>（还要说接口、抽象类都包含什么）</p>
<p>抽象类：抽象类可以包含成员变量、方法（普通方法（其它方法）和抽象方法都可以）、构造器、初始化块、内部类（接 口、枚举）5种成分。抽象类的构造器不能用于创建实例，主要是用于被其子类调用。</p>
<p>接口：接口里可以包含成员变量（只能是静态常量）、方法（只能是抽象实例方法、类方法、默认方法或私有方法）、内部类（包括内部接口、枚举）定义。</p>
<p>从某种程度上来看，接口类似于整个系统的”总纲”，它制定了系统各模块应该遵循的标准，因此一个系统中的接口不应该经常改变。一旦接口被改变，对整个系统甚至其他系统的影响将是辐射式的，导致系统中大部分类都需要改写。 <br>抽象类则不一样，抽象类作为系统中多个子类的共同父类，它所体现的是一种模板式设计。抽象类作为多个子类的抽象父类，可以被当成系统实现过程中的中间产品，这个中间产品已经实现了系统的部分功能（那些已经提供实现的方法），但这个产品依然不能当成最终产品，必须有更进一步的完善，这种完善可能有几种不同方式。<br> 除此之外，接口和抽象类在用法上也存在如下差别。</p>
<p>接口和抽象类很像，它们都具有如下特征。</p>
<ul>
<li><p>接口和抽象类都不能被实例化，它们都位于继承树的顶端，用于被其他类实现和继承。</p>
</li>
<li><p>接口和抽象类都可以包含抽象方法，实现接口或继承抽象类的普通子类都必须实现这些抽象方法。</p>
</li>
<li><p>接口里只能包含抽象方法、静态方法、默认方法和私有方法，不能为普通方法提供方法实现; 抽象类则完全可以包含普通方法。</p>
</li>
<li><p>接口里只能定义静态常量，不能定义普通成员变量;抽象类里则既可以定义普通成员变量，也 可以定义静态常量。</p>
</li>
<li><p>接口里不包含构造器; 抽象类里可以包含构造器，抽象类里的构造器并不是用于创建对象，而 是让其子类调用这些构造器来完成属于抽象类的初始化操作。</p>
</li>
<li><p>接口里不能包含初始化块; 但抽象类则完全可以包含初始化块。</p>
</li>
<li><p>一个类最多只能有一个直接父类，包括抽象类;但一个类可以直接实现多个接口，通过实现多 个接口可以弥补Java 单继承的不足。</p>
</li>
</ul>
<h3 id="接口和抽象类的区别2"><a href="#接口和抽象类的区别2" class="headerlink" title="接口和抽象类的区别2"></a>接口和抽象类的区别2</h3><p>编译时类型由声明该变量时的类型决定，运行时类型由赋值给该变量的对象类型决定，在继承关系中，当编译时类型和运行时类型不一致时，子类重写父类方法，编译时类型调用相同方法时，总是表现出子类方法的特性，此时就产生了多态（父类引用指向子类对象）<br><strong>注意</strong><br>多态发生在继承关系当中<br>对象的实例变量不具备多态性<br>抽象类和接口的区别：<br>相同：<br>（1）抽象类和接口都不能被实例化，他们位于继承树的顶端。<br>（2）抽象类和接口都可以包含抽象方法，实现接口或继承抽象类的普通类必须实现这些抽象方法。<br>不同：</p>
<p>（1）抽象类包含类变量，实例变量，方法( 普通方法，抽象方法，默认方法，静态方法，私有方法 )，构造方法，初始化块、内部类（接口，枚举）。接口只能包含静态常量，抽象方法，默认方法(JAVA 8)，私有方法(JAVA 9)，类方法，内部类（接口，枚举）。<br>（2）接口不含初始化块和构造方法，抽象类包含，但是抽象类的构造器不是用来创建对象的，而是用来被普通子类调用来初始化抽象类。<br>（3）在Java中，抽象类本质上也是一个类，所以抽象类是单继承的，一个类只能有一个直接父类，为了弥补java单继承的不足，接口与接口之间可以进行多继承，一个类可以实现多个接口，一个接口可以继承多个接口,接口只能继承接口。</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>在类内部定义的类就叫做内部类，包含内部类的类也被叫做外部类或者宿主类，Java从JDK1.1 开始引入了内部类，目的是为Java提供了更好的封装。内部类具有以下作用：</p>
<ul>
<li>内部类隐藏在外部类中，不允许同一个包中的其他类访问</li>
<li>内部类成员可以直接访问外部类的私有数据，内部类被当成其外部类成员，同一个类的成员之间可以相互访问。但外部类不能访问内部类的实现细节，例如内部类的成员变量。</li>
</ul>
<p>从语法角度来看，定义内部类与定义外部类的语法大致相同，内部类除了需要定义在外部类内之外，还有以下两点区别：</p>
<ol>
<li>内部类比外部类多三个修饰符：private、protected、static</li>
<li>非静态内部不能拥有静态成员</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span>&#123;  </span><br><span class="line">     <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;  </span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> i;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>对于java类加载顺序我们知道，首先加载类，执行static变量初始化，接下来执行对象的创建，如果我们要执行代码中的变量i初始化，</p>
<p>那么必须先执行加载OuterClass，再加载Innerclass，最后初始化静态变量i，问题就出在加载Innerclass上面，我们可以把InnerClass看成OuterClass的非静态成员，<strong>它的初始化必须在外部类对象创建后以后进行，要加载InnerClass必须在实例化OuterClass之后完成</strong> ，java虚拟机要求所有的静态变量必须在对象创建之前完成，这样便产生了矛盾。</p>
<p>非静态内部类的创建、访问都需要有一个外部类的实例，通过外部类的实例才能访问到内部类。从底层的角度来说，外部类的实例持有指向内部类的指针，只有通过外部类实例才能访问到内部类的数据。 那么，为什么非静态内部类不能有静态的成员呢！ 首先从内存分配角度来说，众所周知，静态成员是在类加载时候分配内存空间的；但对于内部类来说，要访问它的成员，就要有一个外部类实例，但是在加载类的时候不可能实例化一个外部类给内部类的，因此，没有任何外部类的实例持有这个静态成员的指针，内部类的静态成员是无法访问到的，所以Java不允许有非静态内部类的静态成员。</p>
<h3 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h3><p>定义内部类并没有什么特殊之处，只需要把一个类定义在另一个类内部即可。下面通过示例来定义内部类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.inner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的示例可以看出，内部类位于外部类的大括号中，如果位于外部类的大括号以外，则不能叫做内部类，只是源文件中定义了两个Java类而已（一个源文件中只能有一个public修饰的类，并且类名要和文件名相同）。<br>内部类可以看做类的成员，成员内部类又分为静态内部类和非静态内部类，成员内部类和成员变量、成员方法、初始化块等一样，都是类的成员。下面，通过示例继续学习非静态内部类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.inner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Outer</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.number = number;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义非静态内部类</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">		<span class="keyword">private</span> String name;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">		<span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">			<span class="built_in">super</span>();</span><br><span class="line">			<span class="built_in">this</span>.name = name;</span><br><span class="line">			<span class="built_in">this</span>.age = age;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="comment">//内部类中可访问外部类的私有成员</span></span><br><span class="line">			System.out.println(<span class="string">&quot;Outer number:&quot;</span>+number);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> cn.bytecollege.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bytecollege.inner.Outer.Inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//创建内部类对象</span></span><br><span class="line">		<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>(<span class="number">100</span>).<span class="keyword">new</span> <span class="title class_">Inner</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		</span><br><span class="line">		inner.test();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上例38行创建了内部类对象，因为非静态内部类和实例变量一样，都依赖于对象存在，因此必须先创建外部类以后才能继续创建内部类。并且我们在内部类实例方法中访问了外部类的私有成员变量。创建完内部类对象后调用方法和普通类的对象调用方法并没有什么区别。<br>需要注意的是：非静态内部类的成员可以访问外部类的 private 成员，但反过来就不成立了。非静态内部类的成员在非静态内部类范围内是可知的，并不能被外部类直接使用。如果外部类需要访问内部类的成员，则必须显式创建非静态内部类对象来调用访问其实例成员。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.inner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer2</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Outer2</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.number = number;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//外部类中访问内部类成员</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//编译出错，因为外部类不能直接访问内部类成员</span></span><br><span class="line"><span class="comment">//		System.out.println(name);</span></span><br><span class="line">		<span class="comment">//外部类访问内部类成员时需要先创建对象</span></span><br><span class="line">		<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		System.out.println(inner.age);</span><br><span class="line">		System.out.println(inner.name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义非静态内部类</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">		<span class="keyword">private</span> String name;</span><br><span class="line">		<span class="type">int</span> age;</span><br><span class="line">		<span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">			<span class="built_in">super</span>();</span><br><span class="line">			<span class="built_in">this</span>.name = name;</span><br><span class="line">			<span class="built_in">this</span>.age = age;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="comment">//内部类中可访问外部类的私有成员</span></span><br><span class="line">			System.out.println(<span class="string">&quot;Outer number:&quot;</span>+number);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例中，代码15行在外部类成员方法中访问了内部类的成员，发现编译出错，因为外部类不能直接访问内部类的属性。<br>另外需要注意的是：非静态内部类里不能有静态方法、静态成员变量、静态初始化块，但是可以包含初始化块。</p>
<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>当内部类被static修饰后，就成为了静态内部类，和类变量、类方法、静态代码块一样具有同等的地位。static 关键字的作用是把类的成员变成类相关，而不是实例相关，即 static 修饰的成员属于整个类，而不属于单个对象。</p>
<p>静态内部类可以包含静态成员，也可以包含非静态成员。根据静态成员不能访问非静态成员的规则，静态内部类不能访问外部类的实例成员，只能访问外部类的类成员。即使是静态内部类的实例方法也不能访问外部类的实例成员，只能访问外部类的静态成员。下面我们通过示例来验证这条结论</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer3</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="comment">//访问外部类类成员</span></span><br><span class="line">			System.out.println(number);</span><br><span class="line">			<span class="comment">//编译出错，静态内部类不能访问外部类的实例变量</span></span><br><span class="line"><span class="comment">//			System.out.println(count);</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上例14行可以看出静态内部类只能访问外部类的静态成员，不能访问实例成员。<br>那么静态内部类又该如何创建对象呢，下面通过示例来学习：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bytecollege.inner.Outer3.Inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer3</span>.Inner();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>如果把一个内部类放在方法里定义，则这个内部类就是一个局部内部类，局部内部类仅在该方法里有效。由于局部内部类不能在外部类的方法以外的地方使用，因此局部内部类也不能使用访问控制符和 static 修饰符修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartInner</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 定义局部内部类</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类在Java web开发中使用的比较少，但是在Android开发中经常使用，匿名内部类的定义语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 实现接口() | 父类构造器(参数列表)&#123;</span><br><span class="line"> <span class="comment">//内部类实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面定义可以看出，匿名内部类必须继承一个父类，或实现一个接口，但最多只能继承一个父类，或实现一个接口。 关于匿名内部类还有如下两条规则。</p>
<ul>
<li>匿名内部类不能是抽象类，因为系统在创建匿名内部类时，会立即创建匿名内部类的对象。因 此不允许将匿名内部类定义成抽象类。</li>
<li>匿名内部类不能定义构造器。由于匿名内部类没有类名，所以无法定义构造器，但匿名内部类 可以定义初始化块，可以通过实例初始化块来完成构造器需要完成的事情。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(IStandard standard)</span> &#123;</span><br><span class="line">		System.out.println(standard.getCount());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">AnonDemo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnonDemo</span>();</span><br><span class="line">		<span class="comment">//调用test方法时，需要传入一个IStandard的子类对象</span></span><br><span class="line">		<span class="comment">//传入一个匿名内部类</span></span><br><span class="line">		demo.test(<span class="keyword">new</span> <span class="title class_">IStandard</span>() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在示例中，AnonDemo中定义了方法test()，这个方法的参数是一个接口。因为接口不能被实例化，所以不能直接创建对象，因此创建了一个实现类的对象传入了方法。并且从示例中可以发现定义匿名内部类不需要关键字class，在定义匿名内部类时直接生成该匿名内部类的对象。<br>如果把接口更换成抽象类，定义匿名内部类的方法和上例相同，只是创建的类变成了抽象类的子类对象，并且内部类也要重新抽象类中定义的抽象方法。</p>
<h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><p>在特定情况下，一个类的对象是有限且固定的，例如季节、星期、性别等，这种实例有限且固定的类，Java中称为枚举类。<br>在引入枚举之前，这种情况一般使用常量代替。但是这么做有一定的缺陷，例如输入性别时，一般只输出1或者2很难去猜测其代表的含义，因此也降低了代码的可读性。<br>Java5新增了一个enum关键字，用于定义枚举类（枚举也可以看做是一个特殊的类）。枚举同样可以拥有自己的成员变量和方法，也可是实现一个或者多个接口，也可以定义自己的构造方法。和定义类一样，一个枚举源文件中最多只能定义一个public访问权限的枚举类，并且该源文件名称也必须和枚举类相同。<br>枚举类和普通类存在以下差异：</p>
<ol>
<li>枚举类可以实现一个或多个接口，使用 enum 定义的枚举类默认继承了java.lang.Enum 类，而不是默认继承 Object 类，因此枚举类不能显式继承其他父类。其中 java.lang.Enum 类实现. java.lang.Serializable 和 java.lang. Comparable 两个接口。</li>
<li>使用 enum 定义、非抽象的枚举类默认会使用 final 修饰，因此枚举类不能派生子类。</li>
<li>枚举类的构造器只能使用 private 访问控制符， 如果省略了构造器的访问控制符。则默认使用 private 修饰; 如果强制指定访问控制符，则只能指定 private 修饰符。</li>
<li>枚举类的所有实例必须在枚举类的第一行显式列出，否则这个枚举类永远都不能产生实例。列出这些实例时，系统会自动添加 public static final 修饰，无须程序员显式添加。</li>
</ol>
<h3 id="定义枚举类"><a href="#定义枚举类" class="headerlink" title="定义枚举类"></a>定义枚举类</h3><p>下面，我们定义一个简单的性别枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义性别枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">	MALE,FEMALE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义枚举类时，需要显式列出所有的枚举值。所有的枚举值之间用“,”隔开。枚举值结束后用英文分号作为结束。<br>在第3章switch一节中知道switch支持了枚举类型，下面通过示例学习枚举在switch中的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> (Gender.FEMALE) &#123;</span><br><span class="line">		<span class="keyword">case</span> FEMALE:</span><br><span class="line">			System.out.println(<span class="string">&quot;女性&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> MALE:</span><br><span class="line">			System.out.println(<span class="string">&quot;男性&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例测试了枚举的的基本用法以及在switch分支结构中的使用。<br>因为枚举都继承了java.lang.Enum类，所以枚举类可以使用Enum类中的方法，下面介绍3个重要的方法：</p>
<ul>
<li>String name()∶ 返回此枚举实例的名称，这个名称就是定义枚举类时列出的所有枚举值之一。与 此方法相比，大多数程序员应该优先考虑使用 toString（O方法，因为 toStringO）方法返回更加用户友好的名称。</li>
<li>int ordinal()∶返回枚举值在枚举类中的索引值（就是枚举值在枚举声明中的位置，第一个枚举 值的索引值为零）。</li>
<li>String toString()∶返回枚举常量的名称，与name 方法相似，但 toStringO方法更常用。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package cn.bytecollege;</span><br><span class="line"></span><br><span class="line">public class EnumDemo &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		//枚举类的Values()方法返回该枚举的所有实例</span><br><span class="line">		for (Gender g : Gender.values()) &#123;</span><br><span class="line">			System.out.println(g);</span><br><span class="line">			System.out.println(g.toString());</span><br><span class="line">			System.out.println(g.ordinal());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当程序打印枚举值时，实际上输出的是该枚举值的 toString()方法，也就是输出该枚举值的名字。</p>
<h3 id="枚举类的构造方法"><a href="#枚举类的构造方法" class="headerlink" title="枚举类的构造方法"></a>枚举类的构造方法</h3><p>枚举类也是一种类，只是它是一种比较特殊的类，因此它一样可以定义成员变量、方法和构造器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义性别枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">	MALE,FEMALE;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，在枚举中定义构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义性别枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">	MALE(<span class="string">&quot;男&quot;</span>),FEMALE(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Gender</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面程序中可以看出，当为Gender 枚举类创建了一个Gender（String name）构造器之后，列出枚举值就应该采用粗体字代码来完成。也就是说，在枚举类中列出枚举值时，实际上就是调用构造器创建枚举类对象，只是这里无须使用 new 关键字，也无需显式调用构造器。前面列出枚举值时无需传入参数，甚至无需使用括号，仅仅是因为前面的枚举类包含无参数的构造器。</p>
<h3 id="枚举中的抽象方法"><a href="#枚举中的抽象方法" class="headerlink" title="枚举中的抽象方法"></a>枚举中的抽象方法</h3><p>假设有一个 Operation 枚举类，它的 4个枚举值 PLUS，MINUS，TIMES，DIVIDE 分别代表加、减、乘、除 4 种运算，该枚举类需要定义一个eval（）方法来完成计算。 从上面描述可以看出，Operation 需要让PLUS、MINUS、TIMES、DIVIDE 四个值对 evalO方法各有不同的实现。此时可考虑为 Operation 枚举类定义一个eval()抽象方法，然后让4个枚举值分别为eval()提供不同的实现。例如如下代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">	PLUS</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">eval</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> a+b;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	MINUS</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">eval</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> a-b;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	TIMES</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">eval</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> a*b;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	DIVDE&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">eval</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> a/b;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//定义抽象方法，为不同的枚举值提供实现</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">eval</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(Operation.PLUS.eval(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">		System.out.println(Operation.MINUS.eval(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">		System.out.println(Operation.TIMES.eval(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">		System.out.println(Operation.DIVDE.eval(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：枚举类里定义抽象方法时不能使用 abstract 关键字将枚举类定义成抽象类（因为系统自动会为它添加 abstract 关铰字），但因为枚举类需要显式创建枚举值，而不是作为父类，所以定义每个枚举值时必须为抽象方法提供实现，否则将出现编译错误。</p>
]]></content>
  </entry>
  <entry>
    <title>Java-String和常用类</title>
    <url>/2022/07/27/Java-String%E5%92%8C%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="String和常用类"><a href="#String和常用类" class="headerlink" title="String和常用类"></a>String和常用类</h1><p>Java为开发者提供了丰富的类库，例如字符串、数学计算、日期处理等等，完全可以满足日常开发的需要</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在Java中字符串就是连续的字符序列，Java提供了String，StringBuilder、StringBuffer 3个类来封装字符串，在日常开发时，有很大一部分操作就是在操作字符串。例如：在web开发中对前端页面提交的数据进行验证、过滤特殊字符、检测敏感字符等等。因此Java为开发者提供了大量的API，并且也出现了一系列帮助开发者操作数据库的第三方工具库，如国内开发者开发的hutool、和Google提供的Guava。</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String类是一个不可变类，不可变类即类中的成员变量都使用final修饰，这也就说明一个String对象被创建以后，包含在这里对象中的字符序列是不可改变的，直到整个对象被销毁。并且在Java中所有字符串相关的类都是Charsquence接口的子类。<br>String类提供了大量的构造方法来创建String对象，先来看以下几个：</p>
<ul>
<li>String()：创建一个包含0个字符的String对象</li>
<li>String(byte[] bytes,Charset charset)：使用指定的字符集将指定的byte[]解码成一个新的String对象</li>
<li>String(String original)：根据字符串字面量来创建String对象。</li>
<li>String(StringBuffer buffer)：根据StringBuffer对象来创建String</li>
<li>String(StringBuilder builder)：根据StringBuilder来创建对应的String对象。</li>
</ul>
<p>下面，通过示例来学习以上构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//创建一个字符序列为空的字符串</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">		<span class="comment">//使用指定的字符集将指定的byte[]解码成一个新的String对象</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;天苍苍，野茫茫&quot;</span>;</span><br><span class="line">		System.out.println(Charset.defaultCharset());</span><br><span class="line">		<span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(s.getBytes(),Charset.defaultCharset());</span><br><span class="line">		System.out.println(str2);</span><br><span class="line">		<span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">		System.out.println(str3);</span><br><span class="line">		<span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;张三丰&quot;</span>));</span><br><span class="line">		System.out.println(str4);</span><br><span class="line">		<span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;张无忌&quot;</span>));</span><br><span class="line">		System.out.println(str5);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了以上创建字符串的方式，还可以通过字面量的方式创建字符串对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String s = &quot;金毛狮王&quot;;</span><br></pre></td></tr></table></figure>

<p>除此之外，String还提供了诸多API用来操作字符串。</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>equals(String string)</td>
<td>判断两个字符串是否相等</td>
</tr>
<tr>
<td>equalsIgnoreCase(String string)</td>
<td>忽略大小写判断两个字符串是否相等</td>
</tr>
<tr>
<td>length()</td>
<td>获取字符串长度</td>
</tr>
<tr>
<td>charAt(int index)</td>
<td>获取某个索引处的字符</td>
</tr>
<tr>
<td>indexOf(String string)</td>
<td>获取字符串第一次出现的位置</td>
</tr>
<tr>
<td>indexOf(String string,int startIndex)</td>
<td>从startIndex处查找第一次出现的位置</td>
</tr>
<tr>
<td>lastIndexOf(String string)</td>
<td>字符串最后一次出现的位置</td>
</tr>
<tr>
<td>startsWith(String string)</td>
<td>判断是否以string开始</td>
</tr>
<tr>
<td>endsWith(String string)</td>
<td>判断是否以string结尾</td>
</tr>
<tr>
<td>compareTo(String string)</td>
<td>比较字符串大小</td>
</tr>
<tr>
<td>toLowerCase()</td>
<td>字符串转小写</td>
</tr>
<tr>
<td>toUpperCase()</td>
<td>字符串转大写</td>
</tr>
<tr>
<td>subString(int index)</td>
<td>从index位置处截取到字符串末尾</td>
</tr>
<tr>
<td>subString(int startIndex,int endIndex)</td>
<td>从startIndex位置开始，到endIndex结束，前闭后开</td>
</tr>
<tr>
<td>trim()</td>
<td>去除字符串首尾空格</td>
</tr>
<tr>
<td>split(String string)</td>
<td>以string对字符串进行分割，此方法会省略末尾空字符</td>
</tr>
<tr>
<td>split(String string,int limit)</td>
<td>对字符串进行分割，此方法不会省略末尾空字符</td>
</tr>
<tr>
<td>join(String s,String…str)</td>
<td>以s为连接符，连接str内字符串</td>
</tr>
<tr>
<td>concat(String str)</td>
<td>连接字符串</td>
</tr>
<tr>
<td>valueOf()</td>
<td>基本类型转字符串</td>
</tr>
<tr>
<td>contains(String str)</td>
<td>判断是否包含str</td>
</tr>
<tr>
<td>toCharArray()</td>
<td>将字符串转换成字符数组</td>
</tr>
<tr>
<td>intern()</td>
<td>判断字符串在常量池中是否存在，如果不存在，则复制，1.6是将实例复制，1.7及以后是将引用复制。</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>判断字符串是否为空</td>
</tr>
<tr>
<td>stripLeading()</td>
<td>去除字符串首部的空格（since11）</td>
</tr>
<tr>
<td>stripTrailing()</td>
<td>去除字符串尾部的空格（since11）</td>
</tr>
<tr>
<td>isBlank()</td>
<td>判断字符串是否为空及是否全是空格</td>
</tr>
<tr>
<td>repeate(int count)</td>
<td>重复字符串若干次（since11）</td>
</tr>
</tbody></table>
<p>下面，通过示例学习String的常用API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示String常用API</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//判断两个字符串相等</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">		System.out.println(a.equals(b));</span><br><span class="line">		<span class="comment">//忽略大小写判断两个字符串是否相等</span></span><br><span class="line">		System.out.println(a.equalsIgnoreCase(c));</span><br><span class="line">		<span class="comment">//获取字符串长度</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">		System.out.println(d.length());</span><br><span class="line">		<span class="comment">//获取索引处的字符,方法参数在0-字符串长度-1之间</span></span><br><span class="line">		System.out.println(d.charAt(<span class="number">0</span>));	</span><br><span class="line">		<span class="comment">//从头开始查找获取字符串第一次出现的位置</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> d.indexOf(<span class="string">&quot;lo&quot;</span>);</span><br><span class="line">		System.out.println(index);</span><br><span class="line">		<span class="comment">//从某个位置处查找获取字符串第一次出现的位置</span></span><br><span class="line">		System.out.println(d.indexOf(<span class="string">&quot;o&quot;</span>,<span class="number">7</span>));</span><br><span class="line">		<span class="comment">//查找字符串最后一次出现的位置</span></span><br><span class="line">		System.out.println(d.lastIndexOf(<span class="string">&quot;o&quot;</span>));</span><br><span class="line">		<span class="comment">//判断字符串是否是以某个字符串开始</span></span><br><span class="line">		System.out.println(d.startsWith(<span class="string">&quot;He&quot;</span>));</span><br><span class="line">		<span class="comment">//判断字符串是否以某个字符串结束</span></span><br><span class="line">		System.out.println(d.endsWith(<span class="string">&quot;lo&quot;</span>));</span><br><span class="line">		<span class="comment">//比较两个字符串大小,如果两个字符串相等则返回0</span></span><br><span class="line">		<span class="comment">//如果字符串中的字符相等，但是长度不相等则返回长度差值</span></span><br><span class="line">		<span class="comment">//如果字符不相等则返回字符差值</span></span><br><span class="line">		System.out.println(a.compareTo(b));</span><br><span class="line">		<span class="comment">//字符串转大小</span></span><br><span class="line">		System.out.println(a.toUpperCase());</span><br><span class="line">		<span class="comment">//字符串转小写</span></span><br><span class="line">		System.out.println(a.toLowerCase());</span><br><span class="line">		<span class="comment">//截取字符串，从传入位置截取到字符串末尾</span></span><br><span class="line"><span class="comment">//		System.out.println(a.substring(2));</span></span><br><span class="line">		<span class="comment">//截取字符串，从传入位置截取到第二个参数处，前闭后开</span></span><br><span class="line"><span class="comment">//		System.out.println(a.substring(1,2));</span></span><br><span class="line">		<span class="comment">//去除字符串首尾空格</span></span><br><span class="line">		System.out.println(<span class="string">&quot;   Hello   &quot;</span>.trim());</span><br><span class="line">		<span class="comment">//分割字符串,默认会省略末尾的空</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello,World&quot;</span>;</span><br><span class="line">		String[] strs = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//分割字符串，第二个参数传入负值，则不省略末尾的空</span></span><br><span class="line">		strs = s.split(<span class="string">&quot;,&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">		<span class="comment">//连接字符串</span></span><br><span class="line">		System.out.println(a.concat(b));</span><br><span class="line">		<span class="comment">//将基本类型转成字符串</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">		System.out.println(String.valueOf(k));</span><br><span class="line">		<span class="comment">//判断是否包含某个字符串</span></span><br><span class="line">		System.out.println(a.contains(<span class="string">&quot;@&quot;</span>));</span><br><span class="line">		<span class="comment">//将字符串转换成数组</span></span><br><span class="line">		<span class="type">char</span>[] cs = a.toCharArray();</span><br><span class="line">		<span class="comment">//判断字符串是否为空</span></span><br><span class="line">		System.out.println(a.isEmpty());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的实例中演示了字符串的常用API，因为String是一个不可变类，因此要大量操作字符串时，并不建议使用String对象，而应该使用下一小节中的StringBuilder和StringBuffer</p>
<h3 id="StringBuilder和StringBuffer"><a href="#StringBuilder和StringBuffer" class="headerlink" title="StringBuilder和StringBuffer"></a>StringBuilder和StringBuffer</h3><p>StringBuffer和StringBuilder通常也用于操作字符串，但是StringBuffer和StringBuilder中的字符数组不是用final修饰的，所有字符数组可以指向新的数组，也就是说用这两个类创建的字符串对象是可变的，StringBuffer和StringBuilder为开发者提供了以下几个方法。用于操作字符串：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>append(String str)</td>
<td>字符串末尾追加字符串</td>
</tr>
<tr>
<td>delete(int start, int end)</td>
<td>删除区间内字符</td>
</tr>
<tr>
<td>deleteCharAt(int index)</td>
<td>删除索引处字符</td>
</tr>
<tr>
<td>replace(int start, int end, String str)</td>
<td>替换区间内的字符</td>
</tr>
<tr>
<td>substring(int start)</td>
<td>从start处截取到末尾</td>
</tr>
<tr>
<td>substring(int start, int end)</td>
<td>从start处截取到end</td>
</tr>
<tr>
<td>insert(int offset, String str)</td>
<td>索引处插入字符串</td>
</tr>
<tr>
<td>indexOf(String str)</td>
<td>字符串str第一次出现的位置</td>
</tr>
<tr>
<td>reverse()</td>
<td>字符序列反转</td>
</tr>
<tr>
<td>toString()</td>
<td>对象转成字符串</td>
</tr>
</tbody></table>
<p>因为StringBuffer和StringBuilder提供的方法都一样，所以方法都是通用的，下面通过示例学习<br>首先，StringBuilder提供了一下几个构造方法：</p>
<ul>
<li>StringBuilder StringBuilder()：创建一个空的StringBuilder对象，一个空的字符序列</li>
<li>StringBuilder StringBuilder(StringBuilder builder)：传入StringBuilder对象创建字符序列</li>
<li>StringBuilder StringBuilder(String str)：根据字符串创建字符序列</li>
<li>StringBuilder(int capcity)：指定容量的StringBuilder对象</li>
</ul>
<p>下面通过示例学习StringBuilder的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示StringBuilder常用API</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">		<span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(a);</span><br><span class="line">		<span class="comment">//字符序列后追加字符串</span></span><br><span class="line">		System.out.println(sb.append(<span class="string">&quot;World&quot;</span>).toString());</span><br><span class="line">		<span class="comment">//删除区间内的字符</span></span><br><span class="line">		System.out.println(sb.delete(<span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">		<span class="comment">//删除某个索引处的字符</span></span><br><span class="line">		System.out.println(sb.deleteCharAt(<span class="number">5</span>));</span><br><span class="line">		<span class="comment">//替换区间内的字符</span></span><br><span class="line">		System.out.println(sb.replace(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;W&quot;</span>));</span><br><span class="line">		<span class="comment">//索引处插入字符串</span></span><br><span class="line">		System.out.println(sb.insert(<span class="number">0</span>, <span class="string">&quot;false&quot;</span>));</span><br><span class="line">		<span class="comment">//反转字符串</span></span><br><span class="line">		System.out.println(sb.reverse());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java对String的优化"><a href="#Java对String的优化" class="headerlink" title="Java对String的优化"></a>Java对String的优化</h3><p>Java在底层对String进行了优化，节省了一定的内存空间，在前面的章节中可以看到，通过字面量的形式创建String对象，所谓字面量（也叫做直接量），就是在定义变量后直接给定的值。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//下面的代码中10就是一个字面量</span><br><span class="line">int a = 10;</span><br><span class="line">//下面的代码中5.2就是字面量</span><br><span class="line">double b = 5.2;</span><br><span class="line">//字符串对象直接给的值也是字面量</span><br><span class="line">String s = &quot;张三&quot;;</span><br></pre></td></tr></table></figure>

<p>因为String是一个不可变类，也就是说一旦定义好一个字符串后，字符串的值是不能被改变了，如果发生了改变一定是指向了一个新的对象。那么这样的话无疑会占用大量的内存空间。因此Java对String进行了一定的优化，在JVM中有一块区域叫做常量池，常量池里放着字符串的字面量和常量。当字面量出现一个字符串后，Java会将该字面量放入常量池，如果再有变量引用该字符串时，直接返回常量池中字符串的引用，而不创建对象。通过下面的示例可以验证以上结论：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String a = &quot;张三&quot;;</span><br><span class="line">String b = &quot;张三&quot;;</span><br><span class="line">//返回结果为true</span><br><span class="line">System.out.print(a==b);</span><br></pre></td></tr></table></figure>

<p>在前面的章节中知道，两个对象用“&#x3D;&#x3D;”判断相等时，如果返回true，则这两个变量一定指向了相同的对象。从上面的结果可以看出变量a和变量b指向了同一个对象。总结一下就是<strong>常量池中的字符串有且只有一个，一旦创建后如果出现相同的字符串则直接返回字符串对象的引用，而不创建新的字符串。</strong><br>下面深入学习Java对字符串的优化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String a = &quot;张三&quot;;</span><br><span class="line">String b = new String(&quot;张三&quot;);</span><br><span class="line">//返回结果为false</span><br><span class="line">System.out.print(a==b);</span><br><span class="line">//返回结果为true</span><br><span class="line">System.out.print(a.equals(b));</span><br></pre></td></tr></table></figure>

<p>上面的结果可能会很疑惑，我们对上例中的代码逐行分析：当代码执行到第1行时，此时出现了字面量“张三”。因为已经将该对象放入常量池，因此，运行时直接该对象的引用保存在a中。<br>代码第2行，又出现了“张三”，此时常量池已经有了这个对象，此时就不再创建，此时先返回该对象的引用，返回该引用后，又new了一个String对象，此时在堆中分配了一块内存区域，这块内存中保存这刚才返回的引用。然后将堆中的引用保存在b中，因为a指向了常量池，变量b指向了堆中，所以a和b中保存的引用不同，所以用&#x3D;&#x3D;判断时返回false，但是两个对象的内容相等。所以使用equals时两个变量的内容相等。<br>继续看下面的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String a = &quot;HelloWorld&quot;;</span><br><span class="line">String d = &quot;Hello&quot;+&quot;World&quot;;</span><br><span class="line">//返回true</span><br><span class="line">System.out.print(a==d);</span><br><span class="line">//返回true</span><br><span class="line">System.out.print(a.equals(d));</span><br></pre></td></tr></table></figure>

<p>运行上面的示例，可以看到结果都为true，这又是为什么呢？这也是Java对字符串的一项优化，也就是说在编译期间就可以确定变量d的结果为“HelloWorld”,而在确定变量d的结果之前，变量a的值已经放入了常量池，此时不再创建对象，直接返回引用，因此就有了上例中的结果。<br>上面的示例可以看出字面量和字面量拼接结果是确定的，那么字面量和变量拼接，变量和变量拼接又会出现什么结果呢，针对上述的问题，JVM还对String做了优化，看下面的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String a = &quot;HelloWorld&quot;;</span><br><span class="line">String b = new String(&quot;Hello&quot;);</span><br><span class="line">String c = new String(&quot;World&quot;);</span><br><span class="line">String d = b+c;</span><br><span class="line">//返回false</span><br><span class="line">System.out.print(a==d);</span><br><span class="line">//返回true</span><br><span class="line">System.out.print(a.equals(d));</span><br><span class="line">String e = &quot;Hello&quot;;</span><br><span class="line">String f = e + c;</span><br><span class="line">//返回false</span><br><span class="line">System.out.print(a==f);</span><br><span class="line">//返回true</span><br><span class="line">System.out.print(a.equals(f));</span><br></pre></td></tr></table></figure>

<p>因为变量d是两个堆中的对象拼接，此时java会用StringBuilder对两个对象拼接，也就是说在堆中新创建一个对象，保存拼接后的字符串，并将引用返回给d保存，因为不是执行同一块内存，所有a中的地址和d中的地址不相同，所以返回false，两个对象的内容相同，所以使用equals方法时返回true，下面的代码也是一样，java会使用StringBuilder对两个对象进行拼接，所以返回的地址不同。</p>
<h3 id="String和StringBuffer以及StringBuilder的区别"><a href="#String和StringBuffer以及StringBuilder的区别" class="headerlink" title="String和StringBuffer以及StringBuilder的区别"></a>String和StringBuffer以及StringBuilder的区别</h3><p>根据本小节的内容，三者的区别可以归纳如下：</p>
<ol>
<li>String、StringBuffer、StringBuilder都是Charsquence接口的子类</li>
<li>String、StringBuffer、StringBuilder都是final修饰的，不能被继承，也就是说三者都没有子类</li>
<li>String是不可变类，创建的字符串序列不能被修改，StringBuffer和StringBuilder是可以修改的</li>
<li>StringBuffer是线程安全的，StringBuilder是非线程安全的，因此StringBuilder效率更高，在不考虑线程安全或者单线程情况下优先考虑使用StringBuilder。</li>
</ol>
<h2 id="Scanner获取键盘输入"><a href="#Scanner获取键盘输入" class="headerlink" title="Scanner获取键盘输入"></a>Scanner获取键盘输入</h2><p>在前面的章节中，我们反复遇到Scanner对象，并使用其方法接受从键盘输入的数据。Scanner可以从文件、输入流、字符串中解析处基本类型和字符串值，Scanner提供了多个构造器，可以分别接收文件、输入流、字符串作为数据源，并从中解析数据。Scanner主要提供以下方法来扫描输入。</p>
<ul>
<li>hasNextXXX()：是否还有下个输入项，其中XXX可以是Int，Long等代表基本类型的字符串。如果判断是否有 下一个字符串则直接使用hasNext()。</li>
<li>nextXxx()：获取下个输入项，输入项可以是基本类型数据，如果是字符串则直接使用next()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">		<span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">			System.out.println(k);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h2><p>Java提供了System类和Runtime类来获取平台相关属性和运行平台进行交互。</p>
<h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><p>System类代表当前运行Java程序的平台。System为开发者提供了获取系统环境变量，系统属性等方法。下面通过示例来使用System类访问操作系统的环境变量和系统属性。</p>
<ul>
<li>Map&lt;String,String&gt; getenv()：获取系统所有的环境变量，保存在map集合中。</li>
<li>String getenv(String name)：获取指定的环境变量</li>
<li>Properties getProperties()：获取系统的属性。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取所有的环境变量</span></span><br><span class="line">		Map&lt;String,String&gt; map = System.getenv();</span><br><span class="line">		<span class="comment">//遍历map</span></span><br><span class="line">		<span class="keyword">for</span>(String s : map.keySet()) &#123;</span><br><span class="line">			System.out.println(s+<span class="string">&quot;======&quot;</span>+map.get(s));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//获取指定名称的环境变量值,如果环境变量的名称不存在则返回null</span></span><br><span class="line">		System.out.println(System.getenv(<span class="string">&quot;JAVA_HOME&quot;</span>));</span><br><span class="line">		<span class="comment">//获取系统参数</span></span><br><span class="line">		<span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line">		</span><br><span class="line">		Set&lt;Entry&lt;Object, Object&gt;&gt; entry =  properties.entrySet();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (Entry&lt;Object, Object&gt; e : entry) &#123;</span><br><span class="line">			System.out.println(e.getKey()+<span class="string">&quot;=============&quot;</span>+e.getValue());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例中使用了Map和Properties容器，在此处只为获取保存在其中的数据，详细内容讲在后续章节学习，此处不做深究。<br>除此以外，System还提供了两个使用频率比较高的方法：</p>
<ul>
<li>long currentTimeMillis()：获取当前时间的毫秒数，返回当前时间与UTC 1970年1月1日 00:00:00的时间差，以毫秒为单位</li>
<li>int identityHashCode(Object x)：获取指定对象的精确hashCode值，关于hashCode会在Set集合中详细讲解，此处先做了解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//获取当前时间的毫秒数</span></span><br><span class="line">		System.out.println(System.currentTimeMillis());</span><br><span class="line">		System.out.print(System.identityHashCode(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>System还提供了一个复制数组的方法：</p>
<ul>
<li>void arraycopy(Object src,  int  srcPos,  int destPos, int length)：该方法的作用是复制数组，第一个src是指被复制的数组，srcPos是指定复制的起始位置，dest则是指将元素粘贴到哪个数组，destPos是指目标数组粘贴的起始位置，length则可以理解为复制元素的个数。</li>
<li>void exit(int status)：退出虚拟机。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyArray</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = &#123;<span class="number">5</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line">		<span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="comment">//复制数组a元素粘贴的b数组</span></span><br><span class="line">		System.arraycopy(a, <span class="number">0</span>, b, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">		System.out.println(Arrays.toString(b));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h3><p>Runtime类代表Java程序的运行时环境，每个Java程序都有一个与之对应Runtime实例。可以访问JVM相关信息，处理器数量，内存信息等</p>
<ul>
<li>int availableProcessors()：获取处理器数量</li>
<li>long freeMemory()：获取jvm空闲内存</li>
<li>long totalMemory()：获取最大内存</li>
<li>long maxMemory()：获取虚拟机可以用最大内存</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">		System.out.println(<span class="string">&quot;处理器数量：&quot;</span>+runtime.availableProcessors());</span><br><span class="line">		System.out.println(<span class="string">&quot;总内寸数：&quot;</span>+runtime.totalMemory()/Math.pow(<span class="number">1024</span>,<span class="number">2</span>)+<span class="string">&quot;MB&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;JVM空闲内存：&quot;</span>+runtime.freeMemory()/Math.pow(<span class="number">1024</span>, <span class="number">2</span>)+<span class="string">&quot;MB&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;可用最大内存：&quot;</span>+runtime.maxMemory()/Math.pow(<span class="number">1024</span>, <span class="number">3</span>)+<span class="string">&quot;GB&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不同的电脑可能会出现不同的结果：</p>
<p><img src="https://files.catbox.moe/hken2g.png"></p>
<p>Runtime还提供了exec()方法，用于启动一个进程来运行操作系统的命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runtime.exec(<span class="string">&quot;notepad.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>运行示例中的代码可以打开记事本，其他命令可以自行查找。</p>
<h2 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h2><h3 id="Math工具类"><a href="#Math工具类" class="headerlink" title="Math工具类"></a>Math工具类</h3><p>Math提供了基本的加减乘除以为，还提供了一些复杂的数学运行，三角函数，对数运算等，Math类还提供了两个常量PI和E<br>Math的主要方法如下表：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Math.sqrt()</td>
<td>求平方根，参数为负数时返回NAN</td>
</tr>
<tr>
<td>Math.pow(x,a)</td>
<td>幂运算，x的a次方</td>
</tr>
<tr>
<td>Math.floor(a)</td>
<td>向下取整</td>
</tr>
<tr>
<td>Math.ceil(a)</td>
<td>向上取整</td>
</tr>
<tr>
<td>Math.floorMod(x,y)</td>
<td>求余，x%y</td>
</tr>
<tr>
<td>Math.toDegree()</td>
<td>弧度转换成角度</td>
</tr>
<tr>
<td>Math.toRadians()</td>
<td>角度转换成弧度</td>
</tr>
<tr>
<td>Math.sin()</td>
<td>求正弦</td>
</tr>
<tr>
<td>Math.cos()</td>
<td>求余弦</td>
</tr>
<tr>
<td>Math.tan()</td>
<td>求正切</td>
</tr>
<tr>
<td>Math.abs()</td>
<td>求绝对值</td>
</tr>
<tr>
<td>Math.max()</td>
<td>两个数的最大值</td>
</tr>
<tr>
<td>Math.min()</td>
<td>两个数最小值</td>
</tr>
<tr>
<td>Math.random()</td>
<td>0.0到1.0的随机数</td>
</tr>
</tbody></table>
<p>下面通过示例学习Math的 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//求平方根</span></span><br><span class="line">        System.out.println(Math.sqrt(<span class="number">4</span>));</span><br><span class="line">        <span class="comment">//幂运算，x的a次方</span></span><br><span class="line">        System.out.println(Math.pow(<span class="number">3</span>,<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//求余，x%y</span></span><br><span class="line">        System.out.println(Math.floorMod(<span class="number">10</span>,<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//求正弦</span></span><br><span class="line">        System.out.println(Math.sin(Math.PI/<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//求余弦</span></span><br><span class="line">        System.out.println(Math.cos(Math.PI));</span><br><span class="line">        <span class="comment">//求正切</span></span><br><span class="line">        System.out.println(Math.tan(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//求绝对值</span></span><br><span class="line">        System.out.println(Math.abs(-<span class="number">101</span>));</span><br><span class="line">        <span class="comment">//求两个数的最大值</span></span><br><span class="line">        System.out.println(Math.max(-<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//求两个数的最小值</span></span><br><span class="line">        System.out.println(Math.min(-<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//0.0到1.0的随机数</span></span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Random生成随机数"><a href="#Random生成随机数" class="headerlink" title="Random生成随机数"></a>Random生成随机数</h3><p>Random类用于生成一个伪随机数，Random类包含两个构造方法：</p>
<ul>
<li>Random()：以当前时间作为种子</li>
<li>Random(long seed)：需要开发者显式传入long型的种子</li>
</ul>
<p>Random有以下几个生成伪随机数的方法：</p>
<ul>
<li>nextDouble()：生成0.0—1.0之间的伪随机double数。</li>
<li>nextFloat()：生成0.0—1.0之间的伪随机float数。</li>
<li>nextInt()：生成一个 int类型取值范围内的伪随机整数</li>
<li>nextInt(int a)：生成0-a之间的伪随机整数。</li>
<li>nextLong()：生成处于long整数取值范围的伪随机整数。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示随机数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">Random</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">		System.out.println(r1.nextBoolean());</span><br><span class="line">		System.out.println(r1.nextDouble());</span><br><span class="line">		System.out.println(r1.nextFloat());</span><br><span class="line">		System.out.println(r1.nextInt());</span><br><span class="line">		System.out.println(r1.nextLong());</span><br><span class="line">		System.out.println(r1.nextInt(<span class="number">100</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="type">Random</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">100</span>);</span><br><span class="line">		<span class="type">Random</span> <span class="variable">r3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">100</span>);</span><br><span class="line">		System.out.println(r2.nextInt());</span><br><span class="line">		System.out.println(r2.nextInt());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上例的示例，产生了不同的随机数，需要注意的当种子相同时，产生的随机数是相同的。</p>
<h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><p>在学习数据类型时，其中浮点型有float和double两种，同时也了解到float和double在计算时很容易出现精度问题：<br>例如，如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0.05</span>+<span class="number">0.01</span>;</span><br><span class="line">System.out.print(s);</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/ozsins.png"><br>如果程序对运算精度要求不高，double和float完全可以满足需要，但是有些时候对浮点型精度要求比较高，例如金融项目、电商项目等。这就需要使用BigDecimal类的方法了。<br>首先，查看BigDecimal的构造方法：</p>
<ul>
<li>BigDecimal(String val)：通过字符串创建BigDecimal对象，Java推荐使用该构造方法创建对象，因为如果传入浮点型的值时，因为本身该值就不精确，因此创建的BigDecimal也会不精确，所以推荐使用字符串的形式创建对象。</li>
</ul>
<p>如果必须使用 double 浮点数作为 BigDecimal 构造器的参数时，不要直接将该 double 浮点数作为构造器参数创建 BigDecimal 对象，而是应该通过 BigDecimal.valueOf（double value）静态方法来创建 BigDecimal 对象。<br>BigDecimal类提供了add()、subtract()、multiply()、divide()、pow()等方法对精确浮点数进行常规算术运算。下面程序示范了 BigDecimal 的基本运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">BigDecimal</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.05&quot;</span>);</span><br><span class="line">		<span class="type">BigDecimal</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.01&quot;</span>);</span><br><span class="line">		<span class="comment">//加法</span></span><br><span class="line">		System.out.println(d1.add(d2));</span><br><span class="line">		<span class="comment">//减法</span></span><br><span class="line">		System.out.println(d1.subtract(d2));</span><br><span class="line">		<span class="comment">//乘法</span></span><br><span class="line">		System.out.println(d1.multiply(d2));</span><br><span class="line">		<span class="comment">//除法</span></span><br><span class="line">		System.out.println(d1.divide(d2));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：<br><img src="https://files.catbox.moe/w3yvec.png"></p>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>Java是一门面向对象的语言，但是在前面的章节中的了解到，定义基本类型变量时，并没有new对象，也就是说8种基本数据类型并不支持面向对象，基本类型数据也就不具备对象的特性，没有成员变量和成员方法可以被调用。Java提供这8种基本数据类型其一是为了节省内存开支，开发者没必要为了定义一个整型变量而去创建一个对象，这样对内存也是一种浪费，另外也是为了使得开发者更好的在语言之间迁移。<br>Java针对每个基本类提供了对应的包装类，如下表：</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<p>有时候需要将基本类型转换成包装类，例如，将一个十进制数转换成二进制时，基本类型的变量没有方法可以调用，此时就需要进行转换，Java中有如下规定：</p>
<ol>
<li>基本类型转换成包装类叫做自动装箱</li>
<li>包装类转换成基本类型时叫做自动拆箱</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> Integer.valueOf(a);</span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> c;</span><br></pre></td></tr></table></figure>

<h3 id="Integer类中的缓存"><a href="#Integer类中的缓存" class="headerlink" title="Integer类中的缓存"></a>Integer类中的缓存</h3><p>Integer类提供了缓存，将-128到127之间的Integer对象创建好放置在内存中，使用是直接返回对象的引用，通过下面示例来学习Integer中的缓存。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java会自动进行装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">System.out.print(a==b);</span><br></pre></td></tr></table></figure>

<p>引用类型的判断使用equals()方法，但是上面的示例运行结果是true，这就是缓存的作用，因为对象a和对象b的值相等，且在-128-127之间，此时100这个对象已经创建好了，当创建a、b两个对象时，直接从缓存中获取对象，也就是说a和b都指向了相同的内存区域。如果变量的值超出了缓存范围，则会创建新的对象。如下示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">129</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">129</span>;</span><br><span class="line">System.out.print(a==b);</span><br></pre></td></tr></table></figure>

<p>因为对象a和b的值超出了缓存范围，因此是两个不同的对象，指向了不同的内存区域，因此返回false。<br>此外，当包装类和基本类型的值进行比较时，会进行自动拆箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">129</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">129</span>;</span><br><span class="line">System.out.print(a==b);</span><br></pre></td></tr></table></figure>

<p>上例的代码会返回true，这是因为当基本类型和包装类型比较时，会将包装类拆箱成基本类型，而基本类型则不存在缓存，就是两个真实的值在比较，因此返回true。<br>当 JDK 提供了自动装箱和自动拆箱功能后，大大简化了基本类型变量和包装类对象之间的转换过程。值得指出的是，进行自动装箱和自动拆箱时必须注意类型匹配，例如 Integer 只能自动拆箱成 int类型变量，不要试图拆箱成 boolean 类型变量; 与之类似的是，int 类型变量只能自动装箱成 Integer 对象（即使赋给 Obiect 类型变量，那也只是利用了Java 的向上自动转型特性），不要试图装箱成 Boolean对象。<br>除此之外，包装类还可实现基本类型变量和字符串之间的转换。把字符串类型的值转换为基本类型的值有两种方式。 利用包装类提供的 parseXxx（String s）静态方法（除了 Character 之外的所有包装类都提供了该方法。<br><strong>另外需要注意的是，Byte、Short、Integer、Long这4个包装类，都具有-128到127之间的缓存，Float和Double类型则不具有。Boolean类型中表示true和false的对象则是两个常量</strong>。</p>
<h3 id="Integer类常用方法"><a href="#Integer类常用方法" class="headerlink" title="Integer类常用方法"></a>Integer类常用方法</h3><p><img src="https://files.catbox.moe/ge891f.png"></p>
<h2 id="日期时间类"><a href="#日期时间类" class="headerlink" title="日期时间类"></a>日期时间类</h2><p>Java提供了Date类和Calendar类用于处理日期，包括创建日期，获取当前日期等。</p>
<h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><p>Date类为开发者提供了6个构造方法，但是有4个已经标记为Deprecated(过时的方法，不推荐使用，可能会在未来的某个版本彻底废弃)。因此我们查看剩余两个：</p>
<ul>
<li>Date()：创建一个代表当前时间的Date对象。</li>
<li>Date(long date)：根据指定的long型整数生成一个Date对象。其中参数表示创建Date对象和GMT 1970年1月1日 08:00:00之间的时间差。单位是毫秒</li>
</ul>
<p>下面通过示例学习两个构造方法的使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//当前时间</span><br><span class="line">Date date = new Date();</span><br><span class="line">//指定时间</span><br><span class="line">Date date2 = new Date(1000000);</span><br></pre></td></tr></table></figure>

<p>Date类还为开发者提供了一下4个方法：</p>
<ul>
<li>boolean after(Date when)∶ 测试该日期是否在指定日期 when 之后。</li>
<li>boolean before(Date when)∶ 测试该日期是否在指定日期 when 之前。</li>
<li>long getTime()∶ 返回该时间对应的 long型整数，即从GMT1970-01-01 00∶00∶00 到该Date 对象 之间的时间差，以毫秒作为计时单位。</li>
<li>void setTime(long time):设置该Date对象的时间。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">01</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">newdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2021</span>,<span class="number">10</span>,<span class="number">02</span>);</span><br><span class="line">        <span class="comment">//测试该日期是否在指定日期 when 之后</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> date.after(newdate);</span><br><span class="line">        <span class="comment">//测试该日期是否在指定日期 when 之前</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> date.before(newdate);</span><br><span class="line">        <span class="comment">//返回该时间对应的 long型整数</span></span><br><span class="line">        date.setTime(<span class="number">86400</span>);</span><br><span class="line">        <span class="comment">//设置该Date对象的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">c</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><p>因为Date类的设计缺陷，Java提供了Calendar类处理日期和时间。Calendar是一个抽象类。它用了几个静态方法用来获取Calendar对象。<br>Calendar 类提供了大量访问、修改日期时间的方法，常用方法如下。</p>
<ul>
<li>void add（int field， int amount）∶ 根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li>
<li>int get（int field）∶ 返回指定日历字段的值。</li>
<li>int getActualMaximum（int field）∶ 返回指定日历字段可能拥有的最大值。例如月，最大值为 11。</li>
<li>int getActualMinimum（int field）∶ 返回指定日历字段可能拥有的最小值。例如月，最小值为 0。</li>
<li>void roll（int field， int amount）∶与 add()方法类似，区别在于加上 amount 后超过了该字段所能表 示的最大范围时，也不会向上一个字段进位。</li>
<li>void set（int field， int value）∶将给定的日历字段设置为给定值。</li>
<li>void set（int year， int month， int date）∶ 设置 Calendar 对象的年、月、日三个字段的值。</li>
<li>void set（int year， int month，int date，int hourOfDay， int minute，int second）∶设置 Calendar 对象的年、 月、日、时、分、秒6个字段的值。 上面的很多方法都需要一个int类型的 field参数，field是 Calendar类的类变量，如 Calendar，YEAR、 CalendarMONTH等分别代表了年、月、日、小时、分钟、秒等时间字段。需要指出的是，Calendar.MONTH字段代表月份，月份的起始值不是1，而是0，所以要设置8 月时，用7 而不是8。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalenderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">//设置 Calendar 对象的年、月、日、时、分、秒6个字段的值</span></span><br><span class="line">        calendar.set(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="number">23</span>,<span class="number">59</span>,<span class="number">59</span>);</span><br><span class="line">        <span class="comment">//返回指定日历字段的值</span></span><br><span class="line">        System.out.println(calendar.get(Calendar.HOUR_OF_DAY));</span><br><span class="line">        <span class="comment">//返回指定日历字段可能拥有的最小值</span></span><br><span class="line">        System.out.println(calendar.getActualMinimum(Calendar.DAY_OF_MONTH));</span><br><span class="line">        <span class="comment">//返回指定日历字段可能拥有的最大值</span></span><br><span class="line">        calendar.add(Calendar.MONTH,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//        calendar.roll(Calendar.MONTH,-10);</span></span><br><span class="line">        System.out.println(calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>add（int field，int amount）的功能非常强大，add 主要用于改变 Calendar 的特定字段的值。如果需要增加某字段的值，则让 amount 为正数;如果需要减少某字段的值，则让 amount 为负数即可。 add（int field， int amount）有如下两条规则：</p>
<ul>
<li>当被修改的字段超出它允许的范围时，会发生进位，即上一级字段也会增大。</li>
<li>如果下一级字段也需要改变，那么该字段会修正到变化最小的值</li>
</ul>
<p>roll()的规则与 add()的处理规则不同∶当被修改的字段超出它允许的范围时，上一级字段不会增大。</p>
<h3 id="Java8-新增的日期时间类"><a href="#Java8-新增的日期时间类" class="headerlink" title="Java8 新增的日期时间类"></a>Java8 新增的日期时间类</h3><p>Java 8专门新增了一个 java.time 包，该包下包含了如下常用的类。</p>
<ul>
<li>LocalDate∶该类代表不带时区的日期，例如 2007-12-03。该类提供了静态的 now()方法来获取 当前日期，它还提供了 minusXxx()方法在当前年份基础上减去几年、几月、几周或几日等，也提供了 plusXxx()方法在当前年份基础上加上几年、几月、几周或几日等。</li>
<li>LocalTime∶ 该类代表不带时区的时间，例如 10∶15∶30。该类提供了静态的 now()方法来获取当 前时间，除此之外，它还提供了minusXxx()方法在当前年份基础上减去几小时、几分、几秒等，也提供了plusXxx()方法在当前年份基础上加上几小时、几分、几秒等。</li>
<li>LocalDateTime∶该类代表不带时区的日期、时间，例如 2007-12-03T10∶15∶30。该类提供了静态 的 now()方法来获取当前日期、时间，它还提供了 minusXxx()方法在当前年份基础上减去几年、几月、几日、几小时、几分、几秒等，也提供了plusXxx()方法在当前年份基础上加上几年、几月、几日、几小时、几分、几秒等。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">LocalDate</span> <span class="variable">ld</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">		System.out.println(ld);</span><br><span class="line">		<span class="type">LocalTime</span> <span class="variable">lt</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">		System.out.println(lt);</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">		System.out.println(ldt);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>在日常的开发中，开发者经常会遇到按照一定格式显示数据的情况，例如，文本、数字、日期等等，在本小节，我们将学习Java中常用的格式化类。</p>
<h3 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h3><p>NumberFormat 是所有数值格式的抽象基类。此类提供格式化和解析数值的接口。NumberFormat提供了以下方法用于格式化。</p>
<ul>
<li>getInstance()、getNumberInstance()。返回当前默认语言环境的通用数值格式。</li>
<li>getInstance(Locale)、getNumberInstance(Locale)。返回指定语言环境的通用数值格式。</li>
<li>NumberFormat.setMinimumIntegerDigits(int)。设置数的整数部分所允许的最小位数。</li>
<li>NumberFormat.setMaximumIntegerDigits(int)。设置数的整数部分所允许的最大位数。</li>
<li>NumberFormat.setMinimumFractionDigits(int)。设置最少小数点位数，不足的位数以0补位，超出的话按实际位数输出。</li>
<li>NumberFormat.setMaximumFractionDigits(int)。设置最多保留小数位数，不足不补0。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumberFormatDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">12345.676688000</span>;</span><br><span class="line">        <span class="type">NumberFormat</span> <span class="variable">nf</span> <span class="operator">=</span> NumberFormat.getNumberInstance();</span><br><span class="line">        System.out.println(nf.format(d));<span class="comment">//12,345.677 默认只保留到小数点后三位</span></span><br><span class="line">        nf.setMinimumIntegerDigits(<span class="number">2</span>);</span><br><span class="line">        System.out.println(nf.format(d));<span class="comment">//12,345.677 整数部分大于2位按默认最小数位数3位输出</span></span><br><span class="line">        d = <span class="number">1234.0</span>;</span><br><span class="line">        nf.setMaximumIntegerDigits(<span class="number">3</span>);</span><br><span class="line">        System.out.println(nf.format(d));<span class="comment">//234</span></span><br><span class="line">        nf = NumberFormat.getInstance();</span><br><span class="line">        d = <span class="number">12345.6766</span>;</span><br><span class="line">        nf.setMinimumFractionDigits(<span class="number">1</span>);</span><br><span class="line">        System.out.println(nf.format(d));<span class="comment">//12,345.677 小数部分大于1位，按默认最大小数位数3位输出</span></span><br><span class="line">        nf.setMinimumFractionDigits(<span class="number">5</span>);</span><br><span class="line">        System.out.println(nf.format(d));<span class="comment">//12,345.67660 不够位数补0</span></span><br><span class="line">        nf.setMaximumFractionDigits(<span class="number">1</span>);</span><br><span class="line">        System.out.println(nf.format(d));<span class="comment">//12,345.7</span></span><br><span class="line">        nf = NumberFormat.getNumberInstance(Locale.CHINA);</span><br><span class="line">        d = <span class="number">12345.6789</span>;</span><br><span class="line">        System.out.println(nf.format(d));<span class="comment">//12,345.679</span></span><br><span class="line">        nf = NumberFormat.getNumberInstance(Locale.US);</span><br><span class="line">        System.out.println(nf.format(d));<span class="comment">//12 345,679</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><p>在前面的日期类当中当打印Date对象时发现，打印的格式并不是我们日常生活中看到的格式，因此，需要对日期进行格式化，Java为开发者提供了SimpleDateFormat对象格式化日期，当创建SimpleDateFormat对象时需要传入一个格式字符串。下面通过示例来学习。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateFormatDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">		<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">158764354</span>);</span><br><span class="line">		<span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> format.format(date);</span><br><span class="line">		System.out.println(str);</span><br><span class="line">		<span class="comment">//将字符串转换成Date类型，字符串格式也要符合构造方法中的参数格式</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1990-08-18 12:00:00&quot;</span>;</span><br><span class="line">		<span class="comment">//parse方法用于解析</span></span><br><span class="line">		<span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> format.parse(s);</span><br><span class="line">		System.out.println(d);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java 8位开发者提供了更强大的格式化工具DateFormatter，格式化之前需要先获取DateFormatter对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateFormatterDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> formatter.format(LocalDateTime.now());</span><br><span class="line">		System.out.println(str);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。<br>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。<br>在学习正则表达之前，首先需要了解一下元字符，也就是正则表达式的组成部分，每个元字符都有其特定的表示含义及范围。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>?</td>
<td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td>
</tr>
<tr>
<td>(pattern)</td>
<td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td>
</tr>
<tr>
<td>(?:pattern)</td>
<td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td>
</tr>
<tr>
<td>(?&#x3D;pattern)</td>
<td>正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td>(?!pattern)</td>
<td>正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td>(?&lt;&#x3D;pattern)</td>
<td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”<code>(?&lt;=95&amp;#124;98&amp;#124;NT&amp;#124;2000)Windows</code>“能匹配”<code>2000Windows</code>“中的”<code>Windows</code>“，但不能匹配”<code>3.1Windows</code>“中的”<code>Windows</code>“。</td>
</tr>
<tr>
<td>(?&lt;!pattern)</td>
<td>反向否定预查，与正向否定预查类似，只是方向相反。例如”<code>(?&lt;!95&amp;#124;98&amp;#124;NT&amp;#124;2000)Windows</code>“能匹配”<code>3.1Windows</code>“中的”<code>Windows</code>“，但不能匹配”<code>2000Windows</code>“中的”<code>Windows</code>“。</td>
</tr>
<tr>
<td>x|y</td>
<td>匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td>
</tr>
<tr>
<td>[xyz]</td>
<td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td>
</tr>
<tr>
<td>[a-z]</td>
<td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td>\cx</td>
<td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td>
</tr>
<tr>
<td>\xn</td>
<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td>
</tr>
<tr>
<td>\num</td>
<td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td>
</tr>
<tr>
<td>\n</td>
<td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>
</tr>
<tr>
<td>\nm</td>
<td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td>
</tr>
<tr>
<td>\nml</td>
<td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>
</tr>
<tr>
<td>\un</td>
<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td>
</tr>
</tbody></table>
<p>Java中为开发提供了2个类用于正则表达式：</p>
<ul>
<li><strong>Pattern 类：</strong>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</li>
<li><strong>Matcher 类：</strong>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</li>
</ul>
<p>下面我们通过一个简单的示例，来了解正则表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RexDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;884105019@qq.com&quot;</span>;</span><br><span class="line">		<span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$&quot;</span>);</span><br><span class="line">		<span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(content);</span><br><span class="line">		System.out.println(m.matches());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Java常用的正则表达式</title>
    <url>/2022/08/01/Java%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h1><ul>
<li><img src="https://files.catbox.moe/c4h179.png"></li>
</ul>
<h1 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h1><ul>
<li><img src="https://files.catbox.moe/6j7046.png"></li>
</ul>
<h1 id="特殊需求的表达式"><a href="#特殊需求的表达式" class="headerlink" title="特殊需求的表达式"></a>特殊需求的表达式</h1><ul>
<li><img src="https://files.catbox.moe/tj1pu1.png"></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java集合框架--List和Queue</title>
    <url>/2022/08/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-List%E5%92%8CQueue/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="Java集合框架–List和Queue"><a href="#Java集合框架–List和Queue" class="headerlink" title="Java集合框架–List和Queue"></a>Java集合框架–List和Queue</h1><p>在前面的章节我们存储数据一般有两种方式：</p>
<ol>
<li>保存在变量中，优点是简单方便，缺点是只能保存一个数据</li>
<li>保存在数组中，优点是可以批量保存数据，缺点是数组的长度不可变，一旦数据个数发生变化时，就得重新创建数组然后复制数组元素，并且数组只能存储相同数据类型的数据。</li>
</ol>
<p>基于以上两点，Java为我们提供了集合类，用于存储数量不等的<strong>对象</strong>，除此以外，Java还可以用于保存具有映射关系的关联数组。</p>
<h2 id="Java集合体系概述"><a href="#Java集合体系概述" class="headerlink" title="Java集合体系概述"></a>Java集合体系概述</h2><p>Java集合大致可以分为List、Set、Map和Queue，其中List代表有序、可重复的集合，Set代表无序、不可重复的集合，而Map则代表具有映射关系的集合。<br>Java集合就像是一个容器，只不过容器里装的都是对象，在JAVA 5之前，Java集合对丢失容器中对象的数据类型，把所有对象都当做Object类型处理，从容器取出元素后，还面临着对象向下转型的问题，Java5以后新增了泛型（关于泛型，会在Java高级中讲解，此处不做深究）。Java集合可以记住容器中对象的数据类型。首先，来查看Java集合体系的全貌。</p>
<p><img src="https://files.catbox.moe/omijxq.png"></p>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>List集合代表一个元素有序、有索引、可重复的集合。List允许存放相同的元素，并且每个元素都有对应的索引，可以通过索引访问指定位置的集合元素。结合ArrayList的特点以及前面章节的内容很容易联想到学习过的数组， 通过查看ArrayList源码可以看到ArrayList的底层就是用数组保存数据以及对数据操作的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 存储ArrayList元素的数组缓冲区。</span></span><br><span class="line"><span class="comment">* ArrayList的容量是此数组缓冲区的长度。任何</span></span><br><span class="line"><span class="comment">* 空的 ArrayList 等价于 elementData==DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment">* 当添加第一个元素时，将扩展到默认容量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure>

<p>那么我们就可以先尝试手动实习自己的ArrayList。在实现ArrayList之前，先来查看ArrayList继承关系图以及主要方法：</p>
<p><img src="https://files.catbox.moe/n0q81w.png"></p>
<p>通过继承关系图可以看出ArrayList的继承关系，下面先对各个接口进行解释：<br><strong>RandomAccess</strong>:随机访问接口，因为ArrayList底层使用数组实现，所以支持在允许范围内随机访问。<br><strong>Cloneable</strong>：克隆接口，说明ArrayList支持克隆<br><strong>Serializable</strong>：序列化接口，说明ArrayList支持序列化（关于序列化的内容，将会在Java高级中讲解)。<br><strong>List</strong>:接口提供数组的添加、删除、修改、迭代遍历等操作。<br><strong>AbstractList</strong>:AbstractList 提供了 List 接口的骨架实现，大幅度的减少了实现迭代遍历相关操作的代码<br>了解完继承关系以后，接下来熟悉ArrayList的常用API，了解完ArrayList的基本操作以后，可以更方便的理解ArrayList的源码以及结构。</p>
<h2 id="ArrayList常用API"><a href="#ArrayList常用API" class="headerlink" title="ArrayList常用API"></a>ArrayList常用API</h2><p>前面的内容可以知道ArrayList在Java中通常当做容器使用，当做容器使用就需要具备基本的增删改查方法。</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>首先，需要了解ArrayList常用的构造方法：</p>
<ul>
<li>public ArrayList(int initialCapacity) ：创建给定容量的ArrayList，initialCapacity的值不能小于0，不能大于Integer能表示的最大值</li>
<li>public ArrayList()：创建ArrayList对象，默认创建一个空数组。</li>
<li>public ArrayList(Collection&lt;? extends E&gt; c)：传入一个集合，以集合中元素为初始元素创建对象</li>
</ul>
<p>在上述3个构造方法中，前两个使用频率较高，当知道ArrayList中保存对象的个数时，通常使用第一个构造方法，这样在ArrayList创建对象时已经初始化好数组的长度了，这样也就避免了扩容的内存开销。<br>同理，当不确定元素个数时，通常使用第二个构造方法。<br>如果需要把一个集合中的元素放入ArrayList，就可以使用第三个构造方法。<br>下面，通过示例来学习这3个构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//创建固定容量的集合</span></span><br><span class="line">		<span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="number">10</span>);</span><br><span class="line">		<span class="comment">//创建不固定容量的集合</span></span><br><span class="line">		<span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">		<span class="comment">//传入一个集合</span></span><br><span class="line">		<span class="type">List</span> <span class="variable">list3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>add(Object o)</strong></td>
<td>添加数据</td>
</tr>
<tr>
<td><strong>add(int index,Object o)</strong></td>
<td>在制定索引处添加元素</td>
</tr>
<tr>
<td><strong>size()</strong></td>
<td>获取元素个数</td>
</tr>
<tr>
<td><strong>get(int index)</strong></td>
<td>获取索引处的元素</td>
</tr>
<tr>
<td><strong>isEmpty()</strong></td>
<td>判断集合是否为空</td>
</tr>
<tr>
<td><strong>indexOf(Object o)</strong></td>
<td>判断某个元素第一次出现的位置</td>
</tr>
<tr>
<td><strong>E remove(int index)</strong></td>
<td>移除索引处元素，并返回该元素</td>
</tr>
<tr>
<td><strong>boolean remove(Object o)</strong></td>
<td>移除元素</td>
</tr>
<tr>
<td><strong>clear()</strong></td>
<td>清空元素</td>
</tr>
<tr>
<td><strong>set(int index ,E e)</strong></td>
<td>修改索引处的元素</td>
</tr>
<tr>
<td><strong>iterator()</strong></td>
<td>获取迭代器</td>
</tr>
<tr>
<td>trimToSize()</td>
<td>减少容量至当前元素个数</td>
</tr>
<tr>
<td>contains(Object o)</td>
<td>判断是否包含某个元素</td>
</tr>
<tr>
<td>lastIndexOf(Object o)</td>
<td>判断某个元素最后一次出现的位置</td>
</tr>
<tr>
<td>toArray()</td>
<td>将集合转换为数组</td>
</tr>
<tr>
<td>addAll(Collection&lt;? extends E&gt; c)</td>
<td>集合中添加集合</td>
</tr>
<tr>
<td>addAll(int index, Collection&lt;? extends E&gt; c)</td>
<td>索引处添加集合</td>
</tr>
<tr>
<td>retainAll(Collection c)</td>
<td>求两个集合的交集</td>
</tr>
<tr>
<td>removeAll(Collection&lt;?&gt; c)</td>
<td>移除传入集合内的元素</td>
</tr>
<tr>
<td>subList(int fromIndex, int toIndex)</td>
<td>获取子集合</td>
</tr>
</tbody></table>
<p>下面，通过示例代码来学习ArrayList的常用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//集合当中添加元素</span></span><br><span class="line">		<span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">		list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">		list.add(<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">		list.add(<span class="string">&quot;小昭&quot;</span>);</span><br><span class="line">		<span class="comment">//将list转成数组</span></span><br><span class="line">		Object[] objects = list.toArray();</span><br><span class="line">		System.out.println(Arrays.toString(objects));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        list.add(<span class="number">50</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//在索引处，添加元素</span></span><br><span class="line">        list.add(<span class="number">3</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//获取元素的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> list.size();</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//判断集合是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());</span><br><span class="line">        <span class="comment">//判断某个元素第一次出现的位置</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="number">30</span>));</span><br><span class="line">        <span class="comment">//移除索引处的元素</span></span><br><span class="line">        System.out.println(list.remove(<span class="number">1</span>));</span><br><span class="line">        list.set(<span class="number">5</span>,<span class="number">60</span>);</span><br><span class="line">        <span class="comment">// 迭代器</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line">        System.out.println(it.next());</span><br><span class="line">        <span class="comment">//清空元素</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        list.trimToSize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">15</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">25</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">15</span>);</span><br><span class="line">        <span class="comment">//判断是否包含某个元素</span></span><br><span class="line">        System.out.println(list.contains(<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//判断某个元素最后一次出现的位置</span></span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="number">15</span>));</span><br><span class="line">        <span class="comment">//将集合转换为数组</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        arr.add(<span class="number">1</span>);</span><br><span class="line">        arr.add(<span class="number">2</span>);</span><br><span class="line">        arr.add(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//集合中添加集合</span></span><br><span class="line"><span class="comment">//        list.addAll(arr);</span></span><br><span class="line">        <span class="comment">//求两个集合的交集</span></span><br><span class="line">        list.retainAll(arr);</span><br><span class="line"><span class="comment">//        集合处添加集合</span></span><br><span class="line">        list.addAll(<span class="number">3</span>,arr);</span><br><span class="line">        list.toArray();</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="手动实现ArrayList"><a href="#手动实现ArrayList" class="headerlink" title="手动实现ArrayList"></a>手动实现ArrayList</h3><p>通过上一小节的学习可以发现ArrayList中主要的方法就是增、删、改、查，接下来根据ArrayList的方法，手动实现自己的ArrayList。<br>第一步：需要定义一个数组保存元素，其次需要定义一个变量保存数组中元素的个数。以及当前数组的长度和默认初始化的长度</p>
<p>第一步：需要定义一个数组保存元素，其次需要定义一个变量保存数组中元素的个数。以及当前数组的长度和默认初始化的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于保存元素个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="comment">//保存元素</span></span><br><span class="line"><span class="keyword">private</span> Object[] objects;</span><br><span class="line"><span class="comment">//保存数组的当前长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> length;</span><br><span class="line"><span class="comment">//保存数组的默认长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_LEGTH</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>第二步：定义构造方法，构造方法的目的主要是为了初始化数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArray</span> &#123;	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义数组，保存数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Object[] objects = <span class="literal">null</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 默认数组长度</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_LENGTH</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 数组长度</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> length;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 数组元素个数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> size= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 默认构造函数，创建数组</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOAD</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">MyArray</span><span class="params">()</span> &#123;</span><br><span class="line">		length = DEFAULT_LENGTH;</span><br><span class="line">		objects = <span class="keyword">new</span> <span class="title class_">Object</span>[length];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 构造函数，根据用户传入长度创建数组</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">MyArray</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.length = length;</span><br><span class="line">		objects = <span class="keyword">new</span> <span class="title class_">Object</span>[length];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：定义add()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArray</span> &#123;	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 向数组中添加元素</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">		<span class="comment">//判断是否需要扩容</span></span><br><span class="line">		<span class="keyword">if</span>(size==length) &#123;</span><br><span class="line">			<span class="comment">//元素个数等于了数组长度，需要扩容</span></span><br><span class="line">			length = length*LOAD;</span><br><span class="line">			objects = Arrays.copyOf(objects,length);</span><br><span class="line">		&#125;</span><br><span class="line">		objects[size]=o;</span><br><span class="line">		size++;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,Object o)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size-<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;访问越界&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//判断是否需要扩容</span></span><br><span class="line">			<span class="keyword">if</span>(size==length) &#123;</span><br><span class="line">				<span class="comment">//元素个数等于了数组长度，需要扩容</span></span><br><span class="line">				length = length*LOAD;</span><br><span class="line">				objects = Arrays.copyOf(objects,length );</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//先将index位置处的元素已近后面元素向右移动</span></span><br><span class="line">			System.arraycopy(objects, index, objects, index+<span class="number">1</span>, size-index);</span><br><span class="line">			objects[index] = o;</span><br><span class="line">			size++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述代码中重载了两个add()方法，第一个方法默认添加到数组元素尾部，从代码中可以看出添加元素时先判断元素个数是否等于数组长度，当元素个数等于数组长度时意味着数组已经满了，此时，需要扩容，我们获取到数组原长度并乘以2，然后创建新的数组长度为原数组长度的2倍，并将原数组中的元素复制到新数组，最后将新数组的引用保存在原数组，扩容完毕后将新添加的元素放置在新数组元素末尾，然后元素个数增加一。如果不需要扩容，则直接将元素添加在数组元素末尾，然后元素个数增加一。<br>在add(int index,Object o)方法中，因为此时涉及到数组的索引，所以先判断传入的索引是否越界，如果越界则抛出异常，没有越界则继续执行，当添加元素时也需要先判数组是否已经放满，如果已经放满则扩容，扩容以后先将原数组的元素全部复制到新数组，复制完成以后，先将索引处元素到最后一个元素依次向后移动，然后将新元素放入索引位置处，最后将元素个数加一，如果不需要扩容，则直接将索引处元素向后移动，然后将新增的元素放入索引位置处。<br>第二步：定义删除方法<br>为了保证数组中所有的元素连续，那么当删除一个元素需要对被删除元素以后的元素全部向前移动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组移除操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size-<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;访问越界&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		objects[index]= <span class="literal">null</span>;</span><br><span class="line">		System.arraycopy(objects, index+<span class="number">1</span>, objects,index , size-index);</span><br><span class="line">		size--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于是要根据数组索引删除元素，因此删除之前要先判断索引是否越界，如果越界则抛出异常。<br>删除元素时只需将索引处的元素置为null，然后将索引处后面的元素全部往前移动1位，最后将元素个数减一即可。<br>第三步：修改元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 更新数组元素</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index,Object o)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size-<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;访问越界&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	objects[index] = o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改元素时，一般是修改某个索引处的元素，因此也要判断传入索引是否越界。如果索引没有越界，则将索引处的元素修改为新元素即可。<br>第四步：查看元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查找某个索引处的元素</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size-<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;访问越界&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> objects[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取索引处元素时，也需要先判断索引是否越界，如果没有越界则直接从数组中获取数组元素即可。</p>
<h3 id="ArrayList添加元素过程"><a href="#ArrayList添加元素过程" class="headerlink" title="ArrayList添加元素过程"></a>ArrayList添加元素过程</h3><p>在前面的章节中可以知道ArrayList的底层实现是一个数组，在ArrayList中添加元素的过程本质上就是在ArrayList底层数组添加元素的过程。<br>下面我们通过分析ArrayList源码来了解这个过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="comment">//记录ArrayList的修改次数</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//调用重载的add()方法</span></span><br><span class="line">    add(e, elementData, size);</span><br><span class="line">    <span class="comment">//从这里看出不管元素是否添加成功都返回了true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从add()方法中可以看出，add方法内调用了重载的私有add(E e, Object[] elementData, int s)方法，并且返回了true，在这里需要注意的是根据此方法的返回值判断元素是否添加成功并没有任何意义，因为add()方法返回值恒为true。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e, Object[] elementData, <span class="type">int</span> s)</span> &#123;</span><br><span class="line">    <span class="comment">//判断元素个数是否和长度相等</span></span><br><span class="line">    <span class="keyword">if</span> (s == elementData.length)</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        elementData = grow();</span><br><span class="line">    <span class="comment">//将元素放置在扩容后数组的已有元素的末尾</span></span><br><span class="line">    elementData[s] = e;</span><br><span class="line">    <span class="comment">//元素个数增加</span></span><br><span class="line">    size = s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个方法中首先判断元素的个数是否等于数组长度，也就是说判断数组是否已经满了，如果满了则进行扩容。不管是否扩容，都将新增的元素放在已有元素的后面，然后元素的个数加一。<br>那么ArrayList又是如何扩容的呢？继续查看grow()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow() &#123;</span><br><span class="line">    <span class="keyword">return</span> grow(size + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>grow()方法比较简单，只是调用了私有的重载grow(intminCapacity)方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow(<span class="type">int</span> minCapacity) &#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">elementData</span> <span class="operator">=</span> Arrays.copyOf(elementData,</span><br><span class="line">                                           newCapacity(minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源代码可以看出，在这个grow()方法内部使用了数组复制，并且在数组复制前调用了newCapacity()方法。继续查看newCapacity()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">newCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">//获取数组当前长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">//计算新长度，可以看出新长度是原长度的1.5倍</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//判断新容量和最小容量大小，如果新容量小于等于最小容量</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果当前数组是默认容量长度为0的数组</span></span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            <span class="comment">//返回数组初始长度10</span></span><br><span class="line">            <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        <span class="comment">//如果最小容量小于0则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">        <span class="keyword">return</span> minCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果新容量大于最小容量，判断新容量是否比数组长度的最大值小</span></span><br><span class="line">    <span class="comment">//如果新容量小于数组长度最大值则返回新容量</span></span><br><span class="line">    <span class="keyword">return</span> (newCapacity - MAX_ARRAY_SIZE &lt;= <span class="number">0</span>)</span><br><span class="line">        ? newCapacity</span><br><span class="line">        : hugeCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>newCapacity()方法即ArrayList计算扩容后数组长度的核心方法，在这个方法中主要做了以下工作：</p>
<ol>
<li>获取数组原长度并根据元长度计算新长度</li>
<li>判断新长度是否比原长度小，如果新长度比原长度小，判断数组是否是初始的空数组，如果是则返回默认长度10。</li>
<li>如果新长度大于原长度，判断新长度是否大于等于数组长度的最大值（Integer.MAX_VALUE-8）,如果不大于则返回新长度。</li>
<li>如果大于则调用hugeCapacity()方法。</li>
</ol>
<p>继续查看hugeCapacity()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE)</span><br><span class="line">            ? Integer.MAX_VALUE</span><br><span class="line">            : MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>hugeCapacity()方法较为简单，判断最小容量是否大于数组的最大长度，如果大于则返回Integer的最大值，否则返回数组最大值。</p>
<h3 id="ArrayList和Vector"><a href="#ArrayList和Vector" class="headerlink" title="ArrayList和Vector"></a>ArrayList和Vector</h3><p>和ArrayList具有相同功能的类是Vector，Vector是Java早期提供的一个集合类，Vector和ArrayList的方法以及底层的实现基本相似，唯一不同的是Vector的方法都是线程安全的，打开Vector源码可以发现Vector的方法都是用synchronized修饰的（关于synchronized修饰符，会在多线程中讲解），因此Vector效率低于ArrayList。除此之外ArrayList和Vector的区别还体现在以下几个方面：</p>
<ol>
<li>ArrayList扩容后的长度是原长度的1.5倍，而Vector扩容后的长度是原长度的2倍</li>
<li>ArrayList调用无参构造方法创建对象时，会创建一个空的Object数组，当添加第一个元素时进行扩容，初始容量为10，当Vector调用无参构造创建对象时，则会直接初始化保存数据的数组，长度为10。</li>
</ol>
<h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>LinkedList同样实现了List，也就是说LinkedList和ArrayList的方法基本一致。除此以外，LinkedList还实现了Deque接口。Deque接口则继承了Queue接口，因为Queue是指队列这种数据结构，换句话说就是LinkedList不但可以当做List使用，也可以当做队列使用（FIFO），并且是双端队列，根据队列的规定，队列只能从一端进入数据，另一端出数据，但是双端队列任意一端都可以进出数据。下面先来查看LinkedList继承关系图：</p>
<p><img src="https://files.catbox.moe/ybf7v4.png"></p>
<h3 id="手动实现LinkedList"><a href="#手动实现LinkedList" class="headerlink" title="手动实现LinkedList"></a>手动实现LinkedList</h3><p>LinkedList底层结构实现和ArrayList底层数据结构实现有着本质上的区别，通过上一小节的内容可以看出ArrayList底层实现主要依赖数组，而LinkedList底层实现则是依赖链表。并且LinkedList底层数据结构是双向链表，因此，需要先定义链表数据节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	Node pre;</span><br><span class="line">	Object data;</span><br><span class="line">	Node next;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Node pre, E data, Node next)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.pre = pre;</span><br><span class="line">		<span class="built_in">this</span>.data = data;</span><br><span class="line">		<span class="built_in">this</span>.next = next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一步：LinkedList的实现是双向链表，因此需要定义首节点和尾结点。并且需要保存链表中元素的个数。此外，还需要提供无参构造方法，在构造方法内初始化一个空链表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 链表元素个数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 链表首节点</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 链表尾结点</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Node last;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 默认构造创建一个空链表</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">		first = <span class="literal">null</span>;</span><br><span class="line">		last = <span class="literal">null</span>;</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>第二步：添加元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 链表中添加节点，默认添加在尾部</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> Object</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">null</span>||last==<span class="literal">null</span>||size==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">//说明链表为空链表</span></span><br><span class="line">		<span class="comment">//1.创建新节点</span></span><br><span class="line">		<span class="comment">//2.新节点指为first</span></span><br><span class="line">		<span class="comment">//3.新节点指为last</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,e,<span class="literal">null</span>);</span><br><span class="line">		first = newNode;</span><br><span class="line">		last = newNode;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//1.创建新节点</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(last,e,<span class="literal">null</span>);</span><br><span class="line">		<span class="comment">//2.将last节点指向新节点</span></span><br><span class="line">		last.next = newNode;</span><br><span class="line">			<span class="comment">//3.将新节点改为last</span></span><br><span class="line">		last = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">	size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当直接添加元素时，默认添加在链表末尾。添加元素时首先判断链表是否为空链表，如果为空链表，则新增加的节点既是首节点，也是尾结点，并且没有前置节点也没有后置节点，因此，新增的节点前置节点和后置节点都为null，当创建好新增的节点后，将首节点和为节点都指向该节点，然后元素个数加一。<br>当链表不为空链表时，只需要将创建的新节点的前置节点指向尾结点，然后将尾结点指向新创建的节点，然后将元素个数加一。<br>第二步：定义删除元素方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除索引处节点</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size-<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;访问越界&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(index==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(size==<span class="number">1</span>)&#123;</span><br><span class="line">                first = <span class="literal">null</span>;</span><br><span class="line">                last = <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">removeNode</span> <span class="operator">=</span> first;</span><br><span class="line">				first = first.next;</span><br><span class="line">				first.pre = <span class="literal">null</span>;</span><br><span class="line">				removeNode.next=<span class="literal">null</span>;   </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(index==size-<span class="number">1</span>) &#123;</span><br><span class="line">        	<span class="keyword">if</span>(size==<span class="number">1</span>)&#123;</span><br><span class="line">                first = <span class="literal">null</span>;</span><br><span class="line">                last = <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">removeNode</span> <span class="operator">=</span> last;</span><br><span class="line">                last = last.pre;</span><br><span class="line">                last.next = <span class="literal">null</span>;</span><br><span class="line">                removeNode.pre = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;  	</span><br><span class="line">            <span class="comment">//1.找到索引处的节点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">indexNode</span> <span class="operator">=</span> getNodeByIndex(index);</span><br><span class="line">            <span class="comment">//2.找到索引处的后置节点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> indexNode.next;</span><br><span class="line">            <span class="comment">//3.找到索引处的前置节点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> indexNode.pre;</span><br><span class="line">            <span class="comment">//4.将索引处前置节点的next指向索引处后置节点</span></span><br><span class="line">            pre.next = next;</span><br><span class="line">            <span class="comment">//5.将索引处后置节点的pre指向索引处前置节点</span></span><br><span class="line">            next.pre = pre;</span><br><span class="line">		&#125;</span><br><span class="line">		size--;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>移除元素时，根据元素索引移除，所以要先判断索引是否越界，索引越界时抛出异常，如果没有越界。则判断删除元素的位置：<br>当删除的是首节点时，首先判断元素个数是否是1，如果只有一个元素，则直接将首节点和尾结点置为null即可。<br>如果有多个元素时，则先获取首节点，然后获取首节点的后置节点并将获取到节点的pre属性置为null以及将原来首节点的next属性置为null，并将获取到的节点置为新的首结点，最后将元素个数减一即可。<br>当删除的节点是尾结点时，先判断元素个数是否为1，如果只有一个元素，则直接将首节点和尾结点置为null即可。<br>如果有多个元素时，则先获取尾结点的前置节点，将获取到的节点的next属性和原来尾结点的pre属性置为null，并将获取到的节点置为新的尾结点。最后将元素个数减一即可。<br>当删除的节点是中间节点时，首先需要获取删除索引处节点的前置节点和后置节点，即获取n-1处的节点和n+1处的节点，然后将n-1处节点的next指向n+1处节点，并将n+1处的节点pre属性指向n-1处节点。最后将元素个数减一。<br>第三步：定义查找方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据传入的索引找到节点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; <span class="title function_">getNodeByIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">	<span class="comment">//判断索引越界</span></span><br><span class="line">	<span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;访问越界&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(index==<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> first;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(index==size-<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> last;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		Node&lt;E&gt; current = first;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size&amp;&amp;current!=<span class="literal">null</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i==index) &#123;</span><br><span class="line">				<span class="keyword">return</span> current;</span><br><span class="line">			&#125;</span><br><span class="line">			current = current.next;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据索引获取元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">	Node&lt;E&gt; node = getNodeByIndex(index);</span><br><span class="line">	<span class="keyword">return</span> node.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据索引获取元素，需要判断索引是否越界，如果没有越界则根据传入索引判断获取的是哪个节点的元素。<br>当索引值为0时，直接返回首节点中保存的数据。<br>当索引的值为size-1时，直接返回尾结点中保存的数据。<br>当索引的值在0到size-1之间时，从首节点开始遍历，当遍历的节点索引等于index时，返回该节点中保存的数据。<br>第四步：定义修改方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改索引处的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,E e)</span> &#123;</span><br><span class="line">	chcekRange(index);</span><br><span class="line">	Node&lt;E&gt; current  = first;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size&amp;&amp;current!=<span class="literal">null</span>;i++,current = current.next) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i==index) &#123;</span><br><span class="line">			current.data = e;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改元素时，检查索引是否越界，从首节点开始遍历，直到找到索引处元素并修改值即可</p>
<h3 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h3><p>ArrayList和LinkedList虽然都是List接口的子类，但是在底层实现以及效率上存在以下区别</p>
<ol>
<li>ArrayList和LinkedList都实现了List接口</li>
<li>ArrayList和LinkedList都是非线程安全的，因此在多线程环境下可能会出现出现不同步的情况</li>
<li>ArrayList底层实现是数组，LinkedList底层实现是双向链表</li>
<li>ArrayList因为底层实现是数组，并且支持随机访问因此查找效率高，但是ArrayList在新增元素时会扩容以及复制数组元素，并且删除时也会进行数组复制，所以增删效率低。而LinkedList不支持随机访问，获取元素时必须从首节点开始从前往后遍历查找，因此查找效率低。但是增加和删除时最多涉及到两个节点的操作，因此增删效率高。</li>
</ol>
<h2 id="ArrayList和LinkedList的遍历"><a href="#ArrayList和LinkedList的遍历" class="headerlink" title="ArrayList和LinkedList的遍历"></a>ArrayList和LinkedList的遍历</h2><ol>
<li>ArrayList和LinkedList都支持使用for循环遍历</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示使用for循环遍历ArrayList和LinkedList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">		arrayList.add(<span class="string">&quot;宋远桥&quot;</span>);</span><br><span class="line">		arrayList.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">		arrayList.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">			System.out.println(arrayList.get(i));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">		linkedList.add(<span class="string">&quot;白眉鹰王&quot;</span>);</span><br><span class="line">		linkedList.add(<span class="string">&quot;金毛狮王&quot;</span>);</span><br><span class="line">		linkedList.add(<span class="string">&quot;青翼蝠王&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; linkedList.size(); i++) &#123;</span><br><span class="line">			System.out.println(arrayList.get(i));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.使用foreach遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示使用foreach遍历ArrayList和LinkedList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForeachDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">		arrayList.add(<span class="string">&quot;宋远桥&quot;</span>);</span><br><span class="line">		arrayList.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">		arrayList.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (String s : arrayList) &#123;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">		linkedList.add(<span class="string">&quot;白眉鹰王&quot;</span>);</span><br><span class="line">		linkedList.add(<span class="string">&quot;金毛狮王&quot;</span>);</span><br><span class="line">		linkedList.add(<span class="string">&quot;青翼蝠王&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (String s : linkedList) &#123;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.因为ArrayList和LinkedList都继承了Iterable接口，因此ArrayList和LinkedList都可以使用迭代器进行遍历。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">		arrayList.add(<span class="string">&quot;宋远桥&quot;</span>);</span><br><span class="line">		arrayList.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">		arrayList.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		Iterator&lt;String&gt; it1 = arrayList.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it1.hasNext()) &#123;</span><br><span class="line">			System.out.println(it1.next());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">		linkedList.add(<span class="string">&quot;白眉鹰王&quot;</span>);</span><br><span class="line">		linkedList.add(<span class="string">&quot;金毛狮王&quot;</span>);</span><br><span class="line">		linkedList.add(<span class="string">&quot;青翼蝠王&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		Iterator&lt;String&gt; it2 = linkedList.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it2.hasNext()) &#123;</span><br><span class="line">			System.out.println(it2.next());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了Iterator以外，List还提供了ListIterator用于遍历List，方法基本和Iterator类似。</p>
<p>4.Lambda表达式遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Lambda遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		List&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">		arrayList.add(<span class="string">&quot;宋远桥&quot;</span>);</span><br><span class="line">		arrayList.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">		arrayList.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		arrayList.forEach(str-&gt;&#123;</span><br><span class="line">			System.out.println(str);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>Queue 用于模拟队列这种数据结构，队列通常是指”先进先出”（FIFO）的容器。队列的头部保存在队列中存放时间最长的元素，队列的尾部保存在队列中存放时间最短的元素。新元素插入（offer）到队列的尾部，访问元素（poll）操作会返回队列头部的元素。通常，队列不允许随机访问队列中的元素。<br>Queue 接口中定义了如下几个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Queue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">//队列末尾添加元素</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>;</span><br><span class="line">    <span class="comment">//将指定的元素添加到队列尾部</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span>;</span><br><span class="line">    <span class="comment">//移除队列头部的元素</span></span><br><span class="line">    E <span class="title function_">remove</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//获取队列头部的元素，并删除该元素</span></span><br><span class="line">    E <span class="title function_">poll</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//获取队列头部的元素</span></span><br><span class="line">    E <span class="title function_">element</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//获取队列头部的元素，但是不删除</span></span><br><span class="line">    E <span class="title function_">peek</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>boolean add(Object e)∶将指定元素加入此队列的尾部。</li>
<li>Object element()∶获取队列头部的元素，但是不删除该元素。</li>
<li>boolean offer(Object e)∶将指定元素加入此队列的尾部。当使用有容量限制的队列时，通常推荐使用 add(Object e)方法更好。</li>
<li>Object peek()∶获取队列头部的元素，但是不删除该元素。如果此队列为空，则返回 null。</li>
<li>Object poll()∶获取队列头部的元素，并删除该元素。如果此队列为空，则返回 null。</li>
<li>Object remove()∶获取队列头部的元素，并删除该元素。</li>
</ul>
<p>Queue 接口有一个PriorityQueue 实现类。除此之外，Queue 还有一个 Deque 接口，Deque 代表一个”双端队列”，双端队列可以同时从两端来添加、删除元素，因此 Deque 的实现类既可当成队列使用，也可当成栈使用。Java 为 Deque提供了ArrayDeque 和 LinkedList 两个实现类。</p>
<h3 id="PriorityQueue实现类"><a href="#PriorityQueue实现类" class="headerlink" title="PriorityQueue实现类"></a>PriorityQueue实现类</h3><p>PriorityQueue是一个标准的队列实现，需要注意的是PriorityQueue并不是绝对标准的队列实现，这是因为PriorityQueue保存队列元素的顺序并不是按照加入的顺序，在PriorityQueue内部会对元素的大小进行重新排序。因此，当调用peek()方法或者poll()方法取出队列中的元素时。并不是取出最先进入队列的元素，而是取出队列中最小的元素，从这个意义上来看，PriorityQueue已经违反了队列先进先出的规则。下面，通过示例来查看PriorityQueue的用法.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueueDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;();</span><br><span class="line">		queue.offer(<span class="number">5</span>);</span><br><span class="line">		queue.offer(-<span class="number">1</span>);</span><br><span class="line">		queue.offer(<span class="number">10</span>);</span><br><span class="line">		queue.offer(<span class="number">30</span>);</span><br><span class="line">		<span class="comment">//①打印queue</span></span><br><span class="line">		System.out.println(queue);</span><br><span class="line">		<span class="comment">//获取队列头部的元素并删除</span></span><br><span class="line">		System.out.println(queue.poll());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行上述程序打印PriorityQueue队列时，发现队列中的元素顺序并不是按照存放的顺序排列的，而是从小到大排列。<br>PriorityQueue不允许插入null元素，它还需要对队列元素进行排序，PriorityQueue的元素有两种排序方式：</p>
<ol>
<li>自然排序：采用自然顺序的PriorityQueue队列中的元素必须实现Comparable接口，并且应该是同一个类的多个示例，否则可能导致转型异常</li>
<li>定制排序：创建PriorityQueue队列是，传入一个Comparator对象，该对象负责对队列中的所有元素进行排序。采用定制排序时不要求队列元素实现Comparator接口。</li>
</ol>
<h3 id="Deque接口与ArrayDeque"><a href="#Deque接口与ArrayDeque" class="headerlink" title="Deque接口与ArrayDeque"></a>Deque接口与ArrayDeque</h3><p>在上一小节学习的PriorityQueue是一个单向队列，也就是入口和出口是由明显划分的，不能从入口取出元素，反之也不能在出口放入元素。<br>Deque是Queue的子接口，它代表的了一个双端队列，Deque接口中定义了一些双端队列的方法，这些方法允许从队列两端来操作队列中的元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Deque&lt;E&gt; extends Queue&lt;E&gt; &#123;</span><br><span class="line">    void addFirst(E e);</span><br><span class="line">    void addLast(E e);</span><br><span class="line">    boolean offerFirst(E e);</span><br><span class="line">    boolean offerLast(E e);</span><br><span class="line">    E removeFirst();</span><br><span class="line">    E removeLast();</span><br><span class="line">    E pollFirst();</span><br><span class="line">    E pollLast();</span><br><span class="line">    E getFirst();</span><br><span class="line">    E getLast();</span><br><span class="line">    E peekFirst();</span><br><span class="line">    E peekLast();</span><br><span class="line">    boolean removeFirstOccurrence(Object o);</span><br><span class="line">    boolean removeLastOccurrence(Object o);</span><br><span class="line">    boolean add(E e);</span><br><span class="line">    boolean offer(E e);</span><br><span class="line">    E remove();</span><br><span class="line">    E poll();</span><br><span class="line">    E element();</span><br><span class="line">    E peek();</span><br><span class="line">    boolean addAll(Collection&lt;? extends E&gt; c);</span><br><span class="line">    void push(E e);</span><br><span class="line">    E pop();</span><br><span class="line">    boolean remove(Object o);</span><br><span class="line">    boolean contains(Object o);</span><br><span class="line">    int size();</span><br><span class="line">    Iterator&lt;E&gt; iterator();</span><br><span class="line">    Iterator&lt;E&gt; descendingIterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面对接口中的方法进行简要介绍：</p>
<ul>
<li>void addFirst(Object e)：将指定元素插入该双端队列的开头。</li>
<li>void addLast(Object e)：将指定元素插入该双端队列的末尾。</li>
<li>Iterator descendinglterator()：返回该双端队列对应的迭代器，该迭代器将以逆向顺序来迭代队列中的元素。</li>
<li>Object getFirst()：获取但不删除双端队列的第一个元素。</li>
<li>Object getLast()：获取但不删除双端队列的最后一个元素。</li>
<li>boolean offerFirst(Object e)：将指定元素插入该双端队列的开头。</li>
<li>boolean offerLast(Object e)：将指定元素插入该双端队列的末尾。</li>
<li>Object peekFirst()：获取但不删除该双端队列的第一个元素;如果此双端队列为空，则返回 null。</li>
<li>Object peekLast()：获取但不删除该双端队列的最后一个元素;如果此双端队列为空，则返回 null。</li>
<li>Object pollFirst()：获取并删除该双端队列的第一个元素;如果此双端队列为空，则返回 null。</li>
<li>Object pollLast()：获取并删除该双端队列的最后一个元素;如果此双端队列为空，则返回 null。</li>
<li>Object pop()(栈方法)：pop 出该双端队列所表示的栈的栈顶元素。相当于removeFirstO。</li>
<li>void push(Object e)(栈方法)：将一个元素 push 进该双端队列所表示的栈的栈顶。相当于addFirst(e)。</li>
<li>Object removeFirst()：获取并删除该双端队列的第一个元素。</li>
<li>Object removeFirstOccurrence(Object o)：删除该双端队列的第一次出现的元素 o。</li>
<li>Object removeLast()：获取并删除该双端队列的最后一个元素。</li>
<li>boolean removeLastOccurrence(Object o)：删除该双端队列的最后一次出现的元素o。</li>
</ul>
<p>从上面方法中可以看出，Deque 不仅可以当成双端队列使用，而且可以被当成栈来使用，因为该类里还包含了pop（出栈）、push（入栈）两个方法。<br>Deque接口提供了一个典型的实现类：ArrayDeque，从类名就可以看出，这个队列是基于数组实现的双端队列，创建Deque时可以指定一个numElement参数，该参数用于指定Object[]数组的长度，如果不指定该参数，则ArrayDeque底层数组的默认长度为16。<br>由于ArrayDeque既可以当做队列使用，又可以当做栈使用，下面的示例首先示范将ArrayDeque使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ArrayDequeDemo &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		ArrayDeque&lt;String&gt; stack = new ArrayDeque&lt;String&gt;();</span><br><span class="line">		stack.push(&quot;Java&quot;);</span><br><span class="line">		stack.push(&quot;HTML&quot;);</span><br><span class="line">		stack.push(&quot;Spring&quot;);</span><br><span class="line">		//输出stack:[Spring, HTML, Java]</span><br><span class="line">		System.out.println(stack);</span><br><span class="line">		//peek第一个元素，但是并不出栈,输出Spring</span><br><span class="line">		System.out.println(stack.peek());</span><br><span class="line">		//pop第一个元素，出栈并删除</span><br><span class="line">		System.out.println(stack.pop());</span><br><span class="line">		//再次打印stack,输出[HTML, Java]</span><br><span class="line">		System.out.println(stack);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例演示了ArrayDeque作为栈使用，当程序中需要使用栈这种数据结构时，推荐使用ArrayDeque，尽量避免使用Stack，这是因为Stack是一个比较古老的集合，并且性能方面也不尽人意。<br>当然ArrayDeque也可以当做队列使用，ArrayDeque会按照“先进先出”的方式操作集合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDequeDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		ArrayDeque&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;String&gt;();</span><br><span class="line">		queue.offer(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">		queue.offer(<span class="string">&quot;HTML&quot;</span>);</span><br><span class="line">		queue.offer(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//打印queue，输出[Java, HTML, Spring]</span></span><br><span class="line">		System.out.println(queue);</span><br><span class="line">		<span class="comment">//访问队列头部元素，但不出队列输出Java</span></span><br><span class="line">		System.out.println(queue.peek());</span><br><span class="line">		<span class="comment">//poll出第一个元素，输出Java</span></span><br><span class="line">		System.out.println(queue.poll());</span><br><span class="line">		<span class="comment">//再次打印队列，输出[HTML, Spring]</span></span><br><span class="line">		System.out.println(queue);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LinkedList实现类"><a href="#LinkedList实现类" class="headerlink" title="LinkedList实现类"></a>LinkedList实现类</h3><p>LinkedList类时List接口的实现类，也就是说LinkedList可以根据索引来随机访问放入其中的元素，除此以外LinkedList也可以被当做栈和队列使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		LinkedList&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line">		<span class="comment">//将字符串加入队列末尾</span></span><br><span class="line">		linkedList.offer(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">		<span class="comment">//将一个字符串加入栈的顶部</span></span><br><span class="line">		linkedList.push(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">		<span class="comment">//将字符串添加到队列头部（相当于栈的顶部）</span></span><br><span class="line">		linkedList.offerFirst(<span class="string">&quot;HTML&quot;</span>);</span><br><span class="line">		<span class="comment">//当做list遍历</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; linkedList.size(); i++) &#123;</span><br><span class="line">			System.out.println(linkedList.get(i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//访问并不删除栈顶的元素</span></span><br><span class="line">		System.out.println(linkedList.peekFirst());</span><br><span class="line">		<span class="comment">//访问并不删除队列的最后一个元素</span></span><br><span class="line">		System.out.println(linkedList.peekLast());</span><br><span class="line">		<span class="comment">//将栈顶的元素弹出栈</span></span><br><span class="line">		System.out.println(linkedList.pop());</span><br><span class="line">		<span class="comment">//输出[Spring, Java]</span></span><br><span class="line">		System.out.println(linkedList);</span><br><span class="line">		<span class="comment">//访问并删除队列中的最后一个元素</span></span><br><span class="line">		System.out.println(linkedList.pollLast());</span><br><span class="line">		<span class="comment">//输出[[Spring]]</span></span><br><span class="line">		System.out.println(linkedList);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码分别演示了LinkedList作为List，双端队列及栈的使用，所以LinkedList是一个功能非常强大的类，但是需要注意的是，虽然LinkedList功能强大，开发中如果要当做队列使用，就不要调用栈和list相关的方法，这样做会引起不必要的麻烦以及代码难以维护。</p>
]]></content>
  </entry>
  <entry>
    <title>Java集合框架--Map</title>
    <url>/2022/08/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-Map/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="Java集合框架–Map集合"><a href="#Java集合框架–Map集合" class="headerlink" title="Java集合框架–Map集合"></a>Java集合框架–Map集合</h1><h2 id="Map概述"><a href="#Map概述" class="headerlink" title="Map概述"></a>Map概述</h2><p>Map用于保存具有映射关系的数据，因此Map集合里保存着两组值，一组用于保存Map里的key，另外一组用于保存Map里的value，key和value都可以是任何引用类型的数据。Map的key不允许重复，即同一个Map对象的任何两个key通过equals方法比较总是返回false。<br>key和value之间存在单向一对一的关系，即通过指定的key，总能找到唯一的、确定的value。从Map中取出数据时，只要给出指定的key，就可以取出对应的value.<br>Map的实现类有HashMap、Hashtable、Properties、SortedMap等等。</p>
<p><img src="https://files.catbox.moe/0dfod3.png"></p>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="HashMap常用API"><a href="#HashMap常用API" class="headerlink" title="HashMap常用API"></a>HashMap常用API</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>put(K key,V value)</td>
<td>添加键值对</td>
</tr>
<tr>
<td>get(Object key)</td>
<td>根据键获取值</td>
</tr>
<tr>
<td>keySet()</td>
<td>获取keySet</td>
</tr>
<tr>
<td>entrySet()</td>
<td>获取entrySet</td>
</tr>
<tr>
<td>clear()</td>
<td>清空</td>
</tr>
<tr>
<td>containsKey(Object key)</td>
<td>判断是否存在key</td>
</tr>
<tr>
<td>remove(Object key)</td>
<td>根据key删除键值对</td>
</tr>
<tr>
<td>remover(Object key,Object value)</td>
<td>根据key和value删除键值对</td>
</tr>
<tr>
<td>size()</td>
<td>获取元素个数</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>判断map是否为空</td>
</tr>
</tbody></table>
<p>下面，通过示例学习HashMap的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        HashMap&lt;Integer,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,String&gt;();</span><br><span class="line">        <span class="comment">//添加键值对</span></span><br><span class="line">        map.put(<span class="number">1</span>,<span class="string">&quot;妲己&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="string">&quot;亚瑟&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="string">&quot;虞姬&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>,<span class="string">&quot;韩信&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>,<span class="string">&quot;蔡文姬&quot;</span>);</span><br><span class="line">        <span class="comment">//根据键获取值</span></span><br><span class="line">        System.out.println(map.get(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//获取keySet</span></span><br><span class="line">        <span class="keyword">for</span> (Integer i : map.keySet())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + i + <span class="string">&quot; value: &quot;</span> + map.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取entrySet</span></span><br><span class="line">        System.out.println(map.entrySet());</span><br><span class="line">        <span class="comment">//获取元素个数</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        <span class="comment">//判断是否存在key</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">//判断是否存在value</span></span><br><span class="line">        System.out.println(map.containsValue(<span class="string">&quot;程咬金&quot;</span>));</span><br><span class="line">        <span class="comment">//判断map是否为空</span></span><br><span class="line">        System.out.println(map.isEmpty());</span><br><span class="line">        <span class="comment">//根据key删除键值对</span></span><br><span class="line">        map.remove(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//根据key和value删除键值对</span></span><br><span class="line">        map.remove(<span class="number">4</span>,<span class="string">&quot;韩信&quot;</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//清空map</span></span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap存放元素流程"><a href="#HashMap存放元素流程" class="headerlink" title="HashMap存放元素流程"></a>HashMap存放元素流程</h3><p>HashMap元素存放是一个相对是复杂的过程，整个过程涉及到的有哈希表扩容，红黑树和链表的相互转换等过程，在本小节从源码查看整个过程。<br>在学习HashMap存放元素之前需要对HashMap中的几个关键成员变量进行了解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HashMap默认容量16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="comment">//HashMap最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">//HashMap负载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;;</span><br><span class="line"><span class="comment">//链表转换为红黑树的阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//红黑树转换为链表的阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"><span class="comment">//链表转换为红黑树时Hash表的容量阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"><span class="comment">//保存HashMap的Hash表</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">//HashMap中元素个数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure>

<p>HashMap添加元素会调用put(K key,V value)方法，从源码可以看出在put()方法内部调用了putVal()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">//调用putVal方法</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续查看putVal()方法，这个方法即HashMap存放元素的核心流程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">//判断哈希表是否为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)<span class="comment">//判断tab[i]是否有元素</span></span><br><span class="line">        <span class="comment">//如果没有元素则直接存放</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         Node&lt;K,V&gt; e; K k;</span><br><span class="line">         <span class="comment">//判断和已有节点的key是否相等</span></span><br><span class="line">         <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                 ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">             <span class="comment">//如果key相等则替换</span></span><br><span class="line">             e = p;</span><br><span class="line">         <span class="comment">//如果key不相等，判断哈希表已有的节点是不是红黑树</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">             <span class="comment">//如果是红黑树则以树的方式插入元素</span></span><br><span class="line">             e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">//如果不是红黑树则说明这里链表，遍历链表</span></span><br><span class="line">             <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                 <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                     p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                     <span class="comment">//如果链表长度大于等于7，则进制红黑树转换相关工作</span></span><br><span class="line">                     <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                         treeifyBin(tab, hash);</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                 	 <span class="comment">//如果key相等则在链表中替换</span></span><br><span class="line">                     <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                         ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                     </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    	<span class="comment">//如果元素个数大于临界值则扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这个方法内整个过程可以描述如下：</p>
<ol>
<li>判断底层hash表是否为空，如果为空则先扩容</li>
<li>如果不为空，根据存放元素的key计算在hash表中的位置</li>
<li>判断在计算出位置处是否有元素，如果没有元素则直接放入hash表，并直接跳转到第9步</li>
<li>如果计算出位置有元素判断key是否相等，如果相等则直接赋值</li>
<li>如果计算出位置有元素并且判断key不相等，判断此处的节点是否是红黑树，如果是红黑树则以树的方式插入</li>
<li>如果计算处位置有元素并且判断key不相等，并且此处节点不是红黑树，那么这个节点处的数据结构一定是链表，则遍历链表准备插入。</li>
<li>遍历链表如果新增元素和链表中元素key相等则替换，如果新增元素和链表中已有元素key都不相等，则在已有元素末尾链表插入。</li>
<li>如果链表长度大于8，判断hash表容量是否大于64，如果大于64则转换成红黑树，并以红黑树的方式插入元素。</li>
<li>添加元素后判断元素个数是否大于扩容阈值，如果大于则扩容。</li>
</ol>
<p>这9步完整的描述了HashMap添加元素的流程，描述如图：</p>
<p><img src="https://files.catbox.moe/zcfozq.png"></p>
<p><img src="https://files.catbox.moe/gqygu3.jpg"></p>
<h3 id="HashMap扩容流程"><a href="#HashMap扩容流程" class="headerlink" title="HashMap扩容流程"></a>HashMap扩容流程</h3><p>在上一小节中我们了解了HashMap添加元素的详细流程，在HashMap添加元素的过程中涉及到一个很重要的操作，那就是扩容。因为如果在HashMap内添加元素，当HashMap内部数组无法装载更多元素时，就需要扩大数组长度，以便放入更多元素，由于Java中数组是无法自动扩容的，这就需要创建一个新的数组替代已有的数组，在本小节内将详细了解HashMap的扩容机制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">//获取原有hash表</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">//获取原容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">//获取原阈值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果原容量大于0</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果原容量已经大于最大容量则不再扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果原容量的2倍小于最大容量，并且原容量小于默认容量10，就将扩容阈值修改为原阈值的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//如果当前hash表没有数据，则使用初始化的值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">//如果是第一次添加元素则使用默认容量16，扩容阈值为16*0.75=12</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    <span class="comment">//创建新的hash表</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//遍历hash表开始扩容</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">//如果原数据不为空，则将原数据复制到新数组</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">//如果链表只有一个节点，则直接复制</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">//如果元数据是红黑树</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//进行红黑树相关操作</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">//链表复制操作</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>纵观整个代码HashMap扩容时会存在以下几种情况：</p>
<ol>
<li>调用无参构造器时，实例化的HashMap底层数组是null，当第一次调用put()方法时进行扩容，初始容量为16。</li>
<li>调用有参构造指定了容量和负载因子时，会根据指定的正整数找到不小于指定容量的2的次幂，将这个数赋值给扩容阈值（threshold），当第一次put()方法时，会将阈值赋值给容量，并计算新的阈值&#x3D;容量x负载因子。</li>
<li>如果不是第一次扩容，则容量变为原容量的2倍，阈值也变为原来的2倍。</li>
</ol>
<p><strong>Java 7 和Java 8中HashMap的区别</strong><br>Java8中对HashMap进行了相关的调整，主要体现在以下几个方面：</p>
<ol>
<li>Java7中HashMap数据结构采用了数组+链表，而Java8中采用了数组+链表+红黑树，当链表长度大于8并且容量大于64时，会将链表转换成红黑树（注意，如果此时如果链表长度已经是8，但是数组长度并没有到64时会先进行扩容）。当红黑树节点个数小于等于6时会退化成链表。</li>
<li>Java7中链表使用的是头插法，但是使用头插法在多线程环境下有概率出现环形链表死循环的问题，在Java8中链表采用了尾插法以及使用了红黑树，避免了出现链表死循环的问题。</li>
</ol>
<h3 id="HashMap的遍历方式"><a href="#HashMap的遍历方式" class="headerlink" title="HashMap的遍历方式"></a>HashMap的遍历方式</h3><p>HashMap的遍历在开发中属于必备技能，HashMap的遍历方式有很多种，但是总的来说只有三种：</p>
<ol>
<li>获取keySet()后遍历keySet()获取到key然后通过key获取value</li>
<li>获取entrySet()后遍历entrySet()，相比于第一种写法稍显复杂，但是能更好的体现Map中的数据结构</li>
<li>使用Lambda表达式遍历，相比前两种是最简洁的方式，但是代码可读性略差在HashMap的遍历中，应该综合考虑性能、效率等因素做出合适的选择。下面通过实例学习HashMap的遍历。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示HashMap遍历的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForeachHashMap</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		map.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;计算机科学与技术&quot;</span>);</span><br><span class="line">		map.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;软件工程&quot;</span>);</span><br><span class="line">		map.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;网络工程&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//第一种：获取keySet()并遍历</span></span><br><span class="line">		Set&lt;String&gt; set = map.keySet();</span><br><span class="line">		<span class="comment">//获取迭代器</span></span><br><span class="line">		Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> it.next();</span><br><span class="line">			<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">			System.out.println(key+<span class="string">&quot;===================&quot;</span>+value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (; it.hasNext();) &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> it.next();</span><br><span class="line">			<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">			System.out.println(key+<span class="string">&quot;===================&quot;</span>+value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">			System.out.println(key+<span class="string">&quot;===================&quot;</span>+value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//第二种：获取Entry</span></span><br><span class="line">		Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">		<span class="comment">//使用迭代器</span></span><br><span class="line">		Iterator&lt;Map.Entry&lt;String, String&gt;&gt; entryIt = entrySet.iterator();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span> (entryIt.hasNext()) &#123;</span><br><span class="line">			Map.Entry&lt;String, String&gt; entry = entryIt.next();</span><br><span class="line">			<span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">			<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">			System.out.println(key+<span class="string">&quot;===================&quot;</span>+value);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (; entryIt.hasNext();) &#123;</span><br><span class="line">			Map.Entry&lt;String, String&gt; entry = entryIt.next();</span><br><span class="line">			<span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">			<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">			System.out.println(key+<span class="string">&quot;===================&quot;</span>+value);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">			<span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">			System.out.println(key+<span class="string">&quot;===================&quot;</span>+value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//第三种：Lambda表达式</span></span><br><span class="line">		map.forEach((key,value)-&gt;System.out.println(key+<span class="string">&quot;===================&quot;</span>+value));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下图所示：</p>
<p><img src="https://files.catbox.moe/og1pmr.png"></p>
<h3 id="HashMap和Hashtable"><a href="#HashMap和Hashtable" class="headerlink" title="HashMap和Hashtable"></a>HashMap和Hashtable</h3><p>HashMap 和 Hashtable 都是 Map 接口的典型实现类，它们之间的关系完全类似于 ArrayList 和 Vector的关系∶ Hashtable 是一个古老的 Map 实现类，它从 JDK 1.0起就已经出现了，当它出现时，Java还没有提供Map 接口，所以它包含了两个烦琐的方法，即 elements() 类似于 Map接口定义的 values()方法）和 keys() 类似于 Map 接口定义的 keySet()方法。<br>除此之外，Hashtable 和 HashMap 存在三点典型区别。</p>
<ul>
<li>Hashtable 是一个线程安全的 Map接口实现，但 HashMap 是线程不安全的实现，所以 HashMap 比 Hashtable 的性能高一点;但如果有多个线程访问同一个 Map 对象时，使用 Hashtable 实现类会更好。</li>
<li>Hashtable 不允许使用 null 作为 key 和 value，如果试图把 null 值放进 Hashtable 中，将会引发 NullPointerException 异常; 但 HashMap 可以使用 null 作为 key 或 value。</li>
<li>HashMap数组初始长度为16，扩容后长度是原长度的2倍，Hashtable初始长度为11，扩容后的长度是原长度的2n+1</li>
</ul>
<h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>HashMap也有一个LinkedHashMap子类;LinkedHashMap 也使用双向链表来维护 key-value 对的次序（其实只需要考虑 key 的次序），该链表负责维护 Map 的迭代顺序，迭代顺序与 key-value 对的插入顺序保持一致。 <br>LinkedHashMap 可以避免对 HashMap、Hashtable 里的 key-value 对进行排序（只要插入 key-value对时保持顺序即可），同时又可避免使用 TreeMap 所增加的成本（TreeMap的内容将会在下一小节学习）。 LinkedHashMap 需要维护元素的插入顺序，因此性能略低于 HashMap 的性能;但因为它以链表来维护内部顺序，所以在迭代访问 Map 里的全部元素时将有较好的性能，下面通过示例学习LinkedHashMap。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示LinkedHashMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMapDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		LinkedHashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;语文&quot;</span>, <span class="number">90</span>);</span><br><span class="line">		map.put(<span class="string">&quot;数学&quot;</span>, <span class="number">100</span>);</span><br><span class="line">		map.put(<span class="string">&quot;英文&quot;</span>, <span class="number">82</span>);</span><br><span class="line">		</span><br><span class="line">		Set&lt;String&gt; set = map.keySet();</span><br><span class="line">		<span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">			System.out.println(key+<span class="string">&quot;================&quot;</span>+map.get(key));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用Properties读写文件"><a href="#使用Properties读写文件" class="headerlink" title="使用Properties读写文件"></a>使用Properties读写文件</h2><p>Properties 类是 Hashtable 类的子类，该对象在处理属性文件时特别方便（Windows 操作平台上的 ini 文件就是一种属性文件）。Properties 类可以把 Map 对象和属性文件关联起来，从而可以把Map 对象中的 key-value 对写入属性文件中，也可以把属性文件中的”属性名&#x3D;属性值”加载到 Map 对象中。由于属性文件里的属性名、属性值只能是字符串类型，所以 Properties 里的 key、 value 都是字符串类型。该类提供了如下三个方法来修改 Properties 里的 key、value 值。</p>
<ul>
<li>String getProperty(String key)∶获取 Properties 中指定属性名对应的属性值，类似于 Map 的 get（Object key）方法。</li>
<li>String getProperty(String key，String defaultValue)∶该方法与前一个方法基本相似。该方法多一个功能，如果 Properties 中不存在指定的 key 时，则该方法指定默认值。</li>
<li>Object setProperty(String key， String value)∶设置属性值，类似于Hashtable 的 put() 方法。除此之外，它还提供了两个读写属性文件的方法。</li>
<li>void load(InputStream inStream)∶ 从属性文件（以输入流表示）中加载 key-value 对，把加载到的 key-value 对追加到 Properties 里（Properties 是 Hashtable 的子类，它不保证 key-value 对之间的次序）。</li>
<li>void store(OutputStream out， String comments)∶将 Properties 中的 key-value 对输出到指定的属性 文件（以输出流表示）中。 上面两个方法中使用了InputStream 类和 OutputStream 类，它们是 Java IO 体系中的两个基类，关于流的内容在后续章节讲解。下面通过示例先演示基本用法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示Properties类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">		<span class="comment">//--------------------读取数据--------------------------//</span></span><br><span class="line">		<span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">		properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;data.properties&quot;</span>)));</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(username);</span><br><span class="line">		System.out.println(password);</span><br><span class="line">		<span class="comment">//--------------------写数据--------------------------//</span></span><br><span class="line">		<span class="type">Properties</span> <span class="variable">properties2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">		properties2.setProperty(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;123431&quot;</span>);</span><br><span class="line">		properties2.store(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;data.properties&quot;</span>)), <span class="string">&quot;token&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例分别演示了Properties读写配置文件，在JDBC中将会使用配置文件配置数据库连接信息。</p>
<h2 id="SortedMap和TreeMap"><a href="#SortedMap和TreeMap" class="headerlink" title="SortedMap和TreeMap"></a>SortedMap和TreeMap</h2><p>Map 接口也派生出一个 SortedMap 子接口，SortedMap 接口也有一个 TreeMap 实现类。 TreeMap 就是一个红黑树数据结构，每个 key-value 对即作为红黑树的一个节点。TreeMap 存储 key-value 对（节点）时，需要根据 key 对节点进行排序。TreeMap 可以保证所有的 key-value 对处于有序状态。TreeMap 也有两种排序方式。</p>
<ul>
<li>自然排序∶TreeMap的所有key 必须实现 Comparable 接口，而且所有的 key 应该是同一个类的 对象，否则将会抛出 ClassCastException 异常。</li>
<li>定制排序∶ 创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有key进行排序。采用定制排序时不要求 Map 的 key 实现 Comparable 接口。 类似于 TreeSet 中判断两个元素相等的标准，TreeMap 中判断两个 key 相等的标准是∶ 两个 key 通过 compareTo()方法返回 0，TreeMap 即认为这两个 key 是相等的。</li>
</ul>
<p>如果使用自定义类作为 TreeMap 的 key，且想让 TreeMap 良好地工作，则重写该类的 equals()方法和 compareTo（方法时应保持一致的返回结果∶ 两个 key 通过 equals()方法比较返回 true 时，它们通过 compareTo()方法比较应该返回 0。如果 equals()方法与 compareTo()方法的返回结果不一致， TreeMap与 Map 接口的规则就会冲突。<br>TreeMap 中也提供了一系列根据 key 顺序访问 key-value 对的方法。</p>
<ul>
<li>Map.Entry firstEntry()∶ 返回该 Map 中最小 key 所对应的 key-value 对，如果该Map为空，则返回 null。</li>
<li>Object firstKey()∶返回该 Map 中的最小 key值，如果该 Map为空，则返回 null。</li>
<li>Map.Entry lastEntry()∶ 返回该 Map 中最大 key 所对应的 key-value 对，如果该 Map为空或不存 在这样的 key-value 对，则都返回 null。</li>
<li>Object lastKey()∶ 返回该 Map 中的最大 key 值，如果该 Map 为空或不存在这样的 key，则都返回nulI。</li>
<li>Map.Entry higherEntry(Object key)∶ 返回该 Map 中位于key 后一位的 key-value 对（即大于指定 key 的最小 key 所对应的 key-value 对）。如果该 Map 为空，则返回 null。</li>
<li>Object higherKey(Object key)∶返回该 Map 中位于key 后一位的 key 值（即大于指定 key 的最小 key 值）。如果该 Map 为空或不存在这样的 key-value 对，则都返回 null。</li>
<li>Map.Entry lowerEntry(Object key)∶ 返回该 Map 中位于key 前一位的 key-value 对（即小于指定 key 的最大 key 所对应的 key-value 对）。如果该 Map 为空或不存在这样的 key-value 对，则都返回 null。</li>
<li>Object lowerKey(Object key)∶返回该Map 中位于key前一位的 key 值（即小于指定 key 的最大 key 值）。如果该 Map 为空或不存在这样的 key，则都返回 null。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;Integer,String&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;Integer,String&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="string">&quot;刘能&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="string">&quot;谢广坤&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="string">&quot;赵四&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>,<span class="string">&quot;王大拿&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>,<span class="string">&quot;宋晓峰&quot;</span>);</span><br><span class="line">        <span class="comment">//返回该 Map 中最小 key 所对应的 key-value 对，如果该Map为空，则返回 null。</span></span><br><span class="line">        System.out.println(map.firstEntry());</span><br><span class="line">        <span class="comment">//返回该 Map 中的最小 key值，如果该 Map为空，则返回 null。&gt; Map.Entry lastEntry（）∶ 返回该 Map 中最大 key 所对应的 key-value 对，如果该 Map为空或不存在这样的 key-value 对，则都返回 null。</span></span><br><span class="line">        System.out.println(map.firstKey());</span><br><span class="line">        <span class="comment">//返回该 Map 中的最大 key 值，如果该 Map 为空或不存在这样的 key，则都返回nulI。</span></span><br><span class="line">        System.out.println(map.lastKey());</span><br><span class="line">        <span class="comment">//返回该 Map 中位于key 后一位的 key 值（即大于指定 key 的最小key 值）。如果该 Map 为空或不存在这样的 key-value 对，则都返回 nul 。</span></span><br><span class="line">        System.out.println(map.higherKey(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//返回该 Map 中位于key 后一位的 key-value 对（即大于指定key 的最小 key 所对应的 key-value 对）。如果该 Map 为空，则返回 null。</span></span><br><span class="line">        System.out.println(map.higherEntry(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//返回该Map 中位于key前一位的 key 值（即小于指定 key 的最大key 值）。如果该 Map 为空或不存在这样的 key，则都返回 null。</span></span><br><span class="line">        System.out.println(map.lowerKey(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//返回该 Map 中位于key 前一位的 key-value 对（即小于指定key 的最大 key 所对应的 key-value 对）。如果该 Map 为空或不存在这样的 key-value 对，则都返回 null。</span></span><br><span class="line">        System.out.println(map.lowerEntry(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="各Map性能分析"><a href="#各Map性能分析" class="headerlink" title="各Map性能分析"></a>各Map性能分析</h2><p>对于 Map 的常用实现类而言，虽然 HashMap 和 Hashtable 的实现机制几乎一样，但由于Hashtable是一个古老的、线程安全的集合，因此 HashMap 通常比 Hashtable 要快。<br> TreeMap 通常比 HashMap、Hashtable 要慢（尤其在插入、删除 key-value 对时更慢），因为 TreeMap底层采用红黑树来管理 key-value 对（红黑树的每个节点就是一个 key-value 对）。 使用 TreeMap 有一个好处∶ TreeMap 中的 key-value 对总是处于有序状态，无须专门进行排序操作。当 TreeMap 被填充之后，就可以调用 keySet() ，取得由key 组成的 Set，然后使用 toArray()方法生成 key的数组，接下来使用 Arrays 的 binarySearch() 方法在已排序的数组中快速地查询对象。<br> 对于一般的应用场景，程序应该多考虑使用 HashMap，因为 HashMap 正是为快速查询设计的（HashMap 底层其实也是采用数组来存储 key-value 对）。但如果程序需要一个总是排好序的 Map 时，则可以考虑使用TreeMap。 LinkedHashMap 比 HashMap 慢一点，因为它需要维护链表来保持 Map中 key-value 时的添加顺序。</p>
]]></content>
  </entry>
  <entry>
    <title>Java常见排序算法</title>
    <url>/2022/08/03/Java%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>
<p><img src="https://files.catbox.moe/6jqfd2.gif"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = &#123;<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>]) &#123;</span><br><span class="line">					<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span>a[j];</span><br><span class="line">					a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">					a[j+<span class="number">1</span>] =temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><ol>
<li>在长度为N的无序数组中，第一次遍历n-1个数，找到最小的数与第一个元素交换</li>
<li>第二次遍历n-2个数，找到最小的数值与第二个元素交换</li>
<li>重复以上步骤</li>
<li>第n-1词遍历，找到最小的数值与第n-1的元素交换，排序完成<img src="https://files.catbox.moe/6jqfd2.gif"></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = &#123;<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">85</span>,<span class="number">1</span>,<span class="number">9</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="comment">//定义此轮循环最小数放置的位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="comment">//从第2个数依次和后面的数进行对比</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                <span class="comment">//如果minIndex的数比j大则记录j</span></span><br><span class="line">				<span class="keyword">if</span>(a[minIndex]&gt;a[j]) &#123;</span><br><span class="line">					minIndex=j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="keyword">if</span>(minIndex!=i)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[minIndex];</span><br><span class="line">                a[minIndex] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">                System.out.println(<span class="string">&quot;每次结果&gt;&gt;&gt;&quot;</span>+Arrays.toString(a));</span><br><span class="line">            &#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;每轮结果===&quot;</span>+Arrays.toString(a));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><ol>
<li>在要排序的无序数组中，假定n-1个数已经排好序，现在将第n个数插入到前面的有序数列中，使得这个n个数也是拍好序的，反复循环，直到全部排好顺序。插入排序也可以理解为从第二个数开始，前面的相邻的数依次两两对比，如果后面的数比前面的数小，则交换位置。（如果实在理解不了，可以类比冒泡排序，把插入排序理解为一种特殊的冒泡排序）</li>
</ol>
<p><img src="https://files.catbox.moe/hzemg8.gif"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a = &#123;<span class="number">87</span>,<span class="number">86</span>,<span class="number">82</span>,<span class="number">10</span>,<span class="number">30</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &gt;<span class="number">0</span>; j--) &#123;</span><br><span class="line">				<span class="keyword">if</span>(a[j]&lt;a[j-<span class="number">1</span>]) &#123;</span><br><span class="line">					<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[j];</span><br><span class="line">					a[j] = a[j-<span class="number">1</span>];</span><br><span class="line">					a[j-<span class="number">1</span>] = temp;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                	<span class="keyword">break</span>;   </span><br><span class="line">                &#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;每次结果===&quot;</span>+Arrays.toString(a));</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;轮结果&gt;&gt;&gt;&quot;</span>+Arrays.toString(a));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序有两种实现方式：双边循环法和挖坑法，思路如下：<br><strong>快速排序</strong></p>
<ol>
<li>定义左右指针，并选取一个数作为基准（通常选择数组第一个）</li>
<li>移动右指针，如果右指针的数小于基准数，则停止移动，反之则继续移动</li>
<li>移动左指针，如果左指针的数大于基准数，则停止移动，反之则继续移动</li>
<li>当左右指针都停止移动时交换左右指针处的数</li>
<li>当左右两个指针停在相同位置时，交换指针处的数和基准数的位置</li>
<li>将数组以左右指针位置处一分为二重复上述步骤。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 双边循环</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">pivotIndex</span><span class="params">(<span class="type">int</span>[]ary,<span class="type">int</span> startIndex,<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">		<span class="comment">//保存左右两个指针，从第一个元素和最后一个元素开始</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> startIndex;</span><br><span class="line">		<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> endIndex;</span><br><span class="line">		<span class="comment">//获取基准，一般选择数组第一个数</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> ary[startIndex];</span><br><span class="line">		<span class="comment">//大循环，当左右两个指针不相等时，左指针右移，右指针左移</span></span><br><span class="line">		<span class="keyword">while</span> (left!=right) &#123;</span><br><span class="line">			<span class="comment">//右边指针向左移动，当对应元素大于基准数时继续移动，小于基准数时停止移动</span></span><br><span class="line">			<span class="keyword">while</span>(right&gt;left&amp;&amp;ary[right]&gt;=pivot) &#123;</span><br><span class="line">				right--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//左边指针向右移动，当小于基准数时继续移动，大于基准数时停止移动</span></span><br><span class="line">			<span class="keyword">while</span> (right&gt;left&amp;&amp;ary[left]&lt;=pivot) &#123;</span><br><span class="line">				left++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//此时如果左边指针小于右边指针时；左右指针交换元素</span></span><br><span class="line">			<span class="keyword">if</span>(left&lt;right) &#123;</span><br><span class="line">				<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> ary[right];</span><br><span class="line">				ary[right] = ary[left];</span><br><span class="line">				ary[left] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> left;</span><br><span class="line">		<span class="comment">//如果两个指针相等时,交换基准元素和当前位置的数</span></span><br><span class="line">		ary[startIndex] = ary[index];</span><br><span class="line">		ary[index] = pivot;</span><br><span class="line">		<span class="keyword">return</span> index;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">qucikSort</span><span class="params">(<span class="type">int</span>[] ary,<span class="type">int</span> startIndex,<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(startIndex&gt;endIndex) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> pivotIndex(ary,startIndex,endIndex);</span><br><span class="line">		qucikSort(ary, startIndex, index-<span class="number">1</span>);</span><br><span class="line">		qucikSort(ary, index+<span class="number">1</span>, endIndex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span>[] a= &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>&#125;;</span><br><span class="line">		qucikSort(a, <span class="number">0</span>, a.length-<span class="number">1</span>);</span><br><span class="line">		System.out.println(Arrays.toString(a));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>挖坑法</strong></p>
<ol>
<li>选取起始位置作为标记位（也就是坑），选取一个数作为基准，通常是数组第一个</li>
<li>从数组第二数开始依次和基准数对比，如果比基准数小，则扩大小于基准数的区间，也就是mark++，并将该数与标mark处的数交换</li>
<li>循环结束后，将mark处的数和基准数进行交换</li>
<li>以mark为界，将数组一分为二重复上述步骤</li>
</ol>
<p><img src="https://files.catbox.moe/dcwsxe.gif"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单边循环</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QucikSort2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">pivotIndex</span><span class="params">(<span class="type">int</span>[] ary,<span class="type">int</span> startIndex,<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">mark</span> <span class="operator">=</span> startIndex;</span><br><span class="line">		<span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> ary[startIndex];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex+<span class="number">1</span>; i &lt;= endIndex; i++) &#123;</span><br><span class="line">			<span class="comment">//如果指针指向的元素小于基准元素，干两件事情</span></span><br><span class="line">			<span class="comment">//1.mark+1,扩大小于基准数的区间</span></span><br><span class="line">			<span class="comment">//2.将指针所指向的数和mark位置处的数进行交换</span></span><br><span class="line">			<span class="keyword">if</span>(ary[i]&lt;pivot) &#123;</span><br><span class="line">				mark++;</span><br><span class="line">				<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> ary[i];</span><br><span class="line">				ary[i] = ary[mark];</span><br><span class="line">				ary[mark] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//当循环结束时将mark位置的数和基准数进行交换</span></span><br><span class="line">		ary[startIndex]= ary[mark]; </span><br><span class="line">		ary[mark] = pivot;</span><br><span class="line">		<span class="keyword">return</span> mark;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] ary,<span class="type">int</span> startIndex,<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(startIndex&gt;endIndex) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> pivotIndex(ary, startIndex, endIndex);</span><br><span class="line">		quickSort(ary, startIndex, index-<span class="number">1</span>);</span><br><span class="line">		quickSort(ary, index+<span class="number">1</span>, endIndex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span> [] a = &#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br><span class="line">		quickSort(a, <span class="number">0</span>, a.length-<span class="number">1</span>);</span><br><span class="line">		System.out.println(Arrays.toString(a));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">int</span> [] a = &#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">				<span class="type">int</span> temp;</span><br><span class="line">				<span class="keyword">if</span>(a[i]&lt;a[j]) &#123;</span><br><span class="line">					temp = a[j];</span><br><span class="line">					a[j] = a[i];</span><br><span class="line">					a[i] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;每次&quot;</span>+Arrays.toString(a));</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;每轮&quot;</span>+Arrays.toString(a));</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;最后&quot;</span>+Arrays.toString(a));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>
<p><img src="https://files.catbox.moe/yk7q42.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] shellSort(<span class="type">int</span> ary[],<span class="type">int</span> length)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> length;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            gap = gap/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//根据增量将数组分为若干子序列</span></span><br><span class="line">            <span class="comment">//K表示第几个子序列</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;k&lt;gap;k++)&#123;</span><br><span class="line">                <span class="comment">//对子序列插入排序</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k+gap;i&lt;length;i+=gap)&#123;</span><br><span class="line">                    <span class="comment">//因为是相隔gap的元素插入排序，所以j-=jap</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;k;j-=gap)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(ary[j]&lt;ary[j-gap])&#123;</span><br><span class="line">                             temp = ary[j-gap];</span><br><span class="line">                             ary[j-gap] = ary[j];</span><br><span class="line">                             ary[j] = temp;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(<span class="string">&quot;每次结果：&gt;&gt;&gt;&quot;</span>+Arrays.toString(ary)); </span><br><span class="line">                    &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;每轮结果：---&quot;</span>+Arrays.toString(ary));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(gap==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] ary = &#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(shellSort(ary, ary.length)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>基数排序的思路非常简单，首先创建数组，然后将每个数放到相应的位置（例如6放在下标为6的数组位置）；最后遍历数组，即为排序后的结果。</p>
<ol>
<li><p>基数排序先排好个位，然后排好在排好个位的基础上排十位，以此类推，直到遍历最高位次，排序结束。</p>
</li>
<li><p>基数排序不是比较排序，而是通过分配和收集的过程来实现排序。</p>
</li>
<li><p>初始化10个桶，桶下标为0-9</p>
</li>
<li><p>通过得到待排序数字的个十百等位的数字，把这个数字对应的item放到对应的桶中</p>
</li>
<li><p>基数排序有两种排序方式：LSD和MSD，最小位有限（从右边开始）和最大位优先（从左边开始）。</p>
<p>​</p>
</li>
</ol>
<p><img src="https://files.catbox.moe/1woylv.gif"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] array,<span class="type">int</span> d)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">1</span>;<span class="comment">//代表位数对应的数：1,10,100...</span></span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;<span class="comment">//保存每一位排序后的结果用于下一位的排序输入</span></span><br><span class="line">    <span class="type">int</span> length=array.length;</span><br><span class="line">    <span class="type">int</span>[][] bucket=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][length];<span class="comment">//排序桶用于保存每次排序后的结果，这一位上排序结果相同的数字放在同一个桶里</span></span><br><span class="line">    <span class="type">int</span>[] order=<span class="keyword">new</span> <span class="title class_">int</span>[length];<span class="comment">//用于保存每个桶里有多少个数字</span></span><br><span class="line">    <span class="keyword">while</span>(n&lt;d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:array) <span class="comment">//将数组array里的每个数字放在相应的桶里</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> digit=(num/n)%<span class="number">10</span>;</span><br><span class="line">            bucket[digit][order[digit]]=num;</span><br><span class="line">            order[digit]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)<span class="comment">//将前一个循环生成的桶里的数据覆盖到原数组中用于保存这一位的排序结果</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(order[i]!=<span class="number">0</span>)<span class="comment">//这个桶里有数据，从上到下遍历这个桶并将数据保存到原数组中</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;order[i];j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    array[k]=bucket[i][j];</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            order[i]=<span class="number">0</span>;<span class="comment">//将桶里计数器置0，用于下一次位排序</span></span><br><span class="line">        &#125;</span><br><span class="line">        n*=<span class="number">10</span>;</span><br><span class="line">        k=<span class="number">0</span>;<span class="comment">//将k置0，用于下一轮保存位排序结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序（MERGE-SORT）是利用<strong>归并</strong>的思想实现的排序方法，该算法采用经典的<strong>分治</strong>（divide-and-conquer）策略（分治法将问题<strong>分</strong>(divide)成一些小的问题然后递归求解，而**治(conquer)**的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p>
<ol>
<li>把长度为n的数组分成两个长度为n&#x2F;2的子序列</li>
<li>对这两个子数组分别采用归并排序</li>
<li>将两个排序号的子数组合并成一个最终的排序数组</li>
</ol>
<p>首先考虑下如何将2个有序数列合并。这个非常简单，只要从比较2个数列的第一个数，谁小就先取谁。</p>
<p><img src="https://files.catbox.moe/nczkjt.png"></p>
<p><img src="https://files.catbox.moe/ufmir0.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> ary[])</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[ary.length];</span><br><span class="line">        sort(ary,<span class="number">0</span>,ary.length-<span class="number">1</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] ary,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//左侧子数组归并排序</span></span><br><span class="line">            sort(ary,left,mid,temp);</span><br><span class="line">            <span class="comment">//右侧子数组归并排序</span></span><br><span class="line">            sort(ary,mid+<span class="number">1</span>,right,temp);</span><br><span class="line">            <span class="comment">//合并子数组</span></span><br><span class="line">            merge(ary, left, mid, right, temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] ary,<span class="type">int</span> left,<span class="type">int</span> mid,<span class="type">int</span> right,<span class="type">int</span>[]temp)</span>&#123;</span><br><span class="line">        <span class="comment">//左指针序列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="comment">//右指针序列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//临时指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ary[i]&lt;=ary[j])&#123;</span><br><span class="line">                temp[t++]=ary[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp[t++]=ary[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将左边剩余的元素填充进temp中</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">            temp[t++]=ary[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将右边剩余元素填充进temp中</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=right)&#123;</span><br><span class="line">            temp[t++] = ary[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将temp中的元素全部拷贝到原数组</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            ary[left++] = temp[t++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []arr = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>堆排序是利用<strong>堆</strong>这种数据结构而设计的一种排序算法，堆排序是一种<strong>选择排序，</strong>它的最坏，最好，平均时间复杂度均为O(nlogn)<br><strong>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图：</strong></p>
<p><img src="https://files.catbox.moe/7ktiss.png"></p>
<p>该数组从逻辑上讲就是一个堆结构，我们用简单的公式来描述一下堆的定义就是：<br>**大顶堆：arr[i] &gt;&#x3D; arr[2i+1] &amp;&amp; arr[i] &gt;&#x3D; arr[2i+2] **<br>**小顶堆：arr[i] &lt;&#x3D; arr[2i+1] &amp;&amp; arr[i] &lt;&#x3D; arr[2i+2] **<br><strong>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line">        buildMaxHeap(arr, len);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(arr, <span class="number">0</span>, i);</span><br><span class="line">            len--;</span><br><span class="line">            heapify(arr, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildMaxHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(len / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            heapify(arr, i, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">largest</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">            largest = left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">            largest = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">            swap(arr, i, largest);</span><br><span class="line">            heapify(arr, largest, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<ol>
<li>计数排序的特征<br>  当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。<br>  由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序中的算法来排序数据范围很大的数组。<br>  通俗地理解，例如有 10 个年龄不同的人，统计出有 8 个人的年龄比 A 小，那 A 的年龄就排在第 9 位,用这个方法可以得到其他每个人的位置,也就排好了序。当然，年龄有重复时需要特殊处理（保证稳定性），这就是为什么最后要反向填充目标数组，以及将每个数字的统计减去 1 的原因。<br>  算法的步骤如下：</li>
</ol>
<p>  <img src="https://files.catbox.moe/iqrgu4.gif"></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountingSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> getMaxValue(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> countingSort(arr, maxValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] countingSort(<span class="type">int</span>[] arr, <span class="type">int</span> maxValue) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bucketLen</span> <span class="operator">=</span> maxValue + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[bucketLen];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value : arr) &#123;</span><br><span class="line">            bucket[value]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sortedIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                arr[sortedIndex++] = j;</span><br><span class="line">                bucket[j]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMaxValue</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxValue &lt; value) &#123;</span><br><span class="line">                maxValue = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>
<ol>
<li>在额外空间充足的情况下，尽量增大桶的数量</li>
<li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li>
</ol>
<p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。<br>元素分配在桶中：</p>
<p><img src="https://files.catbox.moe/paqbk0.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BucketSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">InsertSort</span> <span class="variable">insertSort</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InsertSort</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 对 arr 进行拷贝，不改变参数内容</span></span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bucketSort(arr, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] bucketSort(<span class="type">int</span>[] arr, <span class="type">int</span> bucketSize) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">minValue</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &lt; minValue) &#123;</span><br><span class="line">                minValue = value;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; maxValue) &#123;</span><br><span class="line">                maxValue = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">bucketCount</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[][] buckets = <span class="keyword">new</span> <span class="title class_">int</span>[bucketCount][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用映射函数将数据分配到各个桶中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor((arr[i] - minValue) / bucketSize);</span><br><span class="line">            buckets[index] = arrAppend(buckets[index], arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">arrIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] bucket : buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucket.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对每个桶进行排序，这里使用了插入排序</span></span><br><span class="line">            bucket = insertSort.sort(bucket);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> value : bucket) &#123;</span><br><span class="line">                arr[arrIndex++] = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动扩容，并保存数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arrAppend(<span class="type">int</span>[] arr, <span class="type">int</span> value) &#123;</span><br><span class="line">        arr = Arrays.copyOf(arr, arr.length + <span class="number">1</span>);</span><br><span class="line">        arr[arr.length - <span class="number">1</span>] = value;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常见排序的复杂度"><a href="#常见排序的复杂度" class="headerlink" title="常见排序的复杂度"></a>常见排序的复杂度</h1><p><img src="https://files.catbox.moe/o07v4f.png"></p>
]]></content>
  </entry>
  <entry>
    <title>Java发展简史</title>
    <url>/2022/08/03/Java%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<p><strong>1991年4月，</strong>由James Gosling博士领导的绿色计划（Green Project)开始启动，此计划的目的是开发一种能够在各种消费型电子产品（如机顶盒、冰箱、收音机等）上运行的程序架构。这个计划的产品就是Java语言的前身——Oak，Oak当时在消费品市场上并不算成功，但随着1995年互联网潮流的兴起， Oak迅速找到了最适合自己发展的市场定位并蜕变成为 Java语言。<br><strong>1992 年3月，</strong>由于Oak已被用作另一种已存在的编程语言名称，因此必须选一个新的名字——Java。 Java 的灵感来源于咖啡，据说James Gosling 研发小组的工程师经常喝的咖啡就产自印度尼西亚的爪哇岛(Java）上所种植的咖啡豆。<br><strong>1993年2月,</strong> Sun Microsystems的子公司 FirstPerson试图从时代华纳获得一个电视机顶盒交互系统的一系列订单。在那时，由于绿色计划不是很成功，随即失去了时代华纳的订单，于是开发的重心从家庭消费电子产品转移到了电视机顶盒的相关平台上。<br><strong>1995年5月23日,</strong> Oak语言更名为Java,并且在 Sun World大会上正式发布Java 1.0版本。Java 语言第一次提出了“Write Once, Run Anywhere”的口号。<br><strong>1996年1月23日，</strong>JDK 1.0发布，Java语言有了第一个正式版本的运行环境，JDK 1.0提供了一个解释执行的Java 虚拟机实现(Sun Classic VM) 。JDK1.0版本的代表技术包括 Java虚拟机、Applet 以及 AWT等。<br><strong>1996年4月，10个最主要的操作系统供应商申明，将在其产品中嵌入Java 技术。同年9月，已有大约8.3万个网页应用了 Java技术来制作。在1996年5月底</strong>，Sun 公司于美国旧金山举行了首届JavaOne大会，从此JavaOne成为全世界数百万Java语言开发者每年一度的技术盛会。<br><strong>1997年2月19日，</strong> Sun公司发布了JDK 1.1, Java 技术的一些最基础的支撑点9（如 JDBC等）都是在JDK1.1版本中发布的 JDK 1.1版的技术代表有JAR文件格式、JDBC、 JavaBeans 和 RMI. Java语法也有了一定的发展，如内部类(Inner Class)和反射（Reflection)都是在这个时候出现的。</p>
<blockquote>
<p>从1.1.47后，每个JDK版本都有一个自己的名字(工程代号)，分别为JDK 1.1.4 - Sparkler （宝石）JDK1.1:5- Pumpkin（南瓜) JDK1.1.6- Abigail(阿比盖尔，女子名)、JDK1.1.7- Brutus(布鲁图，古罗马政治家和将军)和JDK1.1.8- Chelsea(切尔西，城市名)。</p>
</blockquote>
<p><strong>1998年12月4日，</strong>JDK迎来了一个里程碑式的版本JDK1.2, 工程代号为Playground(竞技场)Sun公司在这个版本中把Java 技术体系拆分为3个方向，分别是面向桌面应用开发的J2SE (Java 2 Platform, StandardEdition）、面向企业级开发的J2EE (Java 2 Platform, Enterprise Edition)和面向手机等移动终端开发的J2ME (Java 2 Platform, Micro Edition）。在这个版本中出现的代表性技术非常多，如EJB、Java Plug-in、Java IDL 以及 Swing等，并且这个版本中Java 虚拟机第一次内置了 JIT (Just In Time)编译器（JDK 1.2中曾并存过3个虚拟机， Classic VMs HotSpot VM 和 Exact VM， 其中 Exact VM 只在 Solaris平台出现过:后面两个虚拟机都是内置JIT编译器的，而之前版本所带的 Classic VM只能以外挂的形式使用JIT编译器)。在语言和API级别上，Java 添加了 strictfp关键字与现在 Java编码之中极为常用的一系列 Collections集合类。在1999年3月和7月，分别有JDK 1.2.1和JDK1.2.2两个小版本发布。<br><strong>1999年4月27日,</strong> HotSpot 虚拟机发布。HotSpot 最初由一家名为“Longview Technologies”的小公司开发，因为 HotSpot 的优异表现，这家公司在1997年被Sun公司收购了。HotSpot 虚拟机发布时是作为JDK 1.2的附加程序提供的，后来它成为了JDK1.3及之后所有版本的Sun JDK 的默认虚拟机。<br><strong>2000年5月8日，</strong>工程代号为 Kestrel(美洲红)的JDK 1.3发布，JDK 1.3相对于JDK 1.2的改进主要表现在一些类库上(如数学运算和新的 Timer API等)，JNDI服务从JDK 1.3开始被作为一项平台级服务提供(以前JNDI仅仅是一项扩展)，使用CORBA IIOP来实现RMI的通信协议等。这个版本还对 Java 2D做了很多改进，提供了大量新的 Java 2D API，并且新添加了 JavaSound类库。JDK 1.3有一个修正版本JDK 1.3.1,工程代号为 Ladybird（瓢虫)，于2001年5月17日发布。<br>从MJDK1.3开始, Sun 公司维持了一个习惯:大约每隔两年发布一个JDK的主版本，以动物名作为工程代号，期间发布的各个修正版本则以昆虫名作为工程代号。<br><strong>2002年2月13日，</strong> JDK1.4发布，工程代号为Merlin （灰背)。<br><strong>2002年9月16日，</strong>发布了工程代号为Grasshopper （蚱蜢)的JDK 1.4.1。</p>
<blockquote>
<p>JDK1.4是Java真正走向成熟的一个版本,Compaq、 Fujitsu、 SAS、 Symbian 以及IBM等著名公司都有参与甚至实现自己独立的JDK 1.4。哪怕是在十多年后的今天，仍然有许多主流应用（Spring、 Hibernate 以及 Struts等)能直接运行在JDK 1.4之上，或者继续发布能运行在JDK 1.4上的版本。</p>
</blockquote>
<p><strong>2003年6月26日，</strong>发布了工程代号为Mantis（螳螂)的JDK1.4.2。<br><strong>2004年9月30 日，</strong>JDK1.5发布，工程代号 Tiger（老虎)。从JDK 1.2发布以来，Java在语法层面上的变换一直很小，而JDK1.5在 Java语法易用性上做出了非常大的改进。例如，自动装箱、泛型、动态注解、枚举、可变长参数以及遍历循环(foreach 循环)等语法特性都是在JDK 1.5中加入的。在虚拟机和API层面上，这个版本改进了 Java的内存模型(Java Memory Model, JMM)，提供了 java.util.concurrent 并发包等。另外,JDK 1.5是官方声明可以支持Windows 9x平台的最后一个JDK版本。<br><strong>2006年12月11日，</strong>JDK1.6发布，工程代号 Mustang（野马)。在这个版本中，Sun公司终结了从JDK 1.2开始已经有8年历史的J2EE、J2SE 和 J2ME的命名方式，启用Java SE 6、 Java EE 6和Java ME 6的命名方式。JDK 1.6的改进包括提供动态语言支持(通过内置 Mozilla Java Rhino引擎实现)、提供编译API 和微型HTTP服务器API等。同时，这个版本对Java 虚拟机内部做了大量改进，包括锁与同步、垃收集以及类加载等方面的算法都有相当多的改动。<br>在 <strong>2006年11月13日</strong>的 JavaOne大会上,Sun 公司宣布最终会将Java开源，并在随后的一年多时间内，陆续将JDK的各个部分在GPL v2 (GNU General Public License v2)协议下公开了源码，并建立了OpenJDK组织对这些源码进行独立管理。除了极少量的产权代码外（Encumbered Code，这部分代码大多是Sun公司本身也无权限进行开源处理的），OpenJDK几乎包括了Sun JDK的全部代码外，OpenJDK的质量主管曾经表示，在JDK 1.7中，Sun JDK 和 OpenJDK 除了代码文件头的版权注释之外，代码基本上完全一样，所以OpenJDK7与Sun JDK 1.7本质上就是同套代码库开发的产品。<br>JDK1.6发布以后，由于代码复杂性的增加、JDK开源、开发 JavaFX、经济危机及Sun 公司收购案等原因，SUN公司在JDK发展以外的事情上耗费了很多资源，JDK的更新没有再维持两年发布一个主版本的发展速度。JDK1.6到目前为止一共发布了37个 Update版本，最新的版本为 Java SE 6 Update 37, 于2012年10月16日发布，2009年2月19日，工程代号为Dophin (海豚)的JDK 1.7完成了其第一个里程碑版本。 根据 JDK 1.7 的功能规划，一共设置了 10个里程碑。最后一个里程碑版本原计划于2010年9月9日结束，但由于各种原因JDK1.7最终无法按计划完成。<br>MJDK1.7最开始的功能规划来看，它本应是一个包含许多重要改进的JDK版本，其中的 Lambda 项目 (Lambda表达式、函数式编程)、Jigsaw项目(虚拟机模块化支持)、动态语言支持、GarbageFirst 收集器和 Coin项目(语言细节进化)等子项目对于 Java业界都会产生深远的影响。在JDK1.7开发期间， Sun 公司由于相继在技术竞争和商业竞争中都陷入泥潭，公司的股票市值跌至仅有高峰时期的3%， 已无力推动 JDK1.7的研发工作按正常计划进行。为了尽快结束JDK 1.7长期“跳票”的问题，Oracle公司收购Sun 公司后不久便宣布将实行“B计划”。<br>大幅裁剪了JDK 1.7 预定目标，以便保证JDK 1.7的正式版能够于2011年7月28日准时发布。“B计划”把不能按时完成的 Lambda 项目、Jigsaw项目和Coin项目的部分改进延迟到 JDK 1.8之中。最终，JDK 1.7的主要改进包括提供新的G1收集器(G1 在发布时依然处于 Experimental状态，直至2012年4月的 Update 4 中才正式“转正”)、加强对非 Java语言的调用支持(JSR-292，这项特性到目前为止依然没有完全实现定型）以级类加载架构等。<br>到目前为止, JDK 1.7已经发布了9个 Update版本，最新的 Java SE 7 Update 9于 2012年 10月16日发布。<br>从 Java SE 7 Update 4起, Oracle开始支持Mac OSX操作系统，并在 Update6中达到完全支持的程度，同时在 Update 6中还对ARM指令集架构提供了支持。至此，官方提供的JDK可以运行于 Windows（不含Windows9x） 、 Linux,、Solaris和 Mac OS 平台上，支持ARM、 x86、x64 和 Sparc指令集架构类型。<br>由于此前 Oracle 公司已经收购了另外一家大型的中间件企业BEA公司，在完成对 Sun 公司的收购之后, Oracle  公司分别从BEA公司和Sun 公司中取得了目前三大商业虚拟机的其中两个—JRockit和 HotSpot, Oracle公司宣布在未来1~2年的时间内，将把这两个优秀的虚拟机互相取长补短，最终合二为一。由此可以预见在不久的将来, Java 虚拟机技术将会产生相当巨大的变化。<br><strong>2011年7月28日,</strong> Oracle 公司发布 Java SE 1.7。<br><strong>2014年3月18日,</strong> Oracle 公司发布 Java SE 1.8。<br><strong>2017年9月22日,</strong> Java SE 1.9正式发布。Java 9提供了一个全新的模块系统，它的核心变化就是引入了一种新的 Java编程组件，也就是模块化。Java 9提供了轻量级JSON API;使用G1作为默认的垃圾收集器，替代了之前默认使用的 Paralel GC; 引入了 jshel这个交互性工具，jshel 为Java带来了读入一一求值一一打印一一循环的功能。它的目的在于以即时结果和反馈的形式，简化原型的实现并帮助我们探索语言在编码时的可选项;对os process拥有更好的控制和管理方式； 全面支持Http 2.0，以所谓的孵化器模块交付，并且为Java配备一个全新的 Http客户端来替代 HttpURLConnection，同时还实现 Http 2.0 和 websockets。</p>
]]></content>
  </entry>
  <entry>
    <title>Java集合框架--Set</title>
    <url>/2022/08/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-Set/</url>
    <content><![CDATA[<p><img src="https://files.catbox.moe/vakrmb.png"></p>
<span id="more"></span>

<h1 id="Java集合框架–Set"><a href="#Java集合框架–Set" class="headerlink" title="Java集合框架–Set"></a>Java集合框架–Set</h1><h2 id="Set概述"><a href="#Set概述" class="headerlink" title="Set概述"></a>Set概述</h2><p>Set也是集合中的一个容器，类似于一个罐子，程序可以依次把若干个对象放进Set，但是Set无法保存元素添加的顺序，Set不允许包含相同的元素，如果把两个相同的元素加入同一个Set中，则添加失败，add()方法会返回false，并且新元素不会被添加。Set接口主要有两个实现类HashSet、TreeSet。</p>
<h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时就是使用这个实现类。HashSet 按 Hash算法来存储集合中的元素，因此具有很好的存取和查找性能。 HashSet 具有以下特点。</p>
<ul>
<li>不能保证元素的排列顺序，顺序可能与添加顺序不同，顺序也有可能发生变化。</li>
<li>HashSet 不是同步的，如果多个线程同时访问一个 HashSet，假设有两个或者两个以上线程同时 修改了HashSet集合时，则必须通过代码来保证其同步。</li>
<li>集合元素值可以是 null。 当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode()方法来得到该对象的 hashCode 值，然后根据该hashCode 值决定该对象在 HashSet 中的存储位置。如果有两个元素通过equals()方法比较返回 true，但它们的 hashCode()方法返回值不相等，HashSet 将会把它们存储在不同的位置，依然可以添加成功。</li>
<li>也就是说，HashSet 集合判断两个元素相等的标准是两个对象通过 equals()方法比较相等，并且两个对象的 hashCode()方法返回值也相等。</li>
</ul>
<h3 id="HashSet常用API"><a href="#HashSet常用API" class="headerlink" title="HashSet常用API"></a>HashSet常用API</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>add(Object o)</td>
<td>添加元素</td>
</tr>
<tr>
<td>remove(Object o)</td>
<td>移除元素</td>
</tr>
<tr>
<td>isEmpty()</td>
<td>判断元素是否为空</td>
</tr>
<tr>
<td>size()</td>
<td>获取set中元素个数</td>
</tr>
</tbody></table>
<p>下面通过示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">		<span class="comment">//添加元素</span></span><br><span class="line">		set.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">		<span class="comment">//移除元素</span></span><br><span class="line">		set.remove(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">		<span class="comment">//此时set中没有元素</span></span><br><span class="line">		System.out.println(set.isEmpty());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashSet遍历"><a href="#HashSet遍历" class="headerlink" title="HashSet遍历"></a>HashSet遍历</h3><ol>
<li>因为HashSet中的元素没有索引，所以不支持for循环直接遍历，但是可以使用foreach进行遍历</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示使用foreach遍历Set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetForDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		set.add(<span class="string">&quot;乔峰&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;虚竹&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;段誉&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (String name : set) &#123;</span><br><span class="line">			System.out.println(name);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>HashSet继承了Iterable接口，因此HashSet还可以使用迭代器遍历。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetIteDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		set.add(<span class="string">&quot;乔峰&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;虚竹&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;段誉&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			System.out.println(it.next());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">			System.out.println(iterator.next());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重写hashCode"><a href="#重写hashCode" class="headerlink" title="重写hashCode"></a>重写hashCode</h3><p>HashSet 中每个能存储元素的”槽位”（slot）通常称为”桶”（bucket），如果有多个元素的 hashCode值相同，但它们通过equals()方法比较返回 false，就需要在一个”桶”里放多个元素，这样会导致性能下降。 <br>下面给出重写 hashCode() 方法的基本规则。</p>
<ul>
<li>在程序运行过程中，同一个对象多次调用 hashCode（）方法应该返回相同的值。</li>
<li>当两个对象通过 equals()方法比较返回 true 时，这两个对象的 hashCode()方法应返回相等的值</li>
<li>对象中用作 equals()方法比较标准的实例变量，都应该用于计算 hashCode 值。</li>
</ul>
<p>下面给出重写hashCode() 方法的一般步骤。</p>
<ol>
<li>把对象内每个有意义的实例变量（即每个参与 equals方法比较标准的实例变量）计算出一个 int 类型的 hashCode 值，计算方式如下： | 实例变量类型 | 计算方式 | 实例变量类型 | 计算方式 | | — | — | — | — | | boolean | hashCode&#x3D;(f?1:0); | float | hashCode&#x3D;Float.floatToIntBits(f) | | 整型 | hashCode&#x3D;(int)f; | double | long l &#x3D; Double.doubleToLongBits(f);<br>hashCode &#x3D; (int)(l^l&gt;&gt;&gt;32); | | long | hashCode&#x3D;(int)(f^(f&gt;&gt;&gt;32)) | 引用类型 | hashCode &#x3D; f.hashCode(); |</li>
<li>用第1步计算出来的多个hashCode 值组合计算出一个 hashCode 值返回。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> f1.hashCode() + (<span class="type">int</span>)f2;</span><br></pre></td></tr></table></figure>

<p>为了避免直接相加产生偶然相等 （两个对象的 f、f 实例变量并不相等，但它们的 hashCode 的和恰好相等），可以通过各实例变量的 hashCode 值乘以任意一个质数后再相加。例如如下代码;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> f1.hashCode()*<span class="number">19</span> + (<span class="type">int</span>)f2*<span class="number">31</span>;</span><br></pre></td></tr></table></figure>

<h3 id="HashSet使用场景"><a href="#HashSet使用场景" class="headerlink" title="HashSet使用场景"></a>HashSet使用场景</h3><p>根据HashSet的特点可以知道HashSet中存放的元素不能重复，利用这个特性就可以做一些去重的业务，例如在给定字符串HelloWorld中统计出现的字符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">		<span class="comment">//将字符串转换成字符数组</span></span><br><span class="line">		<span class="type">char</span>[] ch = str.toCharArray();</span><br><span class="line">		</span><br><span class="line">		Set&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">		<span class="comment">//遍历字符数组将所有元素添加进set去重</span></span><br><span class="line">		<span class="keyword">for</span> (Character c : ch) &#123;</span><br><span class="line">			set.add(c);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//遍历set</span></span><br><span class="line">		<span class="keyword">for</span> (Character c : set) &#123;</span><br><span class="line">			System.out.println(c);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><p>HashSet有一个子类LinkedHashSet，LinkedHashSet集合同HashSet一样，也是根据元素的hashCode值来确定元素的存储位置，并且通过链表维护元素的顺序，换句话说，遍历LinkedHashSet时，LinkedHashSet将会按照元素的添加顺序来访问集合里的元素。<br>由于LinkedHash需要维护元素插入的顺序，因此性能略低于HashSet。下面通过示例学习LinkedHashSet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本例将演示LinkedHashSet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MR.W</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashSetDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">		set.add(<span class="string">&quot;乔峰&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;虚竹&quot;</span>);</span><br><span class="line">		set.add(<span class="string">&quot;段誉&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (String name : set) &#123;</span><br><span class="line">			System.out.println(name);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从示例代码以及HashSet的遍历我们可以看出LinkedHashSet维护了添加顺序，也就是说添加进容器的元素和取出的元素顺序是一致的。<br>如果在某些场景下要使用set容器保存元素，并且需要维护set中的存放元素的顺序，那么就可以使用LinkedHashSet</p>
<h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处干排序状态。</p>
<h3 id="TreeSet常用API"><a href="#TreeSet常用API" class="headerlink" title="TreeSet常用API"></a>TreeSet常用API</h3><p>与 HashSet 集合相比，TreeSet 还提供了如下几个额外的方法。</p>
<ul>
<li>Comparator comparator()∶如果 TreeSet 采用了定制排序，则该方法返回定制排序所使用的 Comparator;如果 TreeSet 采用了自然排序，则返回 null。</li>
<li>Object first()∶返回集合中的第一个元素。</li>
<li>Object last(): 返回集合中的最后一个元素。</li>
<li>Object lower(Object e)∶ 返回集合中位于指定元素之前的元素（即小于指定元素的最大元素，参 考元素不需要是 TreeSet集合里的元素）。</li>
<li>Object higher(Object e)∶返回集合中位于指定元素之后的元素（即大于指定元素的最小元素， 参考元素不需要是 TreeSet 集合里的元素）</li>
<li>SortedSet subSet(Object fromElement，Object toElement)∶返回此Set 的子集合，范围从fromElement （包含）到 toElement （不包含）。</li>
<li>SortedSet headSet(Object toElement)∶ 返回此 Set 的子集，由小于 toElement 的元素组成。</li>
<li>SortedSet tailSet(Object fromElement)∶ 返回此 Set 的子集，由大于或等于 fromElement 的元素组成。</li>
</ul>
<p>下面通过示例学习TreeSet的常用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Integer&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Integer&gt;();</span><br><span class="line">        treeSet.add(<span class="number">10</span>);</span><br><span class="line">        treeSet.add(<span class="number">20</span>);</span><br><span class="line">        treeSet.add(<span class="number">30</span>);</span><br><span class="line">        treeSet.add(<span class="number">40</span>);</span><br><span class="line">        treeSet.add(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//如果 TreeSet 采用了定制排序，则该方法返回定制排序所使用的Comparator;如果 TreeSet 采用了自然排序，则返回 null。</span></span><br><span class="line">        System.out.println(treeSet.comparator());</span><br><span class="line">        <span class="comment">//返回集合中的第一个元素。</span></span><br><span class="line">        System.out.println(treeSet.first());</span><br><span class="line">        <span class="comment">//返回集合中的最后一个元素。</span></span><br><span class="line">        System.out.println(treeSet.last());</span><br><span class="line">        <span class="comment">//返回集合中位于指定元素之前的元素（即小于指定元素的最大元素，参考元素不需要是 TreeSet集合里的元素）。</span></span><br><span class="line">        System.out.println(treeSet.lower(<span class="number">25</span>));</span><br><span class="line">        <span class="comment">//返回集合中位于指定元素之后的元素（即大于指定元素的最小元素，参考元素不需要是 TreeSet 集合里的元素）</span></span><br><span class="line">        System.out.println(treeSet.higher(<span class="number">25</span>));</span><br><span class="line">        <span class="comment">//返回此Set 的子集合，范围从fromElement（包含）到 toElement （不包含）。</span></span><br><span class="line">        System.out.println(treeSet.subSet(<span class="number">20</span>,<span class="number">50</span>));</span><br><span class="line">        <span class="comment">//返回此 Set 的子集，由小于 toElement 的元素组成</span></span><br><span class="line">        System.out.println(treeSet.headSet(<span class="number">30</span>));</span><br><span class="line">        <span class="comment">//返回此 Set 的子集，由大于或等于 fromElement 的元素组成。</span></span><br><span class="line">        System.out.println(treeSet.tailSet(<span class="number">30</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据 上面程序的运行结果即可看出，TreeSet 并不是根据元素的插入顺序进行排序的。而是根据元素实际值的大小来进行排序的。 <br>与 HashSet 集合采用 hash 算法来决定元素的存储位置不同，TreeSet 采用红黑树的数据结构来存储集合元素。那么 TreeSet 进行排序的规则是怎样的呢? TreeSet 支持两种排序方法∶自然排序和定制排序。在默认情况下，TreeSet 采用自然排序。</p>
<h3 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h3><p>TreeSet 会调用集合元素的 compareTo（Object obj）方法来比较元素之间的大小关系，然后将集合元素按升序排列，这种方式就是自然排序。<br> Java 提供了一个 Comparable接口，该接口里定义了一个 compareTo(Object obj)方法，该方法返回一个整数值，实现该接口的类必须实现该方法，实现了该接口的类的对象就可以比较大小。当一个对象调用该方法与另一个对象进行比较时，例如 obj1.compareTo(obj2)，如果该方法返回 0，则表明这两个对象相等;如果该方法返回一个正整数，则表明 obj1 大于 obj2;如果该方法返回一个负整数，则表明 obj1小于obj2。<br>下面通过示例学习该接口，首先定义Student类，类中包含name和age属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Set&lt;Student&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		</span><br><span class="line">		set.add(s1);</span><br><span class="line">		set.add(s2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当运行以上程序时，发现程序抛出了异常：</p>
<p><img src="https://files.catbox.moe/3z10zq.png"></p>
<p>这是因为Student没有继承Comparable接口，如果把一个对象添加到TreeSet时，则该对象的类必须继承Comparable接口，否则程序将会抛出异常。<br>下面的程序将演示正确的添加方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.age-o.age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Set&lt;Student&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line">		</span><br><span class="line">		set.add(s1);</span><br><span class="line">		set.add(s2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student类继承Comparable接口并重写compareTo()方法后再次向TreeSet中添加，可以顺利添加，并且可以按照age属性的大小进行排序。<br>当把一个对象加入 TreeSet 集合中时，TreeSet 调用该对象的 compareTo(Object obj)方法与容器中的其他对象比较大小，然后根据红黑树结构找到它的存储位置。如果两个对象通过 compareTo(Object obj)方法比较相等，新对象将无法添加到 TreeSet 集合中。<br> 对于TreeSet集合而言，它判断两个对象是否相等的唯一标准是∶两个对象通过compareTo(Object obj)方法比较是否返回 0——如果通过 compareTo（Object obi）方法比较返回 0，TreeSet 则会认为它们相等;否则就认为它们不相等。</p>
<h3 id="定制排序"><a href="#定制排序" class="headerlink" title="定制排序"></a>定制排序</h3><p>TreeSet 的自然排序是根据集合元素的大小，TreeSet 将它们以升序排列。如果需要实现定制排序，例如以降序排列，则可以通过 Comparator 接口的帮助。该接口里包含一个int compare(T o1，T o2)方法，该方法用于比较 o1 和 o2 的大小∶ 如果该方法返回正整数，则表明o1 大于o2;如果该方法返回0，则表明 o1等于 o2;如果该方法返回负整数，则表明 o1小于 o2。<br> 如果需要实现定制排序，则需要在创建 TreeSet 集合对象时，提供一个 Comparator 对象与该TreeSet集合关联，由该 Comparator 对象负责集合元素的排序逻辑。<br>下面通过示例学习Comparator的用法，继续使用上例中的Student类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.name = name;</span><br><span class="line">		<span class="built_in">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> cn.bytecollege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparatorDemo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Set&lt;Student&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Student&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> o1.age-o2.age;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line">		<span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="各个Set性能分析"><a href="#各个Set性能分析" class="headerlink" title="各个Set性能分析"></a>各个Set性能分析</h2><p>HashSet 和 TreeSet 是 Set 的两个典型实现，到底如何选择 HashSet 和 TreeSet 呢?HashSet 的性能总是比 TreeSet 好（特别是最常用的添加、查询元素等操作），因为 TreeSet 需要额外的红黑树算法来维护集合元素的次序。只有当需要一个保持排序的 Set 时，才应该使用 TreeSet，否则都应该使用 HashSet。<br> HashSet 还有一个子类∶LinkedHashSet，对于普通的插入、删除操作，LinkedHashSet 比 HashSet要略微慢一点，这是由维护链表所带来的额外开销造成的，但由于有了链表，遍历 LinkedHashSet 会更快。</p>
]]></content>
  </entry>
</search>
